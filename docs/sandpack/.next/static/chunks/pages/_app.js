/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/_app"],{

/***/ "../../node_modules/.pnpm/@amplitude+analytics-connector@1.5.0/node_modules/@amplitude/analytics-connector/dist/analytics-connector.esm.js":
/*!*************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+analytics-connector@1.5.0/node_modules/@amplitude/analytics-connector/dist/analytics-connector.esm.js ***!
  \*************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnalyticsConnector: function() { return /* binding */ AnalyticsConnector; }\n/* harmony export */ });\nvar ApplicationContextProviderImpl = /** @class */ (function () {\n    function ApplicationContextProviderImpl() {\n    }\n    ApplicationContextProviderImpl.prototype.getApplicationContext = function () {\n        return {\n            versionName: this.versionName,\n            language: getLanguage(),\n            platform: 'Web',\n            os: undefined,\n            deviceModel: undefined,\n        };\n    };\n    return ApplicationContextProviderImpl;\n}());\nvar getLanguage = function () {\n    return ((typeof navigator !== 'undefined' &&\n        ((navigator.languages && navigator.languages[0]) ||\n            navigator.language)) ||\n        '');\n};\n\nvar EventBridgeImpl = /** @class */ (function () {\n    function EventBridgeImpl() {\n        this.queue = [];\n    }\n    EventBridgeImpl.prototype.logEvent = function (event) {\n        if (!this.receiver) {\n            if (this.queue.length < 512) {\n                this.queue.push(event);\n            }\n        }\n        else {\n            this.receiver(event);\n        }\n    };\n    EventBridgeImpl.prototype.setEventReceiver = function (receiver) {\n        this.receiver = receiver;\n        if (this.queue.length > 0) {\n            this.queue.forEach(function (event) {\n                receiver(event);\n            });\n            this.queue = [];\n        }\n    };\n    return EventBridgeImpl;\n}());\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar isEqual = function (obj1, obj2) {\n    var primitive = ['string', 'number', 'boolean', 'undefined'];\n    var typeA = typeof obj1;\n    var typeB = typeof obj2;\n    if (typeA !== typeB) {\n        return false;\n    }\n    for (var _i = 0, primitive_1 = primitive; _i < primitive_1.length; _i++) {\n        var p = primitive_1[_i];\n        if (p === typeA) {\n            return obj1 === obj2;\n        }\n    }\n    // check null\n    if (obj1 == null && obj2 == null) {\n        return true;\n    }\n    else if (obj1 == null || obj2 == null) {\n        return false;\n    }\n    // if got here - objects\n    if (obj1.length !== obj2.length) {\n        return false;\n    }\n    //check if arrays\n    var isArrayA = Array.isArray(obj1);\n    var isArrayB = Array.isArray(obj2);\n    if (isArrayA !== isArrayB) {\n        return false;\n    }\n    if (isArrayA && isArrayB) {\n        //arrays\n        for (var i = 0; i < obj1.length; i++) {\n            if (!isEqual(obj1[i], obj2[i])) {\n                return false;\n            }\n        }\n    }\n    else {\n        //objects\n        var sorted1 = Object.keys(obj1).sort();\n        var sorted2 = Object.keys(obj2).sort();\n        if (!isEqual(sorted1, sorted2)) {\n            return false;\n        }\n        //compare object values\n        var result_1 = true;\n        Object.keys(obj1).forEach(function (key) {\n            if (!isEqual(obj1[key], obj2[key])) {\n                result_1 = false;\n            }\n        });\n        return result_1;\n    }\n    return true;\n};\n\nvar ID_OP_SET = '$set';\nvar ID_OP_UNSET = '$unset';\nvar ID_OP_CLEAR_ALL = '$clearAll';\n// Polyfill for Object.entries\nif (!Object.entries) {\n    Object.entries = function (obj) {\n        var ownProps = Object.keys(obj);\n        var i = ownProps.length;\n        var resArray = new Array(i);\n        while (i--) {\n            resArray[i] = [ownProps[i], obj[ownProps[i]]];\n        }\n        return resArray;\n    };\n}\nvar IdentityStoreImpl = /** @class */ (function () {\n    function IdentityStoreImpl() {\n        this.identity = { userProperties: {} };\n        this.listeners = new Set();\n    }\n    IdentityStoreImpl.prototype.editIdentity = function () {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var self = this;\n        var actingUserProperties = __assign({}, this.identity.userProperties);\n        var actingIdentity = __assign(__assign({}, this.identity), { userProperties: actingUserProperties });\n        return {\n            setUserId: function (userId) {\n                actingIdentity.userId = userId;\n                return this;\n            },\n            setDeviceId: function (deviceId) {\n                actingIdentity.deviceId = deviceId;\n                return this;\n            },\n            setUserProperties: function (userProperties) {\n                actingIdentity.userProperties = userProperties;\n                return this;\n            },\n            setOptOut: function (optOut) {\n                actingIdentity.optOut = optOut;\n                return this;\n            },\n            updateUserProperties: function (actions) {\n                var actingProperties = actingIdentity.userProperties || {};\n                for (var _i = 0, _a = Object.entries(actions); _i < _a.length; _i++) {\n                    var _b = _a[_i], action = _b[0], properties = _b[1];\n                    switch (action) {\n                        case ID_OP_SET:\n                            for (var _c = 0, _d = Object.entries(properties); _c < _d.length; _c++) {\n                                var _e = _d[_c], key = _e[0], value = _e[1];\n                                actingProperties[key] = value;\n                            }\n                            break;\n                        case ID_OP_UNSET:\n                            for (var _f = 0, _g = Object.keys(properties); _f < _g.length; _f++) {\n                                var key = _g[_f];\n                                delete actingProperties[key];\n                            }\n                            break;\n                        case ID_OP_CLEAR_ALL:\n                            actingProperties = {};\n                            break;\n                    }\n                }\n                actingIdentity.userProperties = actingProperties;\n                return this;\n            },\n            commit: function () {\n                self.setIdentity(actingIdentity);\n                return this;\n            },\n        };\n    };\n    IdentityStoreImpl.prototype.getIdentity = function () {\n        return __assign({}, this.identity);\n    };\n    IdentityStoreImpl.prototype.setIdentity = function (identity) {\n        var originalIdentity = __assign({}, this.identity);\n        this.identity = __assign({}, identity);\n        if (!isEqual(originalIdentity, this.identity)) {\n            this.listeners.forEach(function (listener) {\n                listener(identity);\n            });\n        }\n    };\n    IdentityStoreImpl.prototype.addIdentityListener = function (listener) {\n        this.listeners.add(listener);\n    };\n    IdentityStoreImpl.prototype.removeIdentityListener = function (listener) {\n        this.listeners.delete(listener);\n    };\n    return IdentityStoreImpl;\n}());\n\nvar safeGlobal = typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof __webpack_require__.g !== 'undefined'\n        ? __webpack_require__.g\n        : self;\n\nvar AnalyticsConnector = /** @class */ (function () {\n    function AnalyticsConnector() {\n        this.identityStore = new IdentityStoreImpl();\n        this.eventBridge = new EventBridgeImpl();\n        this.applicationContextProvider = new ApplicationContextProviderImpl();\n    }\n    AnalyticsConnector.getInstance = function (instanceName) {\n        if (!safeGlobal['analyticsConnectorInstances']) {\n            safeGlobal['analyticsConnectorInstances'] = {};\n        }\n        if (!safeGlobal['analyticsConnectorInstances'][instanceName]) {\n            safeGlobal['analyticsConnectorInstances'][instanceName] =\n                new AnalyticsConnector();\n        }\n        return safeGlobal['analyticsConnectorInstances'][instanceName];\n    };\n    return AnalyticsConnector;\n}());\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+analytics-connector@1.5.0/node_modules/@amplitude/analytics-connector/dist/analytics-connector.esm.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/baseEvent.js":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/baseEvent.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpecialEventType: function() { return /* binding */ SpecialEventType; }\n/* harmony export */ });\n/**\n * Strings that have special meaning when used as an event's type\n * and have different specifications.\n */\nvar SpecialEventType;\n(function (SpecialEventType) {\n    SpecialEventType[\"IDENTIFY\"] = \"$identify\";\n    SpecialEventType[\"GROUP_IDENTIFY\"] = \"$groupidentify\";\n})(SpecialEventType || (SpecialEventType = {}));\n//# sourceMappingURL=baseEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdHlwZXNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3R5cGVzL2VzbS9zcmMvYmFzZUV2ZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0Q0FBNEM7QUFDN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYW1wbGl0dWRlK3R5cGVzQDEuMTAuMi9ub2RlX21vZHVsZXMvQGFtcGxpdHVkZS90eXBlcy9lc20vc3JjL2Jhc2VFdmVudC5qcz8zZjY4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3RyaW5ncyB0aGF0IGhhdmUgc3BlY2lhbCBtZWFuaW5nIHdoZW4gdXNlZCBhcyBhbiBldmVudCdzIHR5cGVcbiAqIGFuZCBoYXZlIGRpZmZlcmVudCBzcGVjaWZpY2F0aW9ucy5cbiAqL1xuZXhwb3J0IHZhciBTcGVjaWFsRXZlbnRUeXBlO1xuKGZ1bmN0aW9uIChTcGVjaWFsRXZlbnRUeXBlKSB7XG4gICAgU3BlY2lhbEV2ZW50VHlwZVtcIklERU5USUZZXCJdID0gXCIkaWRlbnRpZnlcIjtcbiAgICBTcGVjaWFsRXZlbnRUeXBlW1wiR1JPVVBfSURFTlRJRllcIl0gPSBcIiRncm91cGlkZW50aWZ5XCI7XG59KShTcGVjaWFsRXZlbnRUeXBlIHx8IChTcGVjaWFsRXZlbnRUeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2VFdmVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/baseEvent.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/identify.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/identify.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IdentifyOperation: function() { return /* binding */ IdentifyOperation; }\n/* harmony export */ });\nvar IdentifyOperation;\n(function (IdentifyOperation) {\n    // Base Operations to set values\n    IdentifyOperation[\"SET\"] = \"$set\";\n    IdentifyOperation[\"SET_ONCE\"] = \"$setOnce\";\n    // Operations around modifying existing values\n    IdentifyOperation[\"ADD\"] = \"$add\";\n    IdentifyOperation[\"APPEND\"] = \"$append\";\n    IdentifyOperation[\"PREPEND\"] = \"$prepend\";\n    IdentifyOperation[\"REMOVE\"] = \"$remove\";\n    // Operations around appending values *if* they aren't present\n    IdentifyOperation[\"PREINSERT\"] = \"$preInsert\";\n    IdentifyOperation[\"POSTINSERT\"] = \"$postInsert\";\n    // Operations around removing properties/values\n    IdentifyOperation[\"UNSET\"] = \"$unset\";\n    IdentifyOperation[\"CLEAR_ALL\"] = \"$clearAll\";\n})(IdentifyOperation || (IdentifyOperation = {}));\n//# sourceMappingURL=identify.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdHlwZXNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3R5cGVzL2VzbS9zcmMvaWRlbnRpZnkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEM7QUFDL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYW1wbGl0dWRlK3R5cGVzQDEuMTAuMi9ub2RlX21vZHVsZXMvQGFtcGxpdHVkZS90eXBlcy9lc20vc3JjL2lkZW50aWZ5LmpzPzg5ZTAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBJZGVudGlmeU9wZXJhdGlvbjtcbihmdW5jdGlvbiAoSWRlbnRpZnlPcGVyYXRpb24pIHtcbiAgICAvLyBCYXNlIE9wZXJhdGlvbnMgdG8gc2V0IHZhbHVlc1xuICAgIElkZW50aWZ5T3BlcmF0aW9uW1wiU0VUXCJdID0gXCIkc2V0XCI7XG4gICAgSWRlbnRpZnlPcGVyYXRpb25bXCJTRVRfT05DRVwiXSA9IFwiJHNldE9uY2VcIjtcbiAgICAvLyBPcGVyYXRpb25zIGFyb3VuZCBtb2RpZnlpbmcgZXhpc3RpbmcgdmFsdWVzXG4gICAgSWRlbnRpZnlPcGVyYXRpb25bXCJBRERcIl0gPSBcIiRhZGRcIjtcbiAgICBJZGVudGlmeU9wZXJhdGlvbltcIkFQUEVORFwiXSA9IFwiJGFwcGVuZFwiO1xuICAgIElkZW50aWZ5T3BlcmF0aW9uW1wiUFJFUEVORFwiXSA9IFwiJHByZXBlbmRcIjtcbiAgICBJZGVudGlmeU9wZXJhdGlvbltcIlJFTU9WRVwiXSA9IFwiJHJlbW92ZVwiO1xuICAgIC8vIE9wZXJhdGlvbnMgYXJvdW5kIGFwcGVuZGluZyB2YWx1ZXMgKmlmKiB0aGV5IGFyZW4ndCBwcmVzZW50XG4gICAgSWRlbnRpZnlPcGVyYXRpb25bXCJQUkVJTlNFUlRcIl0gPSBcIiRwcmVJbnNlcnRcIjtcbiAgICBJZGVudGlmeU9wZXJhdGlvbltcIlBPU1RJTlNFUlRcIl0gPSBcIiRwb3N0SW5zZXJ0XCI7XG4gICAgLy8gT3BlcmF0aW9ucyBhcm91bmQgcmVtb3ZpbmcgcHJvcGVydGllcy92YWx1ZXNcbiAgICBJZGVudGlmeU9wZXJhdGlvbltcIlVOU0VUXCJdID0gXCIkdW5zZXRcIjtcbiAgICBJZGVudGlmeU9wZXJhdGlvbltcIkNMRUFSX0FMTFwiXSA9IFwiJGNsZWFyQWxsXCI7XG59KShJZGVudGlmeU9wZXJhdGlvbiB8fCAoSWRlbnRpZnlPcGVyYXRpb24gPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpZnkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/identify.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/identity.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/identity.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_IDENTITY_INSTANCE: function() { return /* binding */ DEFAULT_IDENTITY_INSTANCE; }\n/* harmony export */ });\n/** The default identity instance. Needs to match the default instance for the JS SDK */\nvar DEFAULT_IDENTITY_INSTANCE = '$default_instance';\n//# sourceMappingURL=identity.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdHlwZXNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3R5cGVzL2VzbS9zcmMvaWRlbnRpdHkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ087QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdHlwZXNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3R5cGVzL2VzbS9zcmMvaWRlbnRpdHkuanM/YTI5NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogVGhlIGRlZmF1bHQgaWRlbnRpdHkgaW5zdGFuY2UuIE5lZWRzIHRvIG1hdGNoIHRoZSBkZWZhdWx0IGluc3RhbmNlIGZvciB0aGUgSlMgU0RLICovXG5leHBvcnQgdmFyIERFRkFVTFRfSURFTlRJVFlfSU5TVEFOQ0UgPSAnJGRlZmF1bHRfaW5zdGFuY2UnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/identity.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/index.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/index.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_IDENTITY_INSTANCE: function() { return /* reexport safe */ _identity__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_IDENTITY_INSTANCE; },\n/* harmony export */   IdentifyOperation: function() { return /* reexport safe */ _identify__WEBPACK_IMPORTED_MODULE_1__.IdentifyOperation; },\n/* harmony export */   LogLevel: function() { return /* reexport safe */ _logger__WEBPACK_IMPORTED_MODULE_3__.LogLevel; },\n/* harmony export */   SKIPPED_RESPONSE: function() { return /* reexport safe */ _response__WEBPACK_IMPORTED_MODULE_4__.SKIPPED_RESPONSE; },\n/* harmony export */   SpecialEventType: function() { return /* reexport safe */ _baseEvent__WEBPACK_IMPORTED_MODULE_0__.SpecialEventType; },\n/* harmony export */   Status: function() { return /* reexport safe */ _status__WEBPACK_IMPORTED_MODULE_5__.Status; }\n/* harmony export */ });\n/* harmony import */ var _baseEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseEvent */ \"../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/baseEvent.js\");\n/* harmony import */ var _identify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./identify */ \"../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/identify.js\");\n/* harmony import */ var _identity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./identity */ \"../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/identity.js\");\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./logger */ \"../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/logger.js\");\n/* harmony import */ var _response__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./response */ \"../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/response.js\");\n/* harmony import */ var _status__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./status */ \"../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/status.js\");\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdHlwZXNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3R5cGVzL2VzbS9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQStDO0FBQ0M7QUFDTztBQUNuQjtBQUNVO0FBQ1o7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYW1wbGl0dWRlK3R5cGVzQDEuMTAuMi9ub2RlX21vZHVsZXMvQGFtcGxpdHVkZS90eXBlcy9lc20vc3JjL2luZGV4LmpzPzUwYTYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgU3BlY2lhbEV2ZW50VHlwZSB9IGZyb20gJy4vYmFzZUV2ZW50JztcbmV4cG9ydCB7IElkZW50aWZ5T3BlcmF0aW9uLCB9IGZyb20gJy4vaWRlbnRpZnknO1xuZXhwb3J0IHsgREVGQVVMVF9JREVOVElUWV9JTlNUQU5DRSB9IGZyb20gJy4vaWRlbnRpdHknO1xuZXhwb3J0IHsgTG9nTGV2ZWwgfSBmcm9tICcuL2xvZ2dlcic7XG5leHBvcnQgeyBTS0lQUEVEX1JFU1BPTlNFIH0gZnJvbSAnLi9yZXNwb25zZSc7XG5leHBvcnQgeyBTdGF0dXMgfSBmcm9tICcuL3N0YXR1cyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/index.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/logger.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/logger.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: function() { return /* binding */ LogLevel; }\n/* harmony export */ });\n/** Console logging verbosity for the SDK. */\nvar LogLevel;\n(function (LogLevel) {\n    /** No logs will be generated. */\n    LogLevel[LogLevel[\"None\"] = 0] = \"None\";\n    /** Only SDK internal errors will be logged. */\n    LogLevel[LogLevel[\"Error\"] = 1] = \"Error\";\n    /** Information useful for debugging the SDK will be logged. */\n    LogLevel[LogLevel[\"Warn\"] = 2] = \"Warn\";\n    /** All SDK actions will be logged. */\n    LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\n})(LogLevel || (LogLevel = {}));\n//# sourceMappingURL=logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdHlwZXNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3R5cGVzL2VzbS9zcmMvbG9nZ2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0QkFBNEI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYW1wbGl0dWRlK3R5cGVzQDEuMTAuMi9ub2RlX21vZHVsZXMvQGFtcGxpdHVkZS90eXBlcy9lc20vc3JjL2xvZ2dlci5qcz83NzgwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb25zb2xlIGxvZ2dpbmcgdmVyYm9zaXR5IGZvciB0aGUgU0RLLiAqL1xuZXhwb3J0IHZhciBMb2dMZXZlbDtcbihmdW5jdGlvbiAoTG9nTGV2ZWwpIHtcbiAgICAvKiogTm8gbG9ncyB3aWxsIGJlIGdlbmVyYXRlZC4gKi9cbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgIC8qKiBPbmx5IFNESyBpbnRlcm5hbCBlcnJvcnMgd2lsbCBiZSBsb2dnZWQuICovXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJFcnJvclwiXSA9IDFdID0gXCJFcnJvclwiO1xuICAgIC8qKiBJbmZvcm1hdGlvbiB1c2VmdWwgZm9yIGRlYnVnZ2luZyB0aGUgU0RLIHdpbGwgYmUgbG9nZ2VkLiAqL1xuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiV2FyblwiXSA9IDJdID0gXCJXYXJuXCI7XG4gICAgLyoqIEFsbCBTREsgYWN0aW9ucyB3aWxsIGJlIGxvZ2dlZC4gKi9cbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIlZlcmJvc2VcIl0gPSAzXSA9IFwiVmVyYm9zZVwiO1xufSkoTG9nTGV2ZWwgfHwgKExvZ0xldmVsID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/logger.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/response.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/response.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SKIPPED_RESPONSE: function() { return /* binding */ SKIPPED_RESPONSE; }\n/* harmony export */ });\n/* harmony import */ var _status__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./status */ \"../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/status.js\");\n\n/** The Response to expect if a request might have been sent but it was skipped\n *  e.g. no events to flush, user has opted out and nothing should be sent.\n */\nvar SKIPPED_RESPONSE = {\n    status: _status__WEBPACK_IMPORTED_MODULE_0__.Status.Skipped,\n    statusCode: 0,\n};\n//# sourceMappingURL=response.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdHlwZXNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3R5cGVzL2VzbS9zcmMvcmVzcG9uc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLDJDQUFNO0FBQ2xCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdHlwZXNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3R5cGVzL2VzbS9zcmMvcmVzcG9uc2UuanM/ZWIxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGF0dXMgfSBmcm9tICcuL3N0YXR1cyc7XG4vKiogVGhlIFJlc3BvbnNlIHRvIGV4cGVjdCBpZiBhIHJlcXVlc3QgbWlnaHQgaGF2ZSBiZWVuIHNlbnQgYnV0IGl0IHdhcyBza2lwcGVkXG4gKiAgZS5nLiBubyBldmVudHMgdG8gZmx1c2gsIHVzZXIgaGFzIG9wdGVkIG91dCBhbmQgbm90aGluZyBzaG91bGQgYmUgc2VudC5cbiAqL1xuZXhwb3J0IHZhciBTS0lQUEVEX1JFU1BPTlNFID0ge1xuICAgIHN0YXR1czogU3RhdHVzLlNraXBwZWQsXG4gICAgc3RhdHVzQ29kZTogMCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNwb25zZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/response.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/status.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/status.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Status: function() { return /* binding */ Status; }\n/* harmony export */ });\n/** The status of an event. */\nvar Status;\n(function (Status) {\n    /** The status could not be determined. */\n    Status[\"Unknown\"] = \"unknown\";\n    /** The event was skipped due to configuration or callbacks. */\n    Status[\"Skipped\"] = \"skipped\";\n    /** The event was sent successfully. */\n    Status[\"Success\"] = \"success\";\n    /** A user or device in the payload is currently rate limited and should try again later. */\n    Status[\"RateLimit\"] = \"rate_limit\";\n    /** The sent payload was too large to be processed. */\n    Status[\"PayloadTooLarge\"] = \"payload_too_large\";\n    /** The event could not be processed. */\n    Status[\"Invalid\"] = \"invalid\";\n    /** A server-side error ocurred during submission. */\n    Status[\"Failed\"] = \"failed\";\n    /** a server or client side error occuring when a request takes too long and is cancelled */\n    Status[\"Timeout\"] = \"Timeout\";\n    /** NodeJS runtime environment error.. E.g. disconnected from network */\n    Status[\"SystemError\"] = \"SystemError\";\n})(Status || (Status = {}));\n//# sourceMappingURL=status.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdHlwZXNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3R5cGVzL2VzbS9zcmMvc3RhdHVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdCQUF3QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdHlwZXNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3R5cGVzL2VzbS9zcmMvc3RhdHVzLmpzPzEzNjgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIFRoZSBzdGF0dXMgb2YgYW4gZXZlbnQuICovXG5leHBvcnQgdmFyIFN0YXR1cztcbihmdW5jdGlvbiAoU3RhdHVzKSB7XG4gICAgLyoqIFRoZSBzdGF0dXMgY291bGQgbm90IGJlIGRldGVybWluZWQuICovXG4gICAgU3RhdHVzW1wiVW5rbm93blwiXSA9IFwidW5rbm93blwiO1xuICAgIC8qKiBUaGUgZXZlbnQgd2FzIHNraXBwZWQgZHVlIHRvIGNvbmZpZ3VyYXRpb24gb3IgY2FsbGJhY2tzLiAqL1xuICAgIFN0YXR1c1tcIlNraXBwZWRcIl0gPSBcInNraXBwZWRcIjtcbiAgICAvKiogVGhlIGV2ZW50IHdhcyBzZW50IHN1Y2Nlc3NmdWxseS4gKi9cbiAgICBTdGF0dXNbXCJTdWNjZXNzXCJdID0gXCJzdWNjZXNzXCI7XG4gICAgLyoqIEEgdXNlciBvciBkZXZpY2UgaW4gdGhlIHBheWxvYWQgaXMgY3VycmVudGx5IHJhdGUgbGltaXRlZCBhbmQgc2hvdWxkIHRyeSBhZ2FpbiBsYXRlci4gKi9cbiAgICBTdGF0dXNbXCJSYXRlTGltaXRcIl0gPSBcInJhdGVfbGltaXRcIjtcbiAgICAvKiogVGhlIHNlbnQgcGF5bG9hZCB3YXMgdG9vIGxhcmdlIHRvIGJlIHByb2Nlc3NlZC4gKi9cbiAgICBTdGF0dXNbXCJQYXlsb2FkVG9vTGFyZ2VcIl0gPSBcInBheWxvYWRfdG9vX2xhcmdlXCI7XG4gICAgLyoqIFRoZSBldmVudCBjb3VsZCBub3QgYmUgcHJvY2Vzc2VkLiAqL1xuICAgIFN0YXR1c1tcIkludmFsaWRcIl0gPSBcImludmFsaWRcIjtcbiAgICAvKiogQSBzZXJ2ZXItc2lkZSBlcnJvciBvY3VycmVkIGR1cmluZyBzdWJtaXNzaW9uLiAqL1xuICAgIFN0YXR1c1tcIkZhaWxlZFwiXSA9IFwiZmFpbGVkXCI7XG4gICAgLyoqIGEgc2VydmVyIG9yIGNsaWVudCBzaWRlIGVycm9yIG9jY3VyaW5nIHdoZW4gYSByZXF1ZXN0IHRha2VzIHRvbyBsb25nIGFuZCBpcyBjYW5jZWxsZWQgKi9cbiAgICBTdGF0dXNbXCJUaW1lb3V0XCJdID0gXCJUaW1lb3V0XCI7XG4gICAgLyoqIE5vZGVKUyBydW50aW1lIGVudmlyb25tZW50IGVycm9yLi4gRS5nLiBkaXNjb25uZWN0ZWQgZnJvbSBuZXR3b3JrICovXG4gICAgU3RhdHVzW1wiU3lzdGVtRXJyb3JcIl0gPSBcIlN5c3RlbUVycm9yXCI7XG59KShTdGF0dXMgfHwgKFN0YXR1cyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0dXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/status.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+ua-parser-js@0.7.33/node_modules/@amplitude/ua-parser-js/src/ua-parser.js":
/*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+ua-parser-js@0.7.33/node_modules/@amplitude/ua-parser-js/src/ua-parser.js ***!
  \*********************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("var __WEBPACK_AMD_DEFINE_RESULT__;/////////////////////////////////////////////////////////////////////////////////\n/* UAParser.js v0.7.33\n   Copyright © 2012-2021 Faisal Salman <f@faisalman.com>\n   MIT License */ /*\n   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.\n   Supports browser & node.js environment.\n   Demo   : https://faisalman.github.io/ua-parser-js\n   Source : https://github.com/faisalman/ua-parser-js */\n/////////////////////////////////////////////////////////////////////////////////\n\n(function (window, undefined) {\n  \"use strict\";\n\n  //////////////\n  // Constants\n  /////////////\n\n  var LIBVERSION = \"0.7.33\",\n    EMPTY = \"\",\n    UNKNOWN = \"?\",\n    FUNC_TYPE = \"function\",\n    UNDEF_TYPE = \"undefined\",\n    OBJ_TYPE = \"object\",\n    STR_TYPE = \"string\",\n    MAJOR = \"major\",\n    MODEL = \"model\",\n    NAME = \"name\",\n    TYPE = \"type\",\n    VENDOR = \"vendor\",\n    VERSION = \"version\",\n    ARCHITECTURE = \"architecture\",\n    CONSOLE = \"console\",\n    MOBILE = \"mobile\",\n    TABLET = \"tablet\",\n    SMARTTV = \"smarttv\",\n    WEARABLE = \"wearable\",\n    EMBEDDED = \"embedded\",\n    UA_MAX_LENGTH = 350;\n\n  var AMAZON = \"Amazon\",\n    APPLE = \"Apple\",\n    ASUS = \"ASUS\",\n    BLACKBERRY = \"BlackBerry\",\n    BROWSER = \"Browser\",\n    CHROME = \"Chrome\",\n    EDGE = \"Edge\",\n    FIREFOX = \"Firefox\",\n    GOOGLE = \"Google\",\n    HUAWEI = \"Huawei\",\n    LG = \"LG\",\n    MICROSOFT = \"Microsoft\",\n    MOTOROLA = \"Motorola\",\n    OPERA = \"Opera\",\n    SAMSUNG = \"Samsung\",\n    SHARP = \"Sharp\",\n    SONY = \"Sony\",\n    XIAOMI = \"Xiaomi\",\n    ZEBRA = \"Zebra\",\n    FACEBOOK = \"Facebook\";\n\n  ///////////\n  // Helper\n  //////////\n\n  var extend = function (regexes, extensions) {\n      var mergedRegexes = {};\n      for (var i in regexes) {\n        if (extensions[i] && extensions[i].length % 2 === 0) {\n          mergedRegexes[i] = extensions[i].concat(regexes[i]);\n        } else {\n          mergedRegexes[i] = regexes[i];\n        }\n      }\n      return mergedRegexes;\n    },\n    enumerize = function (arr) {\n      var enums = {};\n      for (var i = 0; i < arr.length; i++) {\n        enums[arr[i].toUpperCase()] = arr[i];\n      }\n      return enums;\n    },\n    has = function (str1, str2) {\n      return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;\n    },\n    lowerize = function (str) {\n      return str.toLowerCase();\n    },\n    majorize = function (version) {\n      return typeof version === STR_TYPE ? version.replace(/[^\\d\\.]/g, EMPTY).split(\".\")[0] : undefined;\n    },\n    trim = function (str, len) {\n      if (typeof str === STR_TYPE) {\n        str = str.replace(/^\\s\\s*/, EMPTY);\n        return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);\n      }\n    };\n\n  ///////////////\n  // Map helper\n  //////////////\n\n  var rgxMapper = function (ua, arrays) {\n      var i = 0,\n        j,\n        k,\n        p,\n        q,\n        matches,\n        match;\n\n      // loop through all regexes maps\n      while (i < arrays.length && !matches) {\n        var regex = arrays[i], // even sequence (0,2,4,..)\n          props = arrays[i + 1]; // odd sequence (1,3,5,..)\n        j = k = 0;\n\n        // try matching uastring with regexes\n        while (j < regex.length && !matches) {\n          matches = regex[j++].exec(ua);\n\n          if (!!matches) {\n            for (p = 0; p < props.length; p++) {\n              match = matches[++k];\n              q = props[p];\n              // check if given property is actually array\n              if (typeof q === OBJ_TYPE && q.length > 0) {\n                if (q.length === 2) {\n                  if (typeof q[1] == FUNC_TYPE) {\n                    // assign modified match\n                    this[q[0]] = q[1].call(this, match);\n                  } else {\n                    // assign given value, ignore regex match\n                    this[q[0]] = q[1];\n                  }\n                } else if (q.length === 3) {\n                  // check whether function or regex\n                  if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {\n                    // call function (usually string mapper)\n                    this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;\n                  } else {\n                    // sanitize match using given regex\n                    this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;\n                  }\n                } else if (q.length === 4) {\n                  this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;\n                }\n              } else {\n                this[q] = match ? match : undefined;\n              }\n            }\n          }\n        }\n        i += 2;\n      }\n    },\n    strMapper = function (str, map) {\n      for (var i in map) {\n        // check if current value is array\n        if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {\n          for (var j = 0; j < map[i].length; j++) {\n            if (has(map[i][j], str)) {\n              return i === UNKNOWN ? undefined : i;\n            }\n          }\n        } else if (has(map[i], str)) {\n          return i === UNKNOWN ? undefined : i;\n        }\n      }\n      return str;\n    };\n\n  ///////////////\n  // String map\n  //////////////\n\n  // Safari < 3.0\n  var oldSafariMap = {\n      \"1.0\": \"/8\",\n      1.2: \"/1\",\n      1.3: \"/3\",\n      \"2.0\": \"/412\",\n      \"2.0.2\": \"/416\",\n      \"2.0.3\": \"/417\",\n      \"2.0.4\": \"/419\",\n      \"?\": \"/\"\n    },\n    windowsVersionMap = {\n      ME: \"4.90\",\n      \"NT 3.11\": \"NT3.51\",\n      \"NT 4.0\": \"NT4.0\",\n      2000: \"NT 5.0\",\n      XP: [\"NT 5.1\", \"NT 5.2\"],\n      Vista: \"NT 6.0\",\n      7: \"NT 6.1\",\n      8: \"NT 6.2\",\n      8.1: \"NT 6.3\",\n      10: [\"NT 6.4\", \"NT 10.0\"],\n      RT: \"ARM\"\n    };\n\n  //////////////\n  // Regex map\n  /////////////\n\n  var regexes = {\n    browser: [\n      [\n        /\\b(?:crmo|crios)\\/([\\w\\.]+)/i // Chrome for Android/iOS\n      ],\n      [VERSION, [NAME, \"Chrome\"]],\n      [\n        /edg(?:e|ios|a)?\\/([\\w\\.]+)/i // Microsoft Edge\n      ],\n      [VERSION, [NAME, \"Edge\"]],\n      [\n        // Presto based\n        /(opera mini)\\/([-\\w\\.]+)/i, // Opera Mini\n        /(opera [mobiletab]{3,6})\\b.+version\\/([-\\w\\.]+)/i, // Opera Mobi/Tablet\n        /(opera)(?:.+version\\/|[\\/ ]+)([\\w\\.]+)/i // Opera\n      ],\n      [NAME, VERSION],\n      [\n        /opios[\\/ ]+([\\w\\.]+)/i // Opera mini on iphone >= 8.0\n      ],\n      [VERSION, [NAME, OPERA + \" Mini\"]],\n      [\n        /\\bopr\\/([\\w\\.]+)/i // Opera Webkit\n      ],\n      [VERSION, [NAME, OPERA]],\n      [\n        // Mixed\n        /(kindle)\\/([\\w\\.]+)/i, // Kindle\n        /(lunascape|maxthon|netfront|jasmine|blazer)[\\/ ]?([\\w\\.]*)/i, // Lunascape/Maxthon/Netfront/Jasmine/Blazer\n        // Trident based\n        /(avant |iemobile|slim)(?:browser)?[\\/ ]?([\\w\\.]*)/i, // Avant/IEMobile/SlimBrowser\n        /(ba?idubrowser)[\\/ ]?([\\w\\.]+)/i, // Baidu Browser\n        /(?:ms|\\()(ie) ([\\w\\.]+)/i, // Internet Explorer\n\n        // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon\n        /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq|duckduckgo)\\/([-\\w\\.]+)/i,\n        // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ\n        /(weibo)__([\\d\\.]+)/i // Weibo\n      ],\n      [NAME, VERSION],\n      [\n        /(?:\\buc? ?browser|(?:juc.+)ucweb)[\\/ ]?([\\w\\.]+)/i // UCBrowser\n      ],\n      [VERSION, [NAME, \"UC\" + BROWSER]],\n      [\n        /microm.+\\bqbcore\\/([\\w\\.]+)/i, // WeChat Desktop for Windows Built-in Browser\n        /\\bqbcore\\/([\\w\\.]+).+microm/i\n      ],\n      [VERSION, [NAME, \"WeChat(Win) Desktop\"]],\n      [\n        /micromessenger\\/([\\w\\.]+)/i // WeChat\n      ],\n      [VERSION, [NAME, \"WeChat\"]],\n      [\n        /konqueror\\/([\\w\\.]+)/i // Konqueror\n      ],\n      [VERSION, [NAME, \"Konqueror\"]],\n      [\n        /trident.+rv[: ]([\\w\\.]{1,9})\\b.+like gecko/i // IE11\n      ],\n      [VERSION, [NAME, \"IE\"]],\n      [\n        /yabrowser\\/([\\w\\.]+)/i // Yandex\n      ],\n      [VERSION, [NAME, \"Yandex\"]],\n      [\n        /(avast|avg)\\/([\\w\\.]+)/i // Avast/AVG Secure Browser\n      ],\n      [[NAME, /(.+)/, \"$1 Secure \" + BROWSER], VERSION],\n      [\n        /\\bfocus\\/([\\w\\.]+)/i // Firefox Focus\n      ],\n      [VERSION, [NAME, FIREFOX + \" Focus\"]],\n      [\n        /\\bopt\\/([\\w\\.]+)/i // Opera Touch\n      ],\n      [VERSION, [NAME, OPERA + \" Touch\"]],\n      [\n        /coc_coc\\w+\\/([\\w\\.]+)/i // Coc Coc Browser\n      ],\n      [VERSION, [NAME, \"Coc Coc\"]],\n      [\n        /dolfin\\/([\\w\\.]+)/i // Dolphin\n      ],\n      [VERSION, [NAME, \"Dolphin\"]],\n      [\n        /coast\\/([\\w\\.]+)/i // Opera Coast\n      ],\n      [VERSION, [NAME, OPERA + \" Coast\"]],\n      [\n        /miuibrowser\\/([\\w\\.]+)/i // MIUI Browser\n      ],\n      [VERSION, [NAME, \"MIUI \" + BROWSER]],\n      [\n        /fxios\\/([-\\w\\.]+)/i // Firefox for iOS\n      ],\n      [VERSION, [NAME, FIREFOX]],\n      [\n        /\\bqihu|(qi?ho?o?|360)browser/i // 360\n      ],\n      [[NAME, \"360 \" + BROWSER]],\n      [/(oculus|samsung|sailfish|huawei)browser\\/([\\w\\.]+)/i],\n      [[NAME, /(.+)/, \"$1 \" + BROWSER], VERSION],\n      [\n        // Oculus/Samsung/Sailfish/Huawei Browser\n        /(comodo_dragon)\\/([\\w\\.]+)/i // Comodo Dragon\n      ],\n      [[NAME, /_/g, \" \"], VERSION],\n      [\n        /(electron)\\/([\\w\\.]+) safari/i, // Electron-based App\n        /(tesla)(?: qtcarbrowser|\\/(20\\d\\d\\.[-\\w\\.]+))/i, // Tesla\n        /m?(qqbrowser|baiduboxapp|2345Explorer)[\\/ ]?([\\w\\.]+)/i // QQBrowser/Baidu App/2345 Browser\n      ],\n      [NAME, VERSION],\n      [\n        /(metasr)[\\/ ]?([\\w\\.]+)/i, // SouGouBrowser\n        /(lbbrowser)/i, // LieBao Browser\n        /\\[(linkedin)app\\]/i // LinkedIn App for iOS & Android\n      ],\n      [NAME],\n      [\n        // WebView\n        /((?:fban\\/fbios|fb_iab\\/fb4a)(?!.+fbav)|;fbav\\/([\\w\\.]+);)/i // Facebook App for iOS & Android\n      ],\n      [[NAME, FACEBOOK], VERSION],\n      [\n        /safari (line)\\/([\\w\\.]+)/i, // Line App for iOS\n        /\\b(line)\\/([\\w\\.]+)\\/iab/i, // Line App for Android\n        /(chromium|instagram)[\\/ ]([-\\w\\.]+)/i // Chromium/Instagram\n      ],\n      [NAME, VERSION],\n      [\n        /\\bgsa\\/([\\w\\.]+) .*safari\\//i // Google Search Appliance on iOS\n      ],\n      [VERSION, [NAME, \"GSA\"]],\n      [\n        /headlesschrome(?:\\/([\\w\\.]+)| )/i // Chrome Headless\n      ],\n      [VERSION, [NAME, CHROME + \" Headless\"]],\n      [\n        / wv\\).+(chrome)\\/([\\w\\.]+)/i // Chrome WebView\n      ],\n      [[NAME, CHROME + \" WebView\"], VERSION],\n      [\n        /droid.+ version\\/([\\w\\.]+)\\b.+(?:mobile safari|safari)/i // Android Browser\n      ],\n      [VERSION, [NAME, \"Android \" + BROWSER]],\n      [\n        /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\\/v?([\\w\\.]+)/i // Chrome/OmniWeb/Arora/Tizen/Nokia\n      ],\n      [NAME, VERSION],\n      [\n        /version\\/([\\w\\.\\,]+) .*mobile\\/\\w+ (safari)/i // Mobile Safari\n      ],\n      [VERSION, [NAME, \"Mobile Safari\"]],\n      [\n        /version\\/([\\w(\\.|\\,)]+) .*(mobile ?safari|safari)/i // Safari & Safari Mobile\n      ],\n      [VERSION, NAME],\n      [\n        /webkit.+?(mobile ?safari|safari)(\\/[\\w\\.]+)/i // Safari < 3.0\n      ],\n      [NAME, [VERSION, strMapper, oldSafariMap]],\n      [/(webkit|khtml)\\/([\\w\\.]+)/i],\n      [NAME, VERSION],\n      [\n        // Gecko based\n        /(navigator|netscape\\d?)\\/([-\\w\\.]+)/i // Netscape\n      ],\n      [[NAME, \"Netscape\"], VERSION],\n      [\n        /mobile vr; rv:([\\w\\.]+)\\).+firefox/i // Firefox Reality\n      ],\n      [VERSION, [NAME, FIREFOX + \" Reality\"]],\n      [\n        /ekiohf.+(flow)\\/([\\w\\.]+)/i, // Flow\n        /(swiftfox)/i, // Swiftfox\n        /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\\/ ]?([\\w\\.\\+]+)/i,\n        // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar\n        /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\\/([-\\w\\.]+)$/i,\n        // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix\n        /(firefox)\\/([\\w\\.]+)/i, // Other Firefox-based\n        /(mozilla)\\/([\\w\\.]+) .+rv\\:.+gecko\\/\\d+/i, // Mozilla\n\n        // Other\n        /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\\. ]?browser)[-\\/ ]?v?([\\w\\.]+)/i,\n        // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser\n        /(links) \\(([\\w\\.]+)/i // Links\n      ],\n      [NAME, VERSION],\n      [\n        /(cobalt)\\/([\\w\\.]+)/i // Cobalt\n      ],\n      [NAME, [VERSION, /master.|lts./, \"\"]]\n    ],\n\n    cpu: [\n      [\n        /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\\)]/i // AMD64 (x64)\n      ],\n      [[ARCHITECTURE, \"amd64\"]],\n      [\n        /(ia32(?=;))/i // IA32 (quicktime)\n      ],\n      [[ARCHITECTURE, lowerize]],\n      [\n        /((?:i[346]|x)86)[;\\)]/i // IA32 (x86)\n      ],\n      [[ARCHITECTURE, \"ia32\"]],\n      [\n        /\\b(aarch64|arm(v?8e?l?|_?64))\\b/i // ARM64\n      ],\n      [[ARCHITECTURE, \"arm64\"]],\n      [\n        /\\b(arm(?:v[67])?ht?n?[fl]p?)\\b/i // ARMHF\n      ],\n      [[ARCHITECTURE, \"armhf\"]],\n      [\n        // PocketPC mistakenly identified as PowerPC\n        /windows (ce|mobile); ppc;/i\n      ],\n      [[ARCHITECTURE, \"arm\"]],\n      [\n        /((?:ppc|powerpc)(?:64)?)(?: mac|;|\\))/i // PowerPC\n      ],\n      [[ARCHITECTURE, /ower/, EMPTY, lowerize]],\n      [\n        /(sun4\\w)[;\\)]/i // SPARC\n      ],\n      [[ARCHITECTURE, \"sparc\"]],\n      [\n        /((?:avr32|ia64(?=;))|68k(?=\\))|\\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\\b|pa-risc)/i\n        // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC\n      ],\n      [[ARCHITECTURE, lowerize]]\n    ],\n\n    device: [\n      [\n        //////////////////////////\n        // MOBILES & TABLETS\n        // Ordered by popularity\n        /////////////////////////\n\n        // Samsung\n        /\\b(sch-i[89]0\\d|shw-m380s|sm-[ptx]\\w{2,4}|gt-[pn]\\d{2,4}|sgh-t8[56]9|nexus 10)/i\n      ],\n      [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]],\n      [\n        /\\b((?:s[cgp]h|gt|sm)-\\w+|galaxy nexus)/i,\n        /samsung[- ]([-\\w]+)/i,\n        /sec-(sgh\\w+)/i\n      ],\n      [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]],\n      [\n        // Apple\n        /((ipod|iphone)\\d+,\\d+)/i // iPod/iPhone model\n      ],\n      [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]],\n      [\n        /(ipad\\d+,\\d+)/i // iPad model\n      ],\n      [MODEL, [VENDOR, APPLE], [TYPE, TABLET]],\n      [\n        /\\((ip(?:hone|od)[\\w ]*);/i // iPod/iPhone\n      ],\n      [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]],\n      [\n        /\\((ipad);[-\\w\\),; ]+apple/i, // iPad\n        /applecoremedia\\/[\\w\\.]+ \\((ipad)/i,\n        /\\b(ipad)\\d\\d?,\\d\\d?[;\\]].+ios/i\n      ],\n      [MODEL, [VENDOR, APPLE], [TYPE, TABLET]],\n      [/(macintosh);/i],\n      [MODEL, [VENDOR, APPLE]],\n      [\n        // Huawei\n        /\\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\\d{2})\\b(?!.+d\\/s)/i\n      ],\n      [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]],\n      [\n        /(?:huawei|honor)([-\\w ]+)[;\\)]/i,\n        /\\b(nexus 6p|\\w{2,4}e?-[atu]?[ln][\\dx][012359c][adn]?)\\b(?!.+d\\/s)/i\n      ],\n      [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]],\n      [\n        // Xiaomi\n        /\\b(poco[\\w ]+)(?: bui|\\))/i, // Xiaomi POCO\n        /\\b; (\\w+) build\\/hm\\1/i, // Xiaomi Hongmi 'numeric' models\n        /\\b(hm[-_ ]?note?[_ ]?(?:\\d\\w)?) bui/i, // Xiaomi Hongmi\n        /\\b(redmi[\\-_ ]?(?:note|k)?[\\w_ ]+)(?: bui|\\))/i, // Xiaomi Redmi\n        /\\b(mi[-_ ]?(?:a\\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\\d?\\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\\))/i // Xiaomi Mi\n      ],\n      [\n        [MODEL, /_/g, \" \"],\n        [VENDOR, XIAOMI],\n        [TYPE, MOBILE]\n      ],\n      [\n        /\\b(mi[-_ ]?(?:pad)(?:[\\w_ ]+))(?: bui|\\))/i // Mi Pad tablets\n      ],\n      [\n        [MODEL, /_/g, \" \"],\n        [VENDOR, XIAOMI],\n        [TYPE, TABLET]\n      ],\n      [\n        // OPPO\n        /; (\\w+) bui.+ oppo/i,\n        /\\b(cph[12]\\d{3}|p(?:af|c[al]|d\\w|e[ar])[mt]\\d0|x9007|a101op)\\b/i\n      ],\n      [MODEL, [VENDOR, \"OPPO\"], [TYPE, MOBILE]],\n      [\n        // Vivo\n        /vivo (\\w+)(?: bui|\\))/i,\n        /\\b(v[12]\\d{3}\\w?[at])(?: bui|;)/i\n      ],\n      [MODEL, [VENDOR, \"Vivo\"], [TYPE, MOBILE]],\n      [\n        // Realme\n        /\\b(rmx[12]\\d{3})(?: bui|;|\\))/i\n      ],\n      [MODEL, [VENDOR, \"Realme\"], [TYPE, MOBILE]],\n      [\n        // Motorola\n        /\\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\\b[\\w ]+build\\//i,\n        /\\bmot(?:orola)?[- ](\\w*)/i,\n        /((?:moto[\\w\\(\\) ]+|xt\\d{3,4}|nexus 6)(?= bui|\\)))/i\n      ],\n      [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]],\n      [/\\b(mz60\\d|xoom[2 ]{0,2}) build\\//i],\n      [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]],\n      [\n        // LG\n        /((?=lg)?[vl]k\\-?\\d{3}) bui| 3\\.[-\\w; ]{10}lg?-([06cv9]{3,4})/i\n      ],\n      [MODEL, [VENDOR, LG], [TYPE, TABLET]],\n      [\n        /(lm(?:-?f100[nv]?|-[\\w\\.]+)(?= bui|\\))|nexus [45])/i,\n        /\\blg[-e;\\/ ]+((?!browser|netcast|android tv)\\w+)/i,\n        /\\blg-?([\\d\\w]+) bui/i\n      ],\n      [MODEL, [VENDOR, LG], [TYPE, MOBILE]],\n      [\n        // Lenovo\n        /(ideatab[-\\w ]+)/i,\n        /lenovo ?(s[56]000[-\\w]+|tab(?:[\\w ]+)|yt[-\\d\\w]{6}|tb[-\\d\\w]{6})/i\n      ],\n      [MODEL, [VENDOR, \"Lenovo\"], [TYPE, TABLET]],\n      [\n        // Nokia\n        /(?:maemo|nokia).*(n900|lumia \\d+)/i,\n        /nokia[-_ ]?([-\\w\\.]*)/i\n      ],\n      [\n        [MODEL, /_/g, \" \"],\n        [VENDOR, \"Nokia\"],\n        [TYPE, MOBILE]\n      ],\n      [\n        // Google\n        /(pixel c)\\b/i // Google Pixel C\n      ],\n      [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]],\n      [\n        /droid.+; (pixel[\\daxl ]{0,6})(?: bui|\\))/i // Google Pixel\n      ],\n      [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]],\n      [\n        // Sony\n        /droid.+ (a?\\d[0-2]{2}so|[c-g]\\d{4}|so[-gl]\\w+|xq-a\\w[4-7][12])(?= bui|\\).+chrome\\/(?![1-6]{0,1}\\d\\.))/i\n      ],\n      [MODEL, [VENDOR, SONY], [TYPE, MOBILE]],\n      [/sony tablet [ps]/i, /\\b(?:sony)?sgp\\w+(?: bui|\\))/i],\n      [\n        [MODEL, \"Xperia Tablet\"],\n        [VENDOR, SONY],\n        [TYPE, TABLET]\n      ],\n      [\n        // OnePlus\n        / (kb2005|in20[12]5|be20[12][59])\\b/i,\n        /(?:one)?(?:plus)? (a\\d0\\d\\d)(?: b|\\))/i\n      ],\n      [MODEL, [VENDOR, \"OnePlus\"], [TYPE, MOBILE]],\n      [\n        // Amazon\n        /(alexa)webm/i,\n        /(kf[a-z]{2}wi)( bui|\\))/i, // Kindle Fire without Silk\n        /(kf[a-z]+)( bui|\\)).+silk\\//i // Kindle Fire HD\n      ],\n      [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]],\n      [\n        /((?:sd|kf)[0349hijorstuw]+)( bui|\\)).+silk\\//i // Fire Phone\n      ],\n      [\n        [MODEL, /(.+)/g, \"Fire Phone $1\"],\n        [VENDOR, AMAZON],\n        [TYPE, MOBILE]\n      ],\n      [\n        // BlackBerry\n        /(playbook);[-\\w\\),; ]+(rim)/i // BlackBerry PlayBook\n      ],\n      [MODEL, VENDOR, [TYPE, TABLET]],\n      [\n        /\\b((?:bb[a-f]|st[hv])100-\\d)/i,\n        /\\(bb10; (\\w+)/i // BlackBerry 10\n      ],\n      [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]],\n      [\n        // Asus\n        /(?:\\b|asus_)(transfo[prime ]{4,10} \\w+|eeepc|slider \\w+|nexus 7|padfone|p00[cj])/i\n      ],\n      [MODEL, [VENDOR, ASUS], [TYPE, TABLET]],\n      [/ (z[bes]6[027][012][km][ls]|zenfone \\d\\w?)\\b/i],\n      [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]],\n      [\n        // HTC\n        /(nexus 9)/i // HTC Nexus 9\n      ],\n      [MODEL, [VENDOR, \"HTC\"], [TYPE, TABLET]],\n      [\n        /(htc)[-;_ ]{1,2}([\\w ]+(?=\\)| bui)|\\w+)/i, // HTC\n\n        // ZTE\n        /(zte)[- ]([\\w ]+?)(?: bui|\\/|\\))/i,\n        /(alcatel|geeksphone|nexian|panasonic|sony(?!-bra))[-_ ]?([-\\w]*)/i // Alcatel/GeeksPhone/Nexian/Panasonic/Sony\n      ],\n      [VENDOR, [MODEL, /_/g, \" \"], [TYPE, MOBILE]],\n      [\n        // Acer\n        /droid.+; ([ab][1-7]-?[0178a]\\d\\d?)/i\n      ],\n      [MODEL, [VENDOR, \"Acer\"], [TYPE, TABLET]],\n      [\n        // Meizu\n        /droid.+; (m[1-5] note) bui/i,\n        /\\bmz-([-\\w]{2,})/i\n      ],\n      [MODEL, [VENDOR, \"Meizu\"], [TYPE, MOBILE]],\n      [\n        // Sharp\n        /\\b(sh-?[altvz]?\\d\\d[a-ekm]?)/i\n      ],\n      [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]],\n      [\n        // MIXED\n        /(blackberry|benq|palm(?=\\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\\w]*)/i,\n        // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron\n        /(hp) ([\\w ]+\\w)/i, // HP iPAQ\n        /(asus)-?(\\w+)/i, // Asus\n        /(microsoft); (lumia[\\w ]+)/i, // Microsoft Lumia\n        /(lenovo)[-_ ]?([-\\w]+)/i, // Lenovo\n        /(jolla)/i, // Jolla\n        /(oppo) ?([\\w ]+) bui/i // OPPO\n      ],\n      [VENDOR, MODEL, [TYPE, MOBILE]],\n      [\n        /(archos) (gamepad2?)/i, // Archos\n        /(hp).+(touchpad(?!.+tablet)|tablet)/i, // HP TouchPad\n        /(kindle)\\/([\\w\\.]+)/i, // Kindle\n        /(nook)[\\w ]+build\\/(\\w+)/i, // Nook\n        /(dell) (strea[kpr\\d ]*[\\dko])/i, // Dell Streak\n        /(le[- ]+pan)[- ]+(\\w{1,9}) bui/i, // Le Pan Tablets\n        /(trinity)[- ]*(t\\d{3}) bui/i, // Trinity Tablets\n        /(gigaset)[- ]+(q\\w{1,9}) bui/i, // Gigaset Tablets\n        /(vodafone) ([\\w ]+)(?:\\)| bui)/i // Vodafone\n      ],\n      [VENDOR, MODEL, [TYPE, TABLET]],\n      [\n        /(surface duo)/i // Surface Duo\n      ],\n      [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]],\n      [\n        /droid [\\d\\.]+; (fp\\du?)(?: b|\\))/i // Fairphone\n      ],\n      [MODEL, [VENDOR, \"Fairphone\"], [TYPE, MOBILE]],\n      [\n        /(u304aa)/i // AT&T\n      ],\n      [MODEL, [VENDOR, \"AT&T\"], [TYPE, MOBILE]],\n      [\n        /\\bsie-(\\w*)/i // Siemens\n      ],\n      [MODEL, [VENDOR, \"Siemens\"], [TYPE, MOBILE]],\n      [\n        /\\b(rct\\w+) b/i // RCA Tablets\n      ],\n      [MODEL, [VENDOR, \"RCA\"], [TYPE, TABLET]],\n      [\n        /\\b(venue[\\d ]{2,7}) b/i // Dell Venue Tablets\n      ],\n      [MODEL, [VENDOR, \"Dell\"], [TYPE, TABLET]],\n      [\n        /\\b(q(?:mv|ta)\\w+) b/i // Verizon Tablet\n      ],\n      [MODEL, [VENDOR, \"Verizon\"], [TYPE, TABLET]],\n      [\n        /\\b(?:barnes[& ]+noble |bn[rt])([\\w\\+ ]*) b/i // Barnes & Noble Tablet\n      ],\n      [MODEL, [VENDOR, \"Barnes & Noble\"], [TYPE, TABLET]],\n      [/\\b(tm\\d{3}\\w+) b/i],\n      [MODEL, [VENDOR, \"NuVision\"], [TYPE, TABLET]],\n      [\n        /\\b(k88) b/i // ZTE K Series Tablet\n      ],\n      [MODEL, [VENDOR, \"ZTE\"], [TYPE, TABLET]],\n      [\n        /\\b(nx\\d{3}j) b/i // ZTE Nubia\n      ],\n      [MODEL, [VENDOR, \"ZTE\"], [TYPE, MOBILE]],\n      [\n        /\\b(gen\\d{3}) b.+49h/i // Swiss GEN Mobile\n      ],\n      [MODEL, [VENDOR, \"Swiss\"], [TYPE, MOBILE]],\n      [\n        /\\b(zur\\d{3}) b/i // Swiss ZUR Tablet\n      ],\n      [MODEL, [VENDOR, \"Swiss\"], [TYPE, TABLET]],\n      [\n        /\\b((zeki)?tb.*\\b) b/i // Zeki Tablets\n      ],\n      [MODEL, [VENDOR, \"Zeki\"], [TYPE, TABLET]],\n      [\n        /\\b([yr]\\d{2}) b/i,\n        /\\b(dragon[- ]+touch |dt)(\\w{5}) b/i // Dragon Touch Tablet\n      ],\n      [[VENDOR, \"Dragon Touch\"], MODEL, [TYPE, TABLET]],\n      [\n        /\\b(ns-?\\w{0,9}) b/i // Insignia Tablets\n      ],\n      [MODEL, [VENDOR, \"Insignia\"], [TYPE, TABLET]],\n      [\n        /\\b((nxa|next)-?\\w{0,9}) b/i // NextBook Tablets\n      ],\n      [MODEL, [VENDOR, \"NextBook\"], [TYPE, TABLET]],\n      [\n        /\\b(xtreme\\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i // Voice Xtreme Phones\n      ],\n      [[VENDOR, \"Voice\"], MODEL, [TYPE, MOBILE]],\n      [\n        /\\b(lvtel\\-)?(v1[12]) b/i // LvTel Phones\n      ],\n      [[VENDOR, \"LvTel\"], MODEL, [TYPE, MOBILE]],\n      [\n        /\\b(ph-1) /i // Essential PH-1\n      ],\n      [MODEL, [VENDOR, \"Essential\"], [TYPE, MOBILE]],\n      [\n        /\\b(v(100md|700na|7011|917g).*\\b) b/i // Envizen Tablets\n      ],\n      [MODEL, [VENDOR, \"Envizen\"], [TYPE, TABLET]],\n      [\n        /\\b(trio[-\\w\\. ]+) b/i // MachSpeed Tablets\n      ],\n      [MODEL, [VENDOR, \"MachSpeed\"], [TYPE, TABLET]],\n      [\n        /\\btu_(1491) b/i // Rotor Tablets\n      ],\n      [MODEL, [VENDOR, \"Rotor\"], [TYPE, TABLET]],\n      [\n        /(shield[\\w ]+) b/i // Nvidia Shield Tablets\n      ],\n      [MODEL, [VENDOR, \"Nvidia\"], [TYPE, TABLET]],\n      [\n        /(sprint) (\\w+)/i // Sprint Phones\n      ],\n      [VENDOR, MODEL, [TYPE, MOBILE]],\n      [\n        /(kin\\.[onetw]{3})/i // Microsoft Kin\n      ],\n      [\n        [MODEL, /\\./g, \" \"],\n        [VENDOR, MICROSOFT],\n        [TYPE, MOBILE]\n      ],\n      [\n        /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\\)/i // Zebra\n      ],\n      [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]],\n      [/droid.+; (ec30|ps20|tc[2-8]\\d[kx])\\)/i],\n      [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]],\n      [\n        ///////////////////\n        // CONSOLES\n        ///////////////////\n\n        /(ouya)/i, // Ouya\n        /(nintendo) ([wids3utch]+)/i // Nintendo\n      ],\n      [VENDOR, MODEL, [TYPE, CONSOLE]],\n      [\n        /droid.+; (shield) bui/i // Nvidia\n      ],\n      [MODEL, [VENDOR, \"Nvidia\"], [TYPE, CONSOLE]],\n      [\n        /(playstation [345portablevi]+)/i // Playstation\n      ],\n      [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]],\n      [\n        /\\b(xbox(?: one)?(?!; xbox))[\\); ]/i // Microsoft Xbox\n      ],\n      [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]],\n      [\n        ///////////////////\n        // SMARTTVS\n        ///////////////////\n\n        /smart-tv.+(samsung)/i // Samsung\n      ],\n      [VENDOR, [TYPE, SMARTTV]],\n      [/hbbtv.+maple;(\\d+)/i],\n      [\n        [MODEL, /^/, \"SmartTV\"],\n        [VENDOR, SAMSUNG],\n        [TYPE, SMARTTV]\n      ],\n      [\n        /(nux; netcast.+smarttv|lg (netcast\\.tv-201\\d|android tv))/i // LG SmartTV\n      ],\n      [\n        [VENDOR, LG],\n        [TYPE, SMARTTV]\n      ],\n      [\n        /(apple) ?tv/i // Apple TV\n      ],\n      [VENDOR, [MODEL, APPLE + \" TV\"], [TYPE, SMARTTV]],\n      [\n        /crkey/i // Google Chromecast\n      ],\n      [\n        [MODEL, CHROME + \"cast\"],\n        [VENDOR, GOOGLE],\n        [TYPE, SMARTTV]\n      ],\n      [\n        /droid.+aft(\\w)( bui|\\))/i // Fire TV\n      ],\n      [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]],\n      [\n        /\\(dtv[\\);].+(aquos)/i,\n        /(aquos-tv[\\w ]+)\\)/i // Sharp\n      ],\n      [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],\n      [\n        /(bravia[\\w ]+)( bui|\\))/i // Sony\n      ],\n      [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]],\n      [\n        /(mitv-\\w{5}) bui/i // Xiaomi\n      ],\n      [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]],\n      [\n        /\\b(roku)[\\dx]*[\\)\\/]((?:dvp-)?[\\d\\.]*)/i, // Roku\n        /hbbtv\\/\\d+\\.\\d+\\.\\d+ +\\([\\w ]*; *(\\w[^;]*);([^;]*)/i // HbbTV devices\n      ],\n      [\n        [VENDOR, trim],\n        [MODEL, trim],\n        [TYPE, SMARTTV]\n      ],\n      [\n        /\\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\\b/i // SmartTV from Unidentified Vendors\n      ],\n      [[TYPE, SMARTTV]],\n      [\n        ///////////////////\n        // WEARABLES\n        ///////////////////\n\n        /((pebble))app/i // Pebble\n      ],\n      [VENDOR, MODEL, [TYPE, WEARABLE]],\n      [\n        /droid.+; (glass) \\d/i // Google Glass\n      ],\n      [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]],\n      [/droid.+; (wt63?0{2,3})\\)/i],\n      [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]],\n      [\n        /(quest( 2)?)/i // Oculus Quest\n      ],\n      [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]],\n      [\n        ///////////////////\n        // EMBEDDED\n        ///////////////////\n\n        /(tesla)(?: qtcarbrowser|\\/[-\\w\\.]+)/i // Tesla\n      ],\n      [VENDOR, [TYPE, EMBEDDED]],\n      [\n        ////////////////////\n        // MIXED (GENERIC)\n        ///////////////////\n\n        /droid .+?; ([^;]+?)(?: bui|\\) applew).+? mobile safari/i // Android Phones from Unidentified Vendors\n      ],\n      [MODEL, [TYPE, MOBILE]],\n      [\n        /droid .+?; ([^;]+?)(?: bui|\\) applew).+?(?! mobile) safari/i // Android Tablets from Unidentified Vendors\n      ],\n      [MODEL, [TYPE, TABLET]],\n      [\n        /\\b((tablet|tab)[;\\/]|focus\\/\\d(?!.+mobile))/i // Unidentifiable Tablet\n      ],\n      [[TYPE, TABLET]],\n      [\n        /(phone|mobile(?:[;\\/]| [ \\w\\/\\.]*safari)|pda(?=.+windows ce))/i // Unidentifiable Mobile\n      ],\n      [[TYPE, MOBILE]],\n      [\n        /(android[-\\w\\. ]{0,9});.+buil/i // Generic Android Device\n      ],\n      [MODEL, [VENDOR, \"Generic\"]]\n    ],\n\n    engine: [\n      [\n        /windows.+ edge\\/([\\w\\.]+)/i // EdgeHTML\n      ],\n      [VERSION, [NAME, EDGE + \"HTML\"]],\n      [\n        /webkit\\/537\\.36.+chrome\\/(?!27)([\\w\\.]+)/i // Blink\n      ],\n      [VERSION, [NAME, \"Blink\"]],\n      [\n        /(presto)\\/([\\w\\.]+)/i, // Presto\n        /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\\/([\\w\\.]+)/i, // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna\n        /ekioh(flow)\\/([\\w\\.]+)/i, // Flow\n        /(khtml|tasman|links)[\\/ ]\\(?([\\w\\.]+)/i, // KHTML/Tasman/Links\n        /(icab)[\\/ ]([23]\\.[\\d\\.]+)/i // iCab\n      ],\n      [NAME, VERSION],\n      [\n        /rv\\:([\\w\\.]{1,9})\\b.+(gecko)/i // Gecko\n      ],\n      [VERSION, NAME]\n    ],\n\n    os: [\n      [\n        // Windows\n        /microsoft (windows) (vista|xp)/i // Windows (iTunes)\n      ],\n      [NAME, VERSION],\n      [\n        /(windows) nt 6\\.2; (arm)/i, // Windows RT\n        /(windows (?:phone(?: os)?|mobile))[\\/ ]?([\\d\\.\\w ]*)/i, // Windows Phone\n        /(windows)[\\/ ]?([ntce\\d\\. ]+\\w)(?!.+xbox)/i\n      ],\n      [NAME, [VERSION, strMapper, windowsVersionMap]],\n      [/(win(?=3|9|n)|win 9x )([nt\\d\\.]+)/i],\n      [\n        [NAME, \"Windows\"],\n        [VERSION, strMapper, windowsVersionMap]\n      ],\n      [\n        // iOS/macOS\n        /ip[honead]{2,4}\\b(?:.*os ([\\w]+) like mac|; opera)/i, // iOS\n        /cfnetwork\\/.+darwin/i\n      ],\n      [\n        [VERSION, /_/g, \".\"],\n        [NAME, \"iOS\"]\n      ],\n      [\n        /(mac os x) ?([\\w\\. ]*)/i,\n        /(macintosh|mac_powerpc\\b)(?!.+haiku)/i // Mac OS\n      ],\n      [\n        [NAME, \"Mac OS\"],\n        [VERSION, /_/g, \".\"]\n      ],\n      [\n        // Mobile OSes\n        /droid ([\\w\\.]+)\\b.+(android[- ]x86|harmonyos)/i // Android-x86/HarmonyOS\n      ],\n      [VERSION, NAME],\n      [\n        // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS\n        /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\\/ ]?([\\w\\.]*)/i,\n        /(blackberry)\\w*\\/([\\w\\.]*)/i, // Blackberry\n        /(tizen|kaios)[\\/ ]([\\w\\.]+)/i, // Tizen/KaiOS\n        /\\((series40);/i // Series 40\n      ],\n      [NAME, VERSION],\n      [\n        /\\(bb(10);/i // BlackBerry 10\n      ],\n      [VERSION, [NAME, BLACKBERRY]],\n      [\n        /(?:symbian ?os|symbos|s60(?=;)|series60)[-\\/ ]?([\\w\\.]*)/i // Symbian\n      ],\n      [VERSION, [NAME, \"Symbian\"]],\n      [\n        /mozilla\\/[\\d\\.]+ \\((?:mobile|tablet|tv|mobile; [\\w ]+); rv:.+ gecko\\/([\\w\\.]+)/i // Firefox OS\n      ],\n      [VERSION, [NAME, FIREFOX + \" OS\"]],\n      [\n        /web0s;.+rt(tv)/i,\n        /\\b(?:hp)?wos(?:browser)?\\/([\\w\\.]+)/i // WebOS\n      ],\n      [VERSION, [NAME, \"webOS\"]],\n      [\n        // Google Chromecast\n        /crkey\\/([\\d\\.]+)/i // Google Chromecast\n      ],\n      [VERSION, [NAME, CHROME + \"cast\"]],\n      [\n        /(cros) [\\w]+ ([\\w\\.]+\\w)/i // Chromium OS\n      ],\n      [[NAME, \"Chromium OS\"], VERSION],\n      [\n        // Console\n        /(nintendo|playstation) ([wids345portablevuch]+)/i, // Nintendo/Playstation\n        /(xbox); +xbox ([^\\);]+)/i, // Microsoft Xbox (360, One, X, S, Series X, Series S)\n\n        // Other\n        /\\b(joli|palm)\\b ?(?:os)?\\/?([\\w\\.]*)/i, // Joli/Palm\n        /(mint)[\\/\\(\\) ]?(\\w*)/i, // Mint\n        /(mageia|vectorlinux)[; ]/i, // Mageia/VectorLinux\n        /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\\/ ]?(?!chrom|package)([-\\w\\.]*)/i,\n        // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire\n        /(hurd|linux) ?([\\w\\.]*)/i, // Hurd/Linux\n        /(gnu) ?([\\w\\.]*)/i, // GNU\n        /\\b([-frentopcghs]{0,5}bsd|dragonfly)[\\/ ]?(?!amd|[ix346]{1,2}86)([\\w\\.]*)/i, // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly\n        /(haiku) (\\w+)/i // Haiku\n      ],\n      [NAME, VERSION],\n      [\n        /(sunos) ?([\\w\\.\\d]*)/i // Solaris\n      ],\n      [[NAME, \"Solaris\"], VERSION],\n      [\n        /((?:open)?solaris)[-\\/ ]?([\\w\\.]*)/i, // Solaris\n        /(aix) ((\\d)(?=\\.|\\)| )[\\w\\.])*/i, // AIX\n        /\\b(beos|os\\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i, // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX\n        /(unix) ?([\\w\\.]*)/i // UNIX\n      ],\n      [NAME, VERSION]\n    ]\n  };\n\n  /////////////////\n  // Constructor\n  ////////////////\n\n  var UAParser = function (ua, extensions) {\n    if (typeof ua === OBJ_TYPE) {\n      extensions = ua;\n      ua = undefined;\n    }\n\n    if (!(this instanceof UAParser)) {\n      return new UAParser(ua, extensions).getResult();\n    }\n\n    var _ua =\n      ua ||\n      (typeof window !== UNDEF_TYPE &&\n      window.navigator &&\n      window.navigator.userAgent ? window.navigator.userAgent : EMPTY);\n    var _rgxmap = extensions ? extend(regexes, extensions) : regexes;\n\n    this.getBrowser = function () {\n      var _browser = {};\n      _browser[NAME] = undefined;\n      _browser[VERSION] = undefined;\n      rgxMapper.call(_browser, _ua, _rgxmap.browser);\n      _browser.major = majorize(_browser.version);\n      return _browser;\n    };\n    this.getCPU = function () {\n      var _cpu = {};\n      _cpu[ARCHITECTURE] = undefined;\n      rgxMapper.call(_cpu, _ua, _rgxmap.cpu);\n      return _cpu;\n    };\n    this.getDevice = function () {\n      var _device = {};\n      _device[VENDOR] = undefined;\n      _device[MODEL] = undefined;\n      _device[TYPE] = undefined;\n      rgxMapper.call(_device, _ua, _rgxmap.device);\n      return _device;\n    };\n    this.getEngine = function () {\n      var _engine = {};\n      _engine[NAME] = undefined;\n      _engine[VERSION] = undefined;\n      rgxMapper.call(_engine, _ua, _rgxmap.engine);\n      return _engine;\n    };\n    this.getOS = function () {\n      var _os = {};\n      _os[NAME] = undefined;\n      _os[VERSION] = undefined;\n      rgxMapper.call(_os, _ua, _rgxmap.os);\n      return _os;\n    };\n    this.getResult = function () {\n      return {\n        ua: this.getUA(),\n        browser: this.getBrowser(),\n        engine: this.getEngine(),\n        os: this.getOS(),\n        device: this.getDevice(),\n        cpu: this.getCPU()\n      };\n    };\n    this.getUA = function () {\n      return _ua;\n    };\n    this.setUA = function (ua) {\n      _ua =\n        typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH ? trim(ua, UA_MAX_LENGTH) : ua;\n      return this;\n    };\n    this.setUA(_ua);\n    return this;\n  };\n\n  UAParser.VERSION = LIBVERSION;\n  UAParser.BROWSER = enumerize([NAME, VERSION, MAJOR]);\n  UAParser.CPU = enumerize([ARCHITECTURE]);\n  UAParser.DEVICE = enumerize([\n    MODEL,\n    VENDOR,\n    TYPE,\n    CONSOLE,\n    MOBILE,\n    SMARTTV,\n    TABLET,\n    WEARABLE,\n    EMBEDDED\n  ]);\n  UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);\n\n  ///////////\n  // Export\n  //////////\n\n  // check js environment\n  if (typeof exports !== UNDEF_TYPE) {\n    // nodejs env\n    if (\"object\" !== UNDEF_TYPE && module.exports) {\n      exports = module.exports = UAParser;\n    }\n    exports.UAParser = UAParser;\n  } else {\n    // requirejs env (optional)\n    if (\"function\" === FUNC_TYPE && __webpack_require__.amdO) {\n      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n        return UAParser;\n      }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof window !== UNDEF_TYPE) {\n      // browser env\n      window.UAParser = UAParser;\n    }\n  }\n\n  // jQuery/Zepto specific (optional)\n  // Note:\n  //   In AMD env the global scope should be kept clean, but jQuery is an exception.\n  //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,\n  //   and we should catch that.\n  var $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);\n  if ($ && !$.ua) {\n    var parser = new UAParser();\n    $.ua = parser.getResult();\n    $.ua.get = function () {\n      return parser.getUA();\n    };\n    $.ua.set = function (ua) {\n      parser.setUA(ua);\n      var result = parser.getResult();\n      for (var prop in result) {\n        $.ua[prop] = result[prop];\n      }\n    };\n  }\n})(typeof window === \"object\" ? window : this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdWEtcGFyc2VyLWpzQDAuNy4zMy9ub2RlX21vZHVsZXMvQGFtcGxpdHVkZS91YS1wYXJzZXItanMvc3JjL3VhLXBhcnNlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHNCQUFzQixnQkFBZ0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixtQkFBbUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLElBQUk7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLElBQUk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGdCQUFnQjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxHQUFHO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLElBQUk7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsMENBQTBDO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhDQUE4QyxJQUFJLFdBQVcsSUFBSTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFNBQVM7QUFDM0I7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsRUFBRTtBQUN0RDtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEMsd0JBQXdCLElBQUk7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxzQkFBc0IsRUFBRTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLEVBQUUsaUJBQWlCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLEVBQUUsVUFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsSUFBSTtBQUNyQztBQUNBO0FBQ0EsMkJBQTJCLElBQUk7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxhQUFhLElBQUk7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELEVBQUUsV0FBVyxFQUFFO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixlQUFlLElBQUk7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsRUFBRSxXQUFXLEVBQUUseURBQXlELElBQUk7QUFDeEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixFQUFFO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsTUFBTTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixJQUFJLElBQUk7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLHFCQUFxQixHQUFHO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsSUFBSTtBQUNsQyw0QkFBNEIsRUFBRTtBQUM5Qiw0QkFBNEIsSUFBSTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixJQUFJO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLEVBQUU7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLEVBQUU7QUFDbkI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLEVBQUU7QUFDcEI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLEVBQUU7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsRUFBRTtBQUNyQixxQ0FBcUMsRUFBRTtBQUN2QztBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsSUFBSTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsSUFBSTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLEVBQUU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsV0FBVztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLEVBQUU7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsT0FBTyxJQUFJLElBQUk7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUSxJQUFJO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsSUFBSTtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsSUFBSTtBQUN4QjtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixJQUFJLEVBQUU7QUFDaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixJQUFJO0FBQ3pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLElBQUksNkJBQTZCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxTQUFTO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTs7QUFFN0I7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLElBQUksbUNBQW1DLElBQUk7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFFBQWE7QUFDckI7QUFDQTtBQUNBLElBQUksZ0JBQWdCO0FBQ3BCLElBQUk7QUFDSjtBQUNBLFFBQVEsVUFBYSxrQkFBa0Isd0JBQVU7QUFDakQsTUFBTSxtQ0FBTztBQUNiO0FBQ0EsT0FBTztBQUFBLGtHQUFDO0FBQ1IsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFtcGxpdHVkZSt1YS1wYXJzZXItanNAMC43LjMzL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3VhLXBhcnNlci1qcy9zcmMvdWEtcGFyc2VyLmpzP2IzZWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKiBVQVBhcnNlci5qcyB2MC43LjMzXG4gICBDb3B5cmlnaHQgwqkgMjAxMi0yMDIxIEZhaXNhbCBTYWxtYW4gPGZAZmFpc2FsbWFuLmNvbT5cbiAgIE1JVCBMaWNlbnNlICovIC8qXG4gICBEZXRlY3QgQnJvd3NlciwgRW5naW5lLCBPUywgQ1BVLCBhbmQgRGV2aWNlIHR5cGUvbW9kZWwgZnJvbSBVc2VyLUFnZW50IGRhdGEuXG4gICBTdXBwb3J0cyBicm93c2VyICYgbm9kZS5qcyBlbnZpcm9ubWVudC5cbiAgIERlbW8gICA6IGh0dHBzOi8vZmFpc2FsbWFuLmdpdGh1Yi5pby91YS1wYXJzZXItanNcbiAgIFNvdXJjZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWlzYWxtYW4vdWEtcGFyc2VyLWpzICovXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuKGZ1bmN0aW9uICh3aW5kb3csIHVuZGVmaW5lZCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICAvLy8vLy8vLy8vLy8vL1xuICAvLyBDb25zdGFudHNcbiAgLy8vLy8vLy8vLy8vL1xuXG4gIHZhciBMSUJWRVJTSU9OID0gXCIwLjcuMzNcIixcbiAgICBFTVBUWSA9IFwiXCIsXG4gICAgVU5LTk9XTiA9IFwiP1wiLFxuICAgIEZVTkNfVFlQRSA9IFwiZnVuY3Rpb25cIixcbiAgICBVTkRFRl9UWVBFID0gXCJ1bmRlZmluZWRcIixcbiAgICBPQkpfVFlQRSA9IFwib2JqZWN0XCIsXG4gICAgU1RSX1RZUEUgPSBcInN0cmluZ1wiLFxuICAgIE1BSk9SID0gXCJtYWpvclwiLFxuICAgIE1PREVMID0gXCJtb2RlbFwiLFxuICAgIE5BTUUgPSBcIm5hbWVcIixcbiAgICBUWVBFID0gXCJ0eXBlXCIsXG4gICAgVkVORE9SID0gXCJ2ZW5kb3JcIixcbiAgICBWRVJTSU9OID0gXCJ2ZXJzaW9uXCIsXG4gICAgQVJDSElURUNUVVJFID0gXCJhcmNoaXRlY3R1cmVcIixcbiAgICBDT05TT0xFID0gXCJjb25zb2xlXCIsXG4gICAgTU9CSUxFID0gXCJtb2JpbGVcIixcbiAgICBUQUJMRVQgPSBcInRhYmxldFwiLFxuICAgIFNNQVJUVFYgPSBcInNtYXJ0dHZcIixcbiAgICBXRUFSQUJMRSA9IFwid2VhcmFibGVcIixcbiAgICBFTUJFRERFRCA9IFwiZW1iZWRkZWRcIixcbiAgICBVQV9NQVhfTEVOR1RIID0gMzUwO1xuXG4gIHZhciBBTUFaT04gPSBcIkFtYXpvblwiLFxuICAgIEFQUExFID0gXCJBcHBsZVwiLFxuICAgIEFTVVMgPSBcIkFTVVNcIixcbiAgICBCTEFDS0JFUlJZID0gXCJCbGFja0JlcnJ5XCIsXG4gICAgQlJPV1NFUiA9IFwiQnJvd3NlclwiLFxuICAgIENIUk9NRSA9IFwiQ2hyb21lXCIsXG4gICAgRURHRSA9IFwiRWRnZVwiLFxuICAgIEZJUkVGT1ggPSBcIkZpcmVmb3hcIixcbiAgICBHT09HTEUgPSBcIkdvb2dsZVwiLFxuICAgIEhVQVdFSSA9IFwiSHVhd2VpXCIsXG4gICAgTEcgPSBcIkxHXCIsXG4gICAgTUlDUk9TT0ZUID0gXCJNaWNyb3NvZnRcIixcbiAgICBNT1RPUk9MQSA9IFwiTW90b3JvbGFcIixcbiAgICBPUEVSQSA9IFwiT3BlcmFcIixcbiAgICBTQU1TVU5HID0gXCJTYW1zdW5nXCIsXG4gICAgU0hBUlAgPSBcIlNoYXJwXCIsXG4gICAgU09OWSA9IFwiU29ueVwiLFxuICAgIFhJQU9NSSA9IFwiWGlhb21pXCIsXG4gICAgWkVCUkEgPSBcIlplYnJhXCIsXG4gICAgRkFDRUJPT0sgPSBcIkZhY2Vib29rXCI7XG5cbiAgLy8vLy8vLy8vLy9cbiAgLy8gSGVscGVyXG4gIC8vLy8vLy8vLy9cblxuICB2YXIgZXh0ZW5kID0gZnVuY3Rpb24gKHJlZ2V4ZXMsIGV4dGVuc2lvbnMpIHtcbiAgICAgIHZhciBtZXJnZWRSZWdleGVzID0ge307XG4gICAgICBmb3IgKHZhciBpIGluIHJlZ2V4ZXMpIHtcbiAgICAgICAgaWYgKGV4dGVuc2lvbnNbaV0gJiYgZXh0ZW5zaW9uc1tpXS5sZW5ndGggJSAyID09PSAwKSB7XG4gICAgICAgICAgbWVyZ2VkUmVnZXhlc1tpXSA9IGV4dGVuc2lvbnNbaV0uY29uY2F0KHJlZ2V4ZXNbaV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1lcmdlZFJlZ2V4ZXNbaV0gPSByZWdleGVzW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVyZ2VkUmVnZXhlcztcbiAgICB9LFxuICAgIGVudW1lcml6ZSA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgIHZhciBlbnVtcyA9IHt9O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZW51bXNbYXJyW2ldLnRvVXBwZXJDYXNlKCldID0gYXJyW2ldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVudW1zO1xuICAgIH0sXG4gICAgaGFzID0gZnVuY3Rpb24gKHN0cjEsIHN0cjIpIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygc3RyMSA9PT0gU1RSX1RZUEUgPyBsb3dlcml6ZShzdHIyKS5pbmRleE9mKGxvd2VyaXplKHN0cjEpKSAhPT0gLTEgOiBmYWxzZTtcbiAgICB9LFxuICAgIGxvd2VyaXplID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG4gICAgbWFqb3JpemUgPSBmdW5jdGlvbiAodmVyc2lvbikge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2ZXJzaW9uID09PSBTVFJfVFlQRSA/IHZlcnNpb24ucmVwbGFjZSgvW15cXGRcXC5dL2csIEVNUFRZKS5zcGxpdChcIi5cIilbMF0gOiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgICB0cmltID0gZnVuY3Rpb24gKHN0ciwgbGVuKSB7XG4gICAgICBpZiAodHlwZW9mIHN0ciA9PT0gU1RSX1RZUEUpIHtcbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL15cXHNcXHMqLywgRU1QVFkpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIGxlbiA9PT0gVU5ERUZfVFlQRSA/IHN0ciA6IHN0ci5zdWJzdHJpbmcoMCwgVUFfTUFYX0xFTkdUSCk7XG4gICAgICB9XG4gICAgfTtcblxuICAvLy8vLy8vLy8vLy8vLy9cbiAgLy8gTWFwIGhlbHBlclxuICAvLy8vLy8vLy8vLy8vL1xuXG4gIHZhciByZ3hNYXBwZXIgPSBmdW5jdGlvbiAodWEsIGFycmF5cykge1xuICAgICAgdmFyIGkgPSAwLFxuICAgICAgICBqLFxuICAgICAgICBrLFxuICAgICAgICBwLFxuICAgICAgICBxLFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBtYXRjaDtcblxuICAgICAgLy8gbG9vcCB0aHJvdWdoIGFsbCByZWdleGVzIG1hcHNcbiAgICAgIHdoaWxlIChpIDwgYXJyYXlzLmxlbmd0aCAmJiAhbWF0Y2hlcykge1xuICAgICAgICB2YXIgcmVnZXggPSBhcnJheXNbaV0sIC8vIGV2ZW4gc2VxdWVuY2UgKDAsMiw0LC4uKVxuICAgICAgICAgIHByb3BzID0gYXJyYXlzW2kgKyAxXTsgLy8gb2RkIHNlcXVlbmNlICgxLDMsNSwuLilcbiAgICAgICAgaiA9IGsgPSAwO1xuXG4gICAgICAgIC8vIHRyeSBtYXRjaGluZyB1YXN0cmluZyB3aXRoIHJlZ2V4ZXNcbiAgICAgICAgd2hpbGUgKGogPCByZWdleC5sZW5ndGggJiYgIW1hdGNoZXMpIHtcbiAgICAgICAgICBtYXRjaGVzID0gcmVnZXhbaisrXS5leGVjKHVhKTtcblxuICAgICAgICAgIGlmICghIW1hdGNoZXMpIHtcbiAgICAgICAgICAgIGZvciAocCA9IDA7IHAgPCBwcm9wcy5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgICBtYXRjaCA9IG1hdGNoZXNbKytrXTtcbiAgICAgICAgICAgICAgcSA9IHByb3BzW3BdO1xuICAgICAgICAgICAgICAvLyBjaGVjayBpZiBnaXZlbiBwcm9wZXJ0eSBpcyBhY3R1YWxseSBhcnJheVxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHEgPT09IE9CSl9UWVBFICYmIHEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGlmIChxLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBxWzFdID09IEZVTkNfVFlQRSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBhc3NpZ24gbW9kaWZpZWQgbWF0Y2hcbiAgICAgICAgICAgICAgICAgICAgdGhpc1txWzBdXSA9IHFbMV0uY2FsbCh0aGlzLCBtYXRjaCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBhc3NpZ24gZ2l2ZW4gdmFsdWUsIGlnbm9yZSByZWdleCBtYXRjaFxuICAgICAgICAgICAgICAgICAgICB0aGlzW3FbMF1dID0gcVsxXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHEubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAvLyBjaGVjayB3aGV0aGVyIGZ1bmN0aW9uIG9yIHJlZ2V4XG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHFbMV0gPT09IEZVTkNfVFlQRSAmJiAhKHFbMV0uZXhlYyAmJiBxWzFdLnRlc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgZnVuY3Rpb24gKHVzdWFsbHkgc3RyaW5nIG1hcHBlcilcbiAgICAgICAgICAgICAgICAgICAgdGhpc1txWzBdXSA9IG1hdGNoID8gcVsxXS5jYWxsKHRoaXMsIG1hdGNoLCBxWzJdKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNhbml0aXplIG1hdGNoIHVzaW5nIGdpdmVuIHJlZ2V4XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbcVswXV0gPSBtYXRjaCA/IG1hdGNoLnJlcGxhY2UocVsxXSwgcVsyXSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChxLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgdGhpc1txWzBdXSA9IG1hdGNoID8gcVszXS5jYWxsKHRoaXMsIG1hdGNoLnJlcGxhY2UocVsxXSwgcVsyXSkpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzW3FdID0gbWF0Y2ggPyBtYXRjaCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpICs9IDI7XG4gICAgICB9XG4gICAgfSxcbiAgICBzdHJNYXBwZXIgPSBmdW5jdGlvbiAoc3RyLCBtYXApIHtcbiAgICAgIGZvciAodmFyIGkgaW4gbWFwKSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIGN1cnJlbnQgdmFsdWUgaXMgYXJyYXlcbiAgICAgICAgaWYgKHR5cGVvZiBtYXBbaV0gPT09IE9CSl9UWVBFICYmIG1hcFtpXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtYXBbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChoYXMobWFwW2ldW2pdLCBzdHIpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBpID09PSBVTktOT1dOID8gdW5kZWZpbmVkIDogaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaGFzKG1hcFtpXSwgc3RyKSkge1xuICAgICAgICAgIHJldHVybiBpID09PSBVTktOT1dOID8gdW5kZWZpbmVkIDogaTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9O1xuXG4gIC8vLy8vLy8vLy8vLy8vL1xuICAvLyBTdHJpbmcgbWFwXG4gIC8vLy8vLy8vLy8vLy8vXG5cbiAgLy8gU2FmYXJpIDwgMy4wXG4gIHZhciBvbGRTYWZhcmlNYXAgPSB7XG4gICAgICBcIjEuMFwiOiBcIi84XCIsXG4gICAgICAxLjI6IFwiLzFcIixcbiAgICAgIDEuMzogXCIvM1wiLFxuICAgICAgXCIyLjBcIjogXCIvNDEyXCIsXG4gICAgICBcIjIuMC4yXCI6IFwiLzQxNlwiLFxuICAgICAgXCIyLjAuM1wiOiBcIi80MTdcIixcbiAgICAgIFwiMi4wLjRcIjogXCIvNDE5XCIsXG4gICAgICBcIj9cIjogXCIvXCJcbiAgICB9LFxuICAgIHdpbmRvd3NWZXJzaW9uTWFwID0ge1xuICAgICAgTUU6IFwiNC45MFwiLFxuICAgICAgXCJOVCAzLjExXCI6IFwiTlQzLjUxXCIsXG4gICAgICBcIk5UIDQuMFwiOiBcIk5UNC4wXCIsXG4gICAgICAyMDAwOiBcIk5UIDUuMFwiLFxuICAgICAgWFA6IFtcIk5UIDUuMVwiLCBcIk5UIDUuMlwiXSxcbiAgICAgIFZpc3RhOiBcIk5UIDYuMFwiLFxuICAgICAgNzogXCJOVCA2LjFcIixcbiAgICAgIDg6IFwiTlQgNi4yXCIsXG4gICAgICA4LjE6IFwiTlQgNi4zXCIsXG4gICAgICAxMDogW1wiTlQgNi40XCIsIFwiTlQgMTAuMFwiXSxcbiAgICAgIFJUOiBcIkFSTVwiXG4gICAgfTtcblxuICAvLy8vLy8vLy8vLy8vL1xuICAvLyBSZWdleCBtYXBcbiAgLy8vLy8vLy8vLy8vL1xuXG4gIHZhciByZWdleGVzID0ge1xuICAgIGJyb3dzZXI6IFtcbiAgICAgIFtcbiAgICAgICAgL1xcYig/OmNybW98Y3Jpb3MpXFwvKFtcXHdcXC5dKykvaSAvLyBDaHJvbWUgZm9yIEFuZHJvaWQvaU9TXG4gICAgICBdLFxuICAgICAgW1ZFUlNJT04sIFtOQU1FLCBcIkNocm9tZVwiXV0sXG4gICAgICBbXG4gICAgICAgIC9lZGcoPzplfGlvc3xhKT9cXC8oW1xcd1xcLl0rKS9pIC8vIE1pY3Jvc29mdCBFZGdlXG4gICAgICBdLFxuICAgICAgW1ZFUlNJT04sIFtOQU1FLCBcIkVkZ2VcIl1dLFxuICAgICAgW1xuICAgICAgICAvLyBQcmVzdG8gYmFzZWRcbiAgICAgICAgLyhvcGVyYSBtaW5pKVxcLyhbLVxcd1xcLl0rKS9pLCAvLyBPcGVyYSBNaW5pXG4gICAgICAgIC8ob3BlcmEgW21vYmlsZXRhYl17Myw2fSlcXGIuK3ZlcnNpb25cXC8oWy1cXHdcXC5dKykvaSwgLy8gT3BlcmEgTW9iaS9UYWJsZXRcbiAgICAgICAgLyhvcGVyYSkoPzouK3ZlcnNpb25cXC98W1xcLyBdKykoW1xcd1xcLl0rKS9pIC8vIE9wZXJhXG4gICAgICBdLFxuICAgICAgW05BTUUsIFZFUlNJT05dLFxuICAgICAgW1xuICAgICAgICAvb3Bpb3NbXFwvIF0rKFtcXHdcXC5dKykvaSAvLyBPcGVyYSBtaW5pIG9uIGlwaG9uZSA+PSA4LjBcbiAgICAgIF0sXG4gICAgICBbVkVSU0lPTiwgW05BTUUsIE9QRVJBICsgXCIgTWluaVwiXV0sXG4gICAgICBbXG4gICAgICAgIC9cXGJvcHJcXC8oW1xcd1xcLl0rKS9pIC8vIE9wZXJhIFdlYmtpdFxuICAgICAgXSxcbiAgICAgIFtWRVJTSU9OLCBbTkFNRSwgT1BFUkFdXSxcbiAgICAgIFtcbiAgICAgICAgLy8gTWl4ZWRcbiAgICAgICAgLyhraW5kbGUpXFwvKFtcXHdcXC5dKykvaSwgLy8gS2luZGxlXG4gICAgICAgIC8obHVuYXNjYXBlfG1heHRob258bmV0ZnJvbnR8amFzbWluZXxibGF6ZXIpW1xcLyBdPyhbXFx3XFwuXSopL2ksIC8vIEx1bmFzY2FwZS9NYXh0aG9uL05ldGZyb250L0phc21pbmUvQmxhemVyXG4gICAgICAgIC8vIFRyaWRlbnQgYmFzZWRcbiAgICAgICAgLyhhdmFudCB8aWVtb2JpbGV8c2xpbSkoPzpicm93c2VyKT9bXFwvIF0/KFtcXHdcXC5dKikvaSwgLy8gQXZhbnQvSUVNb2JpbGUvU2xpbUJyb3dzZXJcbiAgICAgICAgLyhiYT9pZHVicm93c2VyKVtcXC8gXT8oW1xcd1xcLl0rKS9pLCAvLyBCYWlkdSBCcm93c2VyXG4gICAgICAgIC8oPzptc3xcXCgpKGllKSAoW1xcd1xcLl0rKS9pLCAvLyBJbnRlcm5ldCBFeHBsb3JlclxuXG4gICAgICAgIC8vIFdlYmtpdC9LSFRNTCBiYXNlZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmxvY2svUm9ja01lbHQvTWlkb3JpL0VwaXBoYW55L1NpbGsvU2t5ZmlyZS9Cb2x0L0lyb24vSXJpZGl1bS9QaGFudG9tSlMvQm93c2VyL1F1cFppbGxhL0ZhbGtvblxuICAgICAgICAvKGZsb2NrfHJvY2ttZWx0fG1pZG9yaXxlcGlwaGFueXxzaWxrfHNreWZpcmV8b3ZpYnJvd3Nlcnxib2x0fGlyb258dml2YWxkaXxpcmlkaXVtfHBoYW50b21qc3xib3dzZXJ8cXVhcmt8cXVwemlsbGF8ZmFsa29ufHJla29ucXxwdWZmaW58YnJhdmV8d2hhbGV8cXFicm93c2VybGl0ZXxxcXxkdWNrZHVja2dvKVxcLyhbLVxcd1xcLl0rKS9pLFxuICAgICAgICAvLyBSZWtvbnEvUHVmZmluL0JyYXZlL1doYWxlL1FRQnJvd3NlckxpdGUvUVEsIGFrYSBTaG91UVxuICAgICAgICAvKHdlaWJvKV9fKFtcXGRcXC5dKykvaSAvLyBXZWlib1xuICAgICAgXSxcbiAgICAgIFtOQU1FLCBWRVJTSU9OXSxcbiAgICAgIFtcbiAgICAgICAgLyg/OlxcYnVjPyA/YnJvd3NlcnwoPzpqdWMuKyl1Y3dlYilbXFwvIF0/KFtcXHdcXC5dKykvaSAvLyBVQ0Jyb3dzZXJcbiAgICAgIF0sXG4gICAgICBbVkVSU0lPTiwgW05BTUUsIFwiVUNcIiArIEJST1dTRVJdXSxcbiAgICAgIFtcbiAgICAgICAgL21pY3JvbS4rXFxicWJjb3JlXFwvKFtcXHdcXC5dKykvaSwgLy8gV2VDaGF0IERlc2t0b3AgZm9yIFdpbmRvd3MgQnVpbHQtaW4gQnJvd3NlclxuICAgICAgICAvXFxicWJjb3JlXFwvKFtcXHdcXC5dKykuK21pY3JvbS9pXG4gICAgICBdLFxuICAgICAgW1ZFUlNJT04sIFtOQU1FLCBcIldlQ2hhdChXaW4pIERlc2t0b3BcIl1dLFxuICAgICAgW1xuICAgICAgICAvbWljcm9tZXNzZW5nZXJcXC8oW1xcd1xcLl0rKS9pIC8vIFdlQ2hhdFxuICAgICAgXSxcbiAgICAgIFtWRVJTSU9OLCBbTkFNRSwgXCJXZUNoYXRcIl1dLFxuICAgICAgW1xuICAgICAgICAva29ucXVlcm9yXFwvKFtcXHdcXC5dKykvaSAvLyBLb25xdWVyb3JcbiAgICAgIF0sXG4gICAgICBbVkVSU0lPTiwgW05BTUUsIFwiS29ucXVlcm9yXCJdXSxcbiAgICAgIFtcbiAgICAgICAgL3RyaWRlbnQuK3J2WzogXShbXFx3XFwuXXsxLDl9KVxcYi4rbGlrZSBnZWNrby9pIC8vIElFMTFcbiAgICAgIF0sXG4gICAgICBbVkVSU0lPTiwgW05BTUUsIFwiSUVcIl1dLFxuICAgICAgW1xuICAgICAgICAveWFicm93c2VyXFwvKFtcXHdcXC5dKykvaSAvLyBZYW5kZXhcbiAgICAgIF0sXG4gICAgICBbVkVSU0lPTiwgW05BTUUsIFwiWWFuZGV4XCJdXSxcbiAgICAgIFtcbiAgICAgICAgLyhhdmFzdHxhdmcpXFwvKFtcXHdcXC5dKykvaSAvLyBBdmFzdC9BVkcgU2VjdXJlIEJyb3dzZXJcbiAgICAgIF0sXG4gICAgICBbW05BTUUsIC8oLispLywgXCIkMSBTZWN1cmUgXCIgKyBCUk9XU0VSXSwgVkVSU0lPTl0sXG4gICAgICBbXG4gICAgICAgIC9cXGJmb2N1c1xcLyhbXFx3XFwuXSspL2kgLy8gRmlyZWZveCBGb2N1c1xuICAgICAgXSxcbiAgICAgIFtWRVJTSU9OLCBbTkFNRSwgRklSRUZPWCArIFwiIEZvY3VzXCJdXSxcbiAgICAgIFtcbiAgICAgICAgL1xcYm9wdFxcLyhbXFx3XFwuXSspL2kgLy8gT3BlcmEgVG91Y2hcbiAgICAgIF0sXG4gICAgICBbVkVSU0lPTiwgW05BTUUsIE9QRVJBICsgXCIgVG91Y2hcIl1dLFxuICAgICAgW1xuICAgICAgICAvY29jX2NvY1xcdytcXC8oW1xcd1xcLl0rKS9pIC8vIENvYyBDb2MgQnJvd3NlclxuICAgICAgXSxcbiAgICAgIFtWRVJTSU9OLCBbTkFNRSwgXCJDb2MgQ29jXCJdXSxcbiAgICAgIFtcbiAgICAgICAgL2RvbGZpblxcLyhbXFx3XFwuXSspL2kgLy8gRG9scGhpblxuICAgICAgXSxcbiAgICAgIFtWRVJTSU9OLCBbTkFNRSwgXCJEb2xwaGluXCJdXSxcbiAgICAgIFtcbiAgICAgICAgL2NvYXN0XFwvKFtcXHdcXC5dKykvaSAvLyBPcGVyYSBDb2FzdFxuICAgICAgXSxcbiAgICAgIFtWRVJTSU9OLCBbTkFNRSwgT1BFUkEgKyBcIiBDb2FzdFwiXV0sXG4gICAgICBbXG4gICAgICAgIC9taXVpYnJvd3NlclxcLyhbXFx3XFwuXSspL2kgLy8gTUlVSSBCcm93c2VyXG4gICAgICBdLFxuICAgICAgW1ZFUlNJT04sIFtOQU1FLCBcIk1JVUkgXCIgKyBCUk9XU0VSXV0sXG4gICAgICBbXG4gICAgICAgIC9meGlvc1xcLyhbLVxcd1xcLl0rKS9pIC8vIEZpcmVmb3ggZm9yIGlPU1xuICAgICAgXSxcbiAgICAgIFtWRVJTSU9OLCBbTkFNRSwgRklSRUZPWF1dLFxuICAgICAgW1xuICAgICAgICAvXFxicWlodXwocWk/aG8/bz98MzYwKWJyb3dzZXIvaSAvLyAzNjBcbiAgICAgIF0sXG4gICAgICBbW05BTUUsIFwiMzYwIFwiICsgQlJPV1NFUl1dLFxuICAgICAgWy8ob2N1bHVzfHNhbXN1bmd8c2FpbGZpc2h8aHVhd2VpKWJyb3dzZXJcXC8oW1xcd1xcLl0rKS9pXSxcbiAgICAgIFtbTkFNRSwgLyguKykvLCBcIiQxIFwiICsgQlJPV1NFUl0sIFZFUlNJT05dLFxuICAgICAgW1xuICAgICAgICAvLyBPY3VsdXMvU2Ftc3VuZy9TYWlsZmlzaC9IdWF3ZWkgQnJvd3NlclxuICAgICAgICAvKGNvbW9kb19kcmFnb24pXFwvKFtcXHdcXC5dKykvaSAvLyBDb21vZG8gRHJhZ29uXG4gICAgICBdLFxuICAgICAgW1tOQU1FLCAvXy9nLCBcIiBcIl0sIFZFUlNJT05dLFxuICAgICAgW1xuICAgICAgICAvKGVsZWN0cm9uKVxcLyhbXFx3XFwuXSspIHNhZmFyaS9pLCAvLyBFbGVjdHJvbi1iYXNlZCBBcHBcbiAgICAgICAgLyh0ZXNsYSkoPzogcXRjYXJicm93c2VyfFxcLygyMFxcZFxcZFxcLlstXFx3XFwuXSspKS9pLCAvLyBUZXNsYVxuICAgICAgICAvbT8ocXFicm93c2VyfGJhaWR1Ym94YXBwfDIzNDVFeHBsb3JlcilbXFwvIF0/KFtcXHdcXC5dKykvaSAvLyBRUUJyb3dzZXIvQmFpZHUgQXBwLzIzNDUgQnJvd3NlclxuICAgICAgXSxcbiAgICAgIFtOQU1FLCBWRVJTSU9OXSxcbiAgICAgIFtcbiAgICAgICAgLyhtZXRhc3IpW1xcLyBdPyhbXFx3XFwuXSspL2ksIC8vIFNvdUdvdUJyb3dzZXJcbiAgICAgICAgLyhsYmJyb3dzZXIpL2ksIC8vIExpZUJhbyBCcm93c2VyXG4gICAgICAgIC9cXFsobGlua2VkaW4pYXBwXFxdL2kgLy8gTGlua2VkSW4gQXBwIGZvciBpT1MgJiBBbmRyb2lkXG4gICAgICBdLFxuICAgICAgW05BTUVdLFxuICAgICAgW1xuICAgICAgICAvLyBXZWJWaWV3XG4gICAgICAgIC8oKD86ZmJhblxcL2ZiaW9zfGZiX2lhYlxcL2ZiNGEpKD8hLitmYmF2KXw7ZmJhdlxcLyhbXFx3XFwuXSspOykvaSAvLyBGYWNlYm9vayBBcHAgZm9yIGlPUyAmIEFuZHJvaWRcbiAgICAgIF0sXG4gICAgICBbW05BTUUsIEZBQ0VCT09LXSwgVkVSU0lPTl0sXG4gICAgICBbXG4gICAgICAgIC9zYWZhcmkgKGxpbmUpXFwvKFtcXHdcXC5dKykvaSwgLy8gTGluZSBBcHAgZm9yIGlPU1xuICAgICAgICAvXFxiKGxpbmUpXFwvKFtcXHdcXC5dKylcXC9pYWIvaSwgLy8gTGluZSBBcHAgZm9yIEFuZHJvaWRcbiAgICAgICAgLyhjaHJvbWl1bXxpbnN0YWdyYW0pW1xcLyBdKFstXFx3XFwuXSspL2kgLy8gQ2hyb21pdW0vSW5zdGFncmFtXG4gICAgICBdLFxuICAgICAgW05BTUUsIFZFUlNJT05dLFxuICAgICAgW1xuICAgICAgICAvXFxiZ3NhXFwvKFtcXHdcXC5dKykgLipzYWZhcmlcXC8vaSAvLyBHb29nbGUgU2VhcmNoIEFwcGxpYW5jZSBvbiBpT1NcbiAgICAgIF0sXG4gICAgICBbVkVSU0lPTiwgW05BTUUsIFwiR1NBXCJdXSxcbiAgICAgIFtcbiAgICAgICAgL2hlYWRsZXNzY2hyb21lKD86XFwvKFtcXHdcXC5dKyl8ICkvaSAvLyBDaHJvbWUgSGVhZGxlc3NcbiAgICAgIF0sXG4gICAgICBbVkVSU0lPTiwgW05BTUUsIENIUk9NRSArIFwiIEhlYWRsZXNzXCJdXSxcbiAgICAgIFtcbiAgICAgICAgLyB3dlxcKS4rKGNocm9tZSlcXC8oW1xcd1xcLl0rKS9pIC8vIENocm9tZSBXZWJWaWV3XG4gICAgICBdLFxuICAgICAgW1tOQU1FLCBDSFJPTUUgKyBcIiBXZWJWaWV3XCJdLCBWRVJTSU9OXSxcbiAgICAgIFtcbiAgICAgICAgL2Ryb2lkLisgdmVyc2lvblxcLyhbXFx3XFwuXSspXFxiLisoPzptb2JpbGUgc2FmYXJpfHNhZmFyaSkvaSAvLyBBbmRyb2lkIEJyb3dzZXJcbiAgICAgIF0sXG4gICAgICBbVkVSU0lPTiwgW05BTUUsIFwiQW5kcm9pZCBcIiArIEJST1dTRVJdXSxcbiAgICAgIFtcbiAgICAgICAgLyhjaHJvbWV8b21uaXdlYnxhcm9yYXxbdGl6ZW5va2FdezV9ID9icm93c2VyKVxcL3Y/KFtcXHdcXC5dKykvaSAvLyBDaHJvbWUvT21uaVdlYi9Bcm9yYS9UaXplbi9Ob2tpYVxuICAgICAgXSxcbiAgICAgIFtOQU1FLCBWRVJTSU9OXSxcbiAgICAgIFtcbiAgICAgICAgL3ZlcnNpb25cXC8oW1xcd1xcLlxcLF0rKSAuKm1vYmlsZVxcL1xcdysgKHNhZmFyaSkvaSAvLyBNb2JpbGUgU2FmYXJpXG4gICAgICBdLFxuICAgICAgW1ZFUlNJT04sIFtOQU1FLCBcIk1vYmlsZSBTYWZhcmlcIl1dLFxuICAgICAgW1xuICAgICAgICAvdmVyc2lvblxcLyhbXFx3KFxcLnxcXCwpXSspIC4qKG1vYmlsZSA/c2FmYXJpfHNhZmFyaSkvaSAvLyBTYWZhcmkgJiBTYWZhcmkgTW9iaWxlXG4gICAgICBdLFxuICAgICAgW1ZFUlNJT04sIE5BTUVdLFxuICAgICAgW1xuICAgICAgICAvd2Via2l0Lis/KG1vYmlsZSA/c2FmYXJpfHNhZmFyaSkoXFwvW1xcd1xcLl0rKS9pIC8vIFNhZmFyaSA8IDMuMFxuICAgICAgXSxcbiAgICAgIFtOQU1FLCBbVkVSU0lPTiwgc3RyTWFwcGVyLCBvbGRTYWZhcmlNYXBdXSxcbiAgICAgIFsvKHdlYmtpdHxraHRtbClcXC8oW1xcd1xcLl0rKS9pXSxcbiAgICAgIFtOQU1FLCBWRVJTSU9OXSxcbiAgICAgIFtcbiAgICAgICAgLy8gR2Vja28gYmFzZWRcbiAgICAgICAgLyhuYXZpZ2F0b3J8bmV0c2NhcGVcXGQ/KVxcLyhbLVxcd1xcLl0rKS9pIC8vIE5ldHNjYXBlXG4gICAgICBdLFxuICAgICAgW1tOQU1FLCBcIk5ldHNjYXBlXCJdLCBWRVJTSU9OXSxcbiAgICAgIFtcbiAgICAgICAgL21vYmlsZSB2cjsgcnY6KFtcXHdcXC5dKylcXCkuK2ZpcmVmb3gvaSAvLyBGaXJlZm94IFJlYWxpdHlcbiAgICAgIF0sXG4gICAgICBbVkVSU0lPTiwgW05BTUUsIEZJUkVGT1ggKyBcIiBSZWFsaXR5XCJdXSxcbiAgICAgIFtcbiAgICAgICAgL2VraW9oZi4rKGZsb3cpXFwvKFtcXHdcXC5dKykvaSwgLy8gRmxvd1xuICAgICAgICAvKHN3aWZ0Zm94KS9pLCAvLyBTd2lmdGZveFxuICAgICAgICAvKGljZWRyYWdvbnxpY2V3ZWFzZWx8Y2FtaW5vfGNoaW1lcmF8ZmVubmVjfG1hZW1vIGJyb3dzZXJ8bWluaW1vfGNvbmtlcm9yfGtsYXIpW1xcLyBdPyhbXFx3XFwuXFwrXSspL2ksXG4gICAgICAgIC8vIEljZURyYWdvbi9JY2V3ZWFzZWwvQ2FtaW5vL0NoaW1lcmEvRmVubmVjL01hZW1vL01pbmltby9Db25rZXJvci9LbGFyXG4gICAgICAgIC8oc2VhbW9ua2V5fGstbWVsZW9ufGljZWNhdHxpY2VhcGV8ZmlyZWJpcmR8cGhvZW5peHxwYWxlbW9vbnxiYXNpbGlza3x3YXRlcmZveClcXC8oWy1cXHdcXC5dKykkL2ksXG4gICAgICAgIC8vIEZpcmVmb3gvU2VhTW9ua2V5L0stTWVsZW9uL0ljZUNhdC9JY2VBcGUvRmlyZWJpcmQvUGhvZW5peFxuICAgICAgICAvKGZpcmVmb3gpXFwvKFtcXHdcXC5dKykvaSwgLy8gT3RoZXIgRmlyZWZveC1iYXNlZFxuICAgICAgICAvKG1vemlsbGEpXFwvKFtcXHdcXC5dKykgLitydlxcOi4rZ2Vja29cXC9cXGQrL2ksIC8vIE1vemlsbGFcblxuICAgICAgICAvLyBPdGhlclxuICAgICAgICAvKHBvbGFyaXN8bHlueHxkaWxsb3xpY2FifGRvcmlzfGFtYXlhfHczbXxuZXRzdXJmfHNsZWlwbmlyfG9iaWdvfG1vc2FpY3woPzpnb3xpY2V8dXApW1xcLiBdP2Jyb3dzZXIpWy1cXC8gXT92PyhbXFx3XFwuXSspL2ksXG4gICAgICAgIC8vIFBvbGFyaXMvTHlueC9EaWxsby9pQ2FiL0RvcmlzL0FtYXlhL3czbS9OZXRTdXJmL1NsZWlwbmlyL09iaWdvL01vc2FpYy9Hby9JQ0UvVVAuQnJvd3NlclxuICAgICAgICAvKGxpbmtzKSBcXCgoW1xcd1xcLl0rKS9pIC8vIExpbmtzXG4gICAgICBdLFxuICAgICAgW05BTUUsIFZFUlNJT05dLFxuICAgICAgW1xuICAgICAgICAvKGNvYmFsdClcXC8oW1xcd1xcLl0rKS9pIC8vIENvYmFsdFxuICAgICAgXSxcbiAgICAgIFtOQU1FLCBbVkVSU0lPTiwgL21hc3Rlci58bHRzLi8sIFwiXCJdXVxuICAgIF0sXG5cbiAgICBjcHU6IFtcbiAgICAgIFtcbiAgICAgICAgLyg/OihhbWR8eCg/Oig/Ojg2fDY0KVstX10pP3x3b3d8d2luKTY0KVs7XFwpXS9pIC8vIEFNRDY0ICh4NjQpXG4gICAgICBdLFxuICAgICAgW1tBUkNISVRFQ1RVUkUsIFwiYW1kNjRcIl1dLFxuICAgICAgW1xuICAgICAgICAvKGlhMzIoPz07KSkvaSAvLyBJQTMyIChxdWlja3RpbWUpXG4gICAgICBdLFxuICAgICAgW1tBUkNISVRFQ1RVUkUsIGxvd2VyaXplXV0sXG4gICAgICBbXG4gICAgICAgIC8oKD86aVszNDZdfHgpODYpWztcXCldL2kgLy8gSUEzMiAoeDg2KVxuICAgICAgXSxcbiAgICAgIFtbQVJDSElURUNUVVJFLCBcImlhMzJcIl1dLFxuICAgICAgW1xuICAgICAgICAvXFxiKGFhcmNoNjR8YXJtKHY/OGU/bD98Xz82NCkpXFxiL2kgLy8gQVJNNjRcbiAgICAgIF0sXG4gICAgICBbW0FSQ0hJVEVDVFVSRSwgXCJhcm02NFwiXV0sXG4gICAgICBbXG4gICAgICAgIC9cXGIoYXJtKD86dls2N10pP2h0P24/W2ZsXXA/KVxcYi9pIC8vIEFSTUhGXG4gICAgICBdLFxuICAgICAgW1tBUkNISVRFQ1RVUkUsIFwiYXJtaGZcIl1dLFxuICAgICAgW1xuICAgICAgICAvLyBQb2NrZXRQQyBtaXN0YWtlbmx5IGlkZW50aWZpZWQgYXMgUG93ZXJQQ1xuICAgICAgICAvd2luZG93cyAoY2V8bW9iaWxlKTsgcHBjOy9pXG4gICAgICBdLFxuICAgICAgW1tBUkNISVRFQ1RVUkUsIFwiYXJtXCJdXSxcbiAgICAgIFtcbiAgICAgICAgLygoPzpwcGN8cG93ZXJwYykoPzo2NCk/KSg/OiBtYWN8O3xcXCkpL2kgLy8gUG93ZXJQQ1xuICAgICAgXSxcbiAgICAgIFtbQVJDSElURUNUVVJFLCAvb3dlci8sIEVNUFRZLCBsb3dlcml6ZV1dLFxuICAgICAgW1xuICAgICAgICAvKHN1bjRcXHcpWztcXCldL2kgLy8gU1BBUkNcbiAgICAgIF0sXG4gICAgICBbW0FSQ0hJVEVDVFVSRSwgXCJzcGFyY1wiXV0sXG4gICAgICBbXG4gICAgICAgIC8oKD86YXZyMzJ8aWE2NCg/PTspKXw2OGsoPz1cXCkpfFxcYmFybSg/PXYoPzpbMS03XXxbNS03XTEpbD98O3xlYWJpKXwoPz1hdG1lbCApYXZyfCg/OmlyaXh8bWlwc3xzcGFyYykoPzo2NCk/XFxifHBhLXJpc2MpL2lcbiAgICAgICAgLy8gSUE2NCwgNjhLLCBBUk0vNjQsIEFWUi8zMiwgSVJJWC82NCwgTUlQUy82NCwgU1BBUkMvNjQsIFBBLVJJU0NcbiAgICAgIF0sXG4gICAgICBbW0FSQ0hJVEVDVFVSRSwgbG93ZXJpemVdXVxuICAgIF0sXG5cbiAgICBkZXZpY2U6IFtcbiAgICAgIFtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgLy8gTU9CSUxFUyAmIFRBQkxFVFNcbiAgICAgICAgLy8gT3JkZXJlZCBieSBwb3B1bGFyaXR5XG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAvLyBTYW1zdW5nXG4gICAgICAgIC9cXGIoc2NoLWlbODldMFxcZHxzaHctbTM4MHN8c20tW3B0eF1cXHd7Miw0fXxndC1bcG5dXFxkezIsNH18c2doLXQ4WzU2XTl8bmV4dXMgMTApL2lcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIFNBTVNVTkddLCBbVFlQRSwgVEFCTEVUXV0sXG4gICAgICBbXG4gICAgICAgIC9cXGIoKD86c1tjZ3BdaHxndHxzbSktXFx3K3xnYWxheHkgbmV4dXMpL2ksXG4gICAgICAgIC9zYW1zdW5nWy0gXShbLVxcd10rKS9pLFxuICAgICAgICAvc2VjLShzZ2hcXHcrKS9pXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBTQU1TVU5HXSwgW1RZUEUsIE1PQklMRV1dLFxuICAgICAgW1xuICAgICAgICAvLyBBcHBsZVxuICAgICAgICAvKChpcG9kfGlwaG9uZSlcXGQrLFxcZCspL2kgLy8gaVBvZC9pUGhvbmUgbW9kZWxcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIEFQUExFXSwgW1RZUEUsIE1PQklMRV1dLFxuICAgICAgW1xuICAgICAgICAvKGlwYWRcXGQrLFxcZCspL2kgLy8gaVBhZCBtb2RlbFxuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgQVBQTEVdLCBbVFlQRSwgVEFCTEVUXV0sXG4gICAgICBbXG4gICAgICAgIC9cXCgoaXAoPzpob25lfG9kKVtcXHcgXSopOy9pIC8vIGlQb2QvaVBob25lXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBBUFBMRV0sIFtUWVBFLCBNT0JJTEVdXSxcbiAgICAgIFtcbiAgICAgICAgL1xcKChpcGFkKTtbLVxcd1xcKSw7IF0rYXBwbGUvaSwgLy8gaVBhZFxuICAgICAgICAvYXBwbGVjb3JlbWVkaWFcXC9bXFx3XFwuXSsgXFwoKGlwYWQpL2ksXG4gICAgICAgIC9cXGIoaXBhZClcXGRcXGQ/LFxcZFxcZD9bO1xcXV0uK2lvcy9pXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBBUFBMRV0sIFtUWVBFLCBUQUJMRVRdXSxcbiAgICAgIFsvKG1hY2ludG9zaCk7L2ldLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBBUFBMRV1dLFxuICAgICAgW1xuICAgICAgICAvLyBIdWF3ZWlcbiAgICAgICAgL1xcYigoPzphZ1tyc11bMjNdP3xiYWgyP3xzaHQ/fGJ0diktYT9bbHddXFxkezJ9KVxcYig/IS4rZFxcL3MpL2lcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIEhVQVdFSV0sIFtUWVBFLCBUQUJMRVRdXSxcbiAgICAgIFtcbiAgICAgICAgLyg/Omh1YXdlaXxob25vcikoWy1cXHcgXSspWztcXCldL2ksXG4gICAgICAgIC9cXGIobmV4dXMgNnB8XFx3ezIsNH1lPy1bYXR1XT9bbG5dW1xcZHhdWzAxMjM1OWNdW2Fkbl0/KVxcYig/IS4rZFxcL3MpL2lcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIEhVQVdFSV0sIFtUWVBFLCBNT0JJTEVdXSxcbiAgICAgIFtcbiAgICAgICAgLy8gWGlhb21pXG4gICAgICAgIC9cXGIocG9jb1tcXHcgXSspKD86IGJ1aXxcXCkpL2ksIC8vIFhpYW9taSBQT0NPXG4gICAgICAgIC9cXGI7IChcXHcrKSBidWlsZFxcL2htXFwxL2ksIC8vIFhpYW9taSBIb25nbWkgJ251bWVyaWMnIG1vZGVsc1xuICAgICAgICAvXFxiKGhtWy1fIF0/bm90ZT9bXyBdPyg/OlxcZFxcdyk/KSBidWkvaSwgLy8gWGlhb21pIEhvbmdtaVxuICAgICAgICAvXFxiKHJlZG1pW1xcLV8gXT8oPzpub3RlfGspP1tcXHdfIF0rKSg/OiBidWl8XFwpKS9pLCAvLyBYaWFvbWkgUmVkbWlcbiAgICAgICAgL1xcYihtaVstXyBdPyg/OmFcXGR8b25lfG9uZVtfIF1wbHVzfG5vdGUgbHRlfG1heHxjYyk/W18gXT8oPzpcXGQ/XFx3PylbXyBdPyg/OnBsdXN8c2V8bGl0ZSk/KSg/OiBidWl8XFwpKS9pIC8vIFhpYW9taSBNaVxuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgW01PREVMLCAvXy9nLCBcIiBcIl0sXG4gICAgICAgIFtWRU5ET1IsIFhJQU9NSV0sXG4gICAgICAgIFtUWVBFLCBNT0JJTEVdXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAvXFxiKG1pWy1fIF0/KD86cGFkKSg/OltcXHdfIF0rKSkoPzogYnVpfFxcKSkvaSAvLyBNaSBQYWQgdGFibGV0c1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgW01PREVMLCAvXy9nLCBcIiBcIl0sXG4gICAgICAgIFtWRU5ET1IsIFhJQU9NSV0sXG4gICAgICAgIFtUWVBFLCBUQUJMRVRdXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAvLyBPUFBPXG4gICAgICAgIC87IChcXHcrKSBidWkuKyBvcHBvL2ksXG4gICAgICAgIC9cXGIoY3BoWzEyXVxcZHszfXxwKD86YWZ8Y1thbF18ZFxcd3xlW2FyXSlbbXRdXFxkMHx4OTAwN3xhMTAxb3ApXFxiL2lcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIFwiT1BQT1wiXSwgW1RZUEUsIE1PQklMRV1dLFxuICAgICAgW1xuICAgICAgICAvLyBWaXZvXG4gICAgICAgIC92aXZvIChcXHcrKSg/OiBidWl8XFwpKS9pLFxuICAgICAgICAvXFxiKHZbMTJdXFxkezN9XFx3P1thdF0pKD86IGJ1aXw7KS9pXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBcIlZpdm9cIl0sIFtUWVBFLCBNT0JJTEVdXSxcbiAgICAgIFtcbiAgICAgICAgLy8gUmVhbG1lXG4gICAgICAgIC9cXGIocm14WzEyXVxcZHszfSkoPzogYnVpfDt8XFwpKS9pXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBcIlJlYWxtZVwiXSwgW1RZUEUsIE1PQklMRV1dLFxuICAgICAgW1xuICAgICAgICAvLyBNb3Rvcm9sYVxuICAgICAgICAvXFxiKG1pbGVzdG9uZXxkcm9pZCg/OlsyLTR4XXwgKD86YmlvbmljfHgyfHByb3xyYXpyKSk/Oj8oIDRnKT8pXFxiW1xcdyBdK2J1aWxkXFwvL2ksXG4gICAgICAgIC9cXGJtb3QoPzpvcm9sYSk/Wy0gXShcXHcqKS9pLFxuICAgICAgICAvKCg/Om1vdG9bXFx3XFwoXFwpIF0rfHh0XFxkezMsNH18bmV4dXMgNikoPz0gYnVpfFxcKSkpL2lcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIE1PVE9ST0xBXSwgW1RZUEUsIE1PQklMRV1dLFxuICAgICAgWy9cXGIobXo2MFxcZHx4b29tWzIgXXswLDJ9KSBidWlsZFxcLy9pXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgTU9UT1JPTEFdLCBbVFlQRSwgVEFCTEVUXV0sXG4gICAgICBbXG4gICAgICAgIC8vIExHXG4gICAgICAgIC8oKD89bGcpP1t2bF1rXFwtP1xcZHszfSkgYnVpfCAzXFwuWy1cXHc7IF17MTB9bGc/LShbMDZjdjldezMsNH0pL2lcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIExHXSwgW1RZUEUsIFRBQkxFVF1dLFxuICAgICAgW1xuICAgICAgICAvKGxtKD86LT9mMTAwW252XT98LVtcXHdcXC5dKykoPz0gYnVpfFxcKSl8bmV4dXMgWzQ1XSkvaSxcbiAgICAgICAgL1xcYmxnWy1lO1xcLyBdKygoPyFicm93c2VyfG5ldGNhc3R8YW5kcm9pZCB0dilcXHcrKS9pLFxuICAgICAgICAvXFxibGctPyhbXFxkXFx3XSspIGJ1aS9pXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBMR10sIFtUWVBFLCBNT0JJTEVdXSxcbiAgICAgIFtcbiAgICAgICAgLy8gTGVub3ZvXG4gICAgICAgIC8oaWRlYXRhYlstXFx3IF0rKS9pLFxuICAgICAgICAvbGVub3ZvID8oc1s1Nl0wMDBbLVxcd10rfHRhYig/OltcXHcgXSspfHl0Wy1cXGRcXHddezZ9fHRiWy1cXGRcXHddezZ9KS9pXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBcIkxlbm92b1wiXSwgW1RZUEUsIFRBQkxFVF1dLFxuICAgICAgW1xuICAgICAgICAvLyBOb2tpYVxuICAgICAgICAvKD86bWFlbW98bm9raWEpLioobjkwMHxsdW1pYSBcXGQrKS9pLFxuICAgICAgICAvbm9raWFbLV8gXT8oWy1cXHdcXC5dKikvaVxuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgW01PREVMLCAvXy9nLCBcIiBcIl0sXG4gICAgICAgIFtWRU5ET1IsIFwiTm9raWFcIl0sXG4gICAgICAgIFtUWVBFLCBNT0JJTEVdXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAvLyBHb29nbGVcbiAgICAgICAgLyhwaXhlbCBjKVxcYi9pIC8vIEdvb2dsZSBQaXhlbCBDXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBHT09HTEVdLCBbVFlQRSwgVEFCTEVUXV0sXG4gICAgICBbXG4gICAgICAgIC9kcm9pZC4rOyAocGl4ZWxbXFxkYXhsIF17MCw2fSkoPzogYnVpfFxcKSkvaSAvLyBHb29nbGUgUGl4ZWxcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIEdPT0dMRV0sIFtUWVBFLCBNT0JJTEVdXSxcbiAgICAgIFtcbiAgICAgICAgLy8gU29ueVxuICAgICAgICAvZHJvaWQuKyAoYT9cXGRbMC0yXXsyfXNvfFtjLWddXFxkezR9fHNvWy1nbF1cXHcrfHhxLWFcXHdbNC03XVsxMl0pKD89IGJ1aXxcXCkuK2Nocm9tZVxcLyg/IVsxLTZdezAsMX1cXGRcXC4pKS9pXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBTT05ZXSwgW1RZUEUsIE1PQklMRV1dLFxuICAgICAgWy9zb255IHRhYmxldCBbcHNdL2ksIC9cXGIoPzpzb255KT9zZ3BcXHcrKD86IGJ1aXxcXCkpL2ldLFxuICAgICAgW1xuICAgICAgICBbTU9ERUwsIFwiWHBlcmlhIFRhYmxldFwiXSxcbiAgICAgICAgW1ZFTkRPUiwgU09OWV0sXG4gICAgICAgIFtUWVBFLCBUQUJMRVRdXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAvLyBPbmVQbHVzXG4gICAgICAgIC8gKGtiMjAwNXxpbjIwWzEyXTV8YmUyMFsxMl1bNTldKVxcYi9pLFxuICAgICAgICAvKD86b25lKT8oPzpwbHVzKT8gKGFcXGQwXFxkXFxkKSg/OiBifFxcKSkvaVxuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgXCJPbmVQbHVzXCJdLCBbVFlQRSwgTU9CSUxFXV0sXG4gICAgICBbXG4gICAgICAgIC8vIEFtYXpvblxuICAgICAgICAvKGFsZXhhKXdlYm0vaSxcbiAgICAgICAgLyhrZlthLXpdezJ9d2kpKCBidWl8XFwpKS9pLCAvLyBLaW5kbGUgRmlyZSB3aXRob3V0IFNpbGtcbiAgICAgICAgLyhrZlthLXpdKykoIGJ1aXxcXCkpLitzaWxrXFwvL2kgLy8gS2luZGxlIEZpcmUgSERcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIEFNQVpPTl0sIFtUWVBFLCBUQUJMRVRdXSxcbiAgICAgIFtcbiAgICAgICAgLygoPzpzZHxrZilbMDM0OWhpam9yc3R1d10rKSggYnVpfFxcKSkuK3NpbGtcXC8vaSAvLyBGaXJlIFBob25lXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICBbTU9ERUwsIC8oLispL2csIFwiRmlyZSBQaG9uZSAkMVwiXSxcbiAgICAgICAgW1ZFTkRPUiwgQU1BWk9OXSxcbiAgICAgICAgW1RZUEUsIE1PQklMRV1cbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgIC8vIEJsYWNrQmVycnlcbiAgICAgICAgLyhwbGF5Ym9vayk7Wy1cXHdcXCksOyBdKyhyaW0pL2kgLy8gQmxhY2tCZXJyeSBQbGF5Qm9va1xuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgVkVORE9SLCBbVFlQRSwgVEFCTEVUXV0sXG4gICAgICBbXG4gICAgICAgIC9cXGIoKD86YmJbYS1mXXxzdFtodl0pMTAwLVxcZCkvaSxcbiAgICAgICAgL1xcKGJiMTA7IChcXHcrKS9pIC8vIEJsYWNrQmVycnkgMTBcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIEJMQUNLQkVSUlldLCBbVFlQRSwgTU9CSUxFXV0sXG4gICAgICBbXG4gICAgICAgIC8vIEFzdXNcbiAgICAgICAgLyg/OlxcYnxhc3VzXykodHJhbnNmb1twcmltZSBdezQsMTB9IFxcdyt8ZWVlcGN8c2xpZGVyIFxcdyt8bmV4dXMgN3xwYWRmb25lfHAwMFtjal0pL2lcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIEFTVVNdLCBbVFlQRSwgVEFCTEVUXV0sXG4gICAgICBbLyAoeltiZXNdNlswMjddWzAxMl1ba21dW2xzXXx6ZW5mb25lIFxcZFxcdz8pXFxiL2ldLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBBU1VTXSwgW1RZUEUsIE1PQklMRV1dLFxuICAgICAgW1xuICAgICAgICAvLyBIVENcbiAgICAgICAgLyhuZXh1cyA5KS9pIC8vIEhUQyBOZXh1cyA5XG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBcIkhUQ1wiXSwgW1RZUEUsIFRBQkxFVF1dLFxuICAgICAgW1xuICAgICAgICAvKGh0YylbLTtfIF17MSwyfShbXFx3IF0rKD89XFwpfCBidWkpfFxcdyspL2ksIC8vIEhUQ1xuXG4gICAgICAgIC8vIFpURVxuICAgICAgICAvKHp0ZSlbLSBdKFtcXHcgXSs/KSg/OiBidWl8XFwvfFxcKSkvaSxcbiAgICAgICAgLyhhbGNhdGVsfGdlZWtzcGhvbmV8bmV4aWFufHBhbmFzb25pY3xzb255KD8hLWJyYSkpWy1fIF0/KFstXFx3XSopL2kgLy8gQWxjYXRlbC9HZWVrc1Bob25lL05leGlhbi9QYW5hc29uaWMvU29ueVxuICAgICAgXSxcbiAgICAgIFtWRU5ET1IsIFtNT0RFTCwgL18vZywgXCIgXCJdLCBbVFlQRSwgTU9CSUxFXV0sXG4gICAgICBbXG4gICAgICAgIC8vIEFjZXJcbiAgICAgICAgL2Ryb2lkLis7IChbYWJdWzEtN10tP1swMTc4YV1cXGRcXGQ/KS9pXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBcIkFjZXJcIl0sIFtUWVBFLCBUQUJMRVRdXSxcbiAgICAgIFtcbiAgICAgICAgLy8gTWVpenVcbiAgICAgICAgL2Ryb2lkLis7IChtWzEtNV0gbm90ZSkgYnVpL2ksXG4gICAgICAgIC9cXGJtei0oWy1cXHddezIsfSkvaVxuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgXCJNZWl6dVwiXSwgW1RZUEUsIE1PQklMRV1dLFxuICAgICAgW1xuICAgICAgICAvLyBTaGFycFxuICAgICAgICAvXFxiKHNoLT9bYWx0dnpdP1xcZFxcZFthLWVrbV0/KS9pXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBTSEFSUF0sIFtUWVBFLCBNT0JJTEVdXSxcbiAgICAgIFtcbiAgICAgICAgLy8gTUlYRURcbiAgICAgICAgLyhibGFja2JlcnJ5fGJlbnF8cGFsbSg/PVxcLSl8c29ueWVyaWNzc29ufGFjZXJ8YXN1c3xkZWxsfG1laXp1fG1vdG9yb2xhfHBvbHl0cm9uKVstXyBdPyhbLVxcd10qKS9pLFxuICAgICAgICAvLyBCbGFja0JlcnJ5L0JlblEvUGFsbS9Tb255LUVyaWNzc29uL0FjZXIvQXN1cy9EZWxsL01laXp1L01vdG9yb2xhL1BvbHl0cm9uXG4gICAgICAgIC8oaHApIChbXFx3IF0rXFx3KS9pLCAvLyBIUCBpUEFRXG4gICAgICAgIC8oYXN1cyktPyhcXHcrKS9pLCAvLyBBc3VzXG4gICAgICAgIC8obWljcm9zb2Z0KTsgKGx1bWlhW1xcdyBdKykvaSwgLy8gTWljcm9zb2Z0IEx1bWlhXG4gICAgICAgIC8obGVub3ZvKVstXyBdPyhbLVxcd10rKS9pLCAvLyBMZW5vdm9cbiAgICAgICAgLyhqb2xsYSkvaSwgLy8gSm9sbGFcbiAgICAgICAgLyhvcHBvKSA/KFtcXHcgXSspIGJ1aS9pIC8vIE9QUE9cbiAgICAgIF0sXG4gICAgICBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIE1PQklMRV1dLFxuICAgICAgW1xuICAgICAgICAvKGFyY2hvcykgKGdhbWVwYWQyPykvaSwgLy8gQXJjaG9zXG4gICAgICAgIC8oaHApLisodG91Y2hwYWQoPyEuK3RhYmxldCl8dGFibGV0KS9pLCAvLyBIUCBUb3VjaFBhZFxuICAgICAgICAvKGtpbmRsZSlcXC8oW1xcd1xcLl0rKS9pLCAvLyBLaW5kbGVcbiAgICAgICAgLyhub29rKVtcXHcgXStidWlsZFxcLyhcXHcrKS9pLCAvLyBOb29rXG4gICAgICAgIC8oZGVsbCkgKHN0cmVhW2twclxcZCBdKltcXGRrb10pL2ksIC8vIERlbGwgU3RyZWFrXG4gICAgICAgIC8obGVbLSBdK3BhbilbLSBdKyhcXHd7MSw5fSkgYnVpL2ksIC8vIExlIFBhbiBUYWJsZXRzXG4gICAgICAgIC8odHJpbml0eSlbLSBdKih0XFxkezN9KSBidWkvaSwgLy8gVHJpbml0eSBUYWJsZXRzXG4gICAgICAgIC8oZ2lnYXNldClbLSBdKyhxXFx3ezEsOX0pIGJ1aS9pLCAvLyBHaWdhc2V0IFRhYmxldHNcbiAgICAgICAgLyh2b2RhZm9uZSkgKFtcXHcgXSspKD86XFwpfCBidWkpL2kgLy8gVm9kYWZvbmVcbiAgICAgIF0sXG4gICAgICBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIFRBQkxFVF1dLFxuICAgICAgW1xuICAgICAgICAvKHN1cmZhY2UgZHVvKS9pIC8vIFN1cmZhY2UgRHVvXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBNSUNST1NPRlRdLCBbVFlQRSwgVEFCTEVUXV0sXG4gICAgICBbXG4gICAgICAgIC9kcm9pZCBbXFxkXFwuXSs7IChmcFxcZHU/KSg/OiBifFxcKSkvaSAvLyBGYWlycGhvbmVcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIFwiRmFpcnBob25lXCJdLCBbVFlQRSwgTU9CSUxFXV0sXG4gICAgICBbXG4gICAgICAgIC8odTMwNGFhKS9pIC8vIEFUJlRcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIFwiQVQmVFwiXSwgW1RZUEUsIE1PQklMRV1dLFxuICAgICAgW1xuICAgICAgICAvXFxic2llLShcXHcqKS9pIC8vIFNpZW1lbnNcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIFwiU2llbWVuc1wiXSwgW1RZUEUsIE1PQklMRV1dLFxuICAgICAgW1xuICAgICAgICAvXFxiKHJjdFxcdyspIGIvaSAvLyBSQ0EgVGFibGV0c1xuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgXCJSQ0FcIl0sIFtUWVBFLCBUQUJMRVRdXSxcbiAgICAgIFtcbiAgICAgICAgL1xcYih2ZW51ZVtcXGQgXXsyLDd9KSBiL2kgLy8gRGVsbCBWZW51ZSBUYWJsZXRzXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBcIkRlbGxcIl0sIFtUWVBFLCBUQUJMRVRdXSxcbiAgICAgIFtcbiAgICAgICAgL1xcYihxKD86bXZ8dGEpXFx3KykgYi9pIC8vIFZlcml6b24gVGFibGV0XG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBcIlZlcml6b25cIl0sIFtUWVBFLCBUQUJMRVRdXSxcbiAgICAgIFtcbiAgICAgICAgL1xcYig/OmJhcm5lc1smIF0rbm9ibGUgfGJuW3J0XSkoW1xcd1xcKyBdKikgYi9pIC8vIEJhcm5lcyAmIE5vYmxlIFRhYmxldFxuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgXCJCYXJuZXMgJiBOb2JsZVwiXSwgW1RZUEUsIFRBQkxFVF1dLFxuICAgICAgWy9cXGIodG1cXGR7M31cXHcrKSBiL2ldLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBcIk51VmlzaW9uXCJdLCBbVFlQRSwgVEFCTEVUXV0sXG4gICAgICBbXG4gICAgICAgIC9cXGIoazg4KSBiL2kgLy8gWlRFIEsgU2VyaWVzIFRhYmxldFxuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgXCJaVEVcIl0sIFtUWVBFLCBUQUJMRVRdXSxcbiAgICAgIFtcbiAgICAgICAgL1xcYihueFxcZHszfWopIGIvaSAvLyBaVEUgTnViaWFcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIFwiWlRFXCJdLCBbVFlQRSwgTU9CSUxFXV0sXG4gICAgICBbXG4gICAgICAgIC9cXGIoZ2VuXFxkezN9KSBiLis0OWgvaSAvLyBTd2lzcyBHRU4gTW9iaWxlXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBcIlN3aXNzXCJdLCBbVFlQRSwgTU9CSUxFXV0sXG4gICAgICBbXG4gICAgICAgIC9cXGIoenVyXFxkezN9KSBiL2kgLy8gU3dpc3MgWlVSIFRhYmxldFxuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgXCJTd2lzc1wiXSwgW1RZUEUsIFRBQkxFVF1dLFxuICAgICAgW1xuICAgICAgICAvXFxiKCh6ZWtpKT90Yi4qXFxiKSBiL2kgLy8gWmVraSBUYWJsZXRzXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBcIlpla2lcIl0sIFtUWVBFLCBUQUJMRVRdXSxcbiAgICAgIFtcbiAgICAgICAgL1xcYihbeXJdXFxkezJ9KSBiL2ksXG4gICAgICAgIC9cXGIoZHJhZ29uWy0gXSt0b3VjaCB8ZHQpKFxcd3s1fSkgYi9pIC8vIERyYWdvbiBUb3VjaCBUYWJsZXRcbiAgICAgIF0sXG4gICAgICBbW1ZFTkRPUiwgXCJEcmFnb24gVG91Y2hcIl0sIE1PREVMLCBbVFlQRSwgVEFCTEVUXV0sXG4gICAgICBbXG4gICAgICAgIC9cXGIobnMtP1xcd3swLDl9KSBiL2kgLy8gSW5zaWduaWEgVGFibGV0c1xuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgXCJJbnNpZ25pYVwiXSwgW1RZUEUsIFRBQkxFVF1dLFxuICAgICAgW1xuICAgICAgICAvXFxiKChueGF8bmV4dCktP1xcd3swLDl9KSBiL2kgLy8gTmV4dEJvb2sgVGFibGV0c1xuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgXCJOZXh0Qm9va1wiXSwgW1RZUEUsIFRBQkxFVF1dLFxuICAgICAgW1xuICAgICAgICAvXFxiKHh0cmVtZVxcXyk/KHYoMVswNDVdfDJbMDE1XXxbMzQ2OV0wfDdbMDVdKSkgYi9pIC8vIFZvaWNlIFh0cmVtZSBQaG9uZXNcbiAgICAgIF0sXG4gICAgICBbW1ZFTkRPUiwgXCJWb2ljZVwiXSwgTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSxcbiAgICAgIFtcbiAgICAgICAgL1xcYihsdnRlbFxcLSk/KHYxWzEyXSkgYi9pIC8vIEx2VGVsIFBob25lc1xuICAgICAgXSxcbiAgICAgIFtbVkVORE9SLCBcIkx2VGVsXCJdLCBNT0RFTCwgW1RZUEUsIE1PQklMRV1dLFxuICAgICAgW1xuICAgICAgICAvXFxiKHBoLTEpIC9pIC8vIEVzc2VudGlhbCBQSC0xXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBcIkVzc2VudGlhbFwiXSwgW1RZUEUsIE1PQklMRV1dLFxuICAgICAgW1xuICAgICAgICAvXFxiKHYoMTAwbWR8NzAwbmF8NzAxMXw5MTdnKS4qXFxiKSBiL2kgLy8gRW52aXplbiBUYWJsZXRzXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBcIkVudml6ZW5cIl0sIFtUWVBFLCBUQUJMRVRdXSxcbiAgICAgIFtcbiAgICAgICAgL1xcYih0cmlvWy1cXHdcXC4gXSspIGIvaSAvLyBNYWNoU3BlZWQgVGFibGV0c1xuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgXCJNYWNoU3BlZWRcIl0sIFtUWVBFLCBUQUJMRVRdXSxcbiAgICAgIFtcbiAgICAgICAgL1xcYnR1XygxNDkxKSBiL2kgLy8gUm90b3IgVGFibGV0c1xuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgXCJSb3RvclwiXSwgW1RZUEUsIFRBQkxFVF1dLFxuICAgICAgW1xuICAgICAgICAvKHNoaWVsZFtcXHcgXSspIGIvaSAvLyBOdmlkaWEgU2hpZWxkIFRhYmxldHNcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIFwiTnZpZGlhXCJdLCBbVFlQRSwgVEFCTEVUXV0sXG4gICAgICBbXG4gICAgICAgIC8oc3ByaW50KSAoXFx3KykvaSAvLyBTcHJpbnQgUGhvbmVzXG4gICAgICBdLFxuICAgICAgW1ZFTkRPUiwgTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSxcbiAgICAgIFtcbiAgICAgICAgLyhraW5cXC5bb25ldHddezN9KS9pIC8vIE1pY3Jvc29mdCBLaW5cbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgIFtNT0RFTCwgL1xcLi9nLCBcIiBcIl0sXG4gICAgICAgIFtWRU5ET1IsIE1JQ1JPU09GVF0sXG4gICAgICAgIFtUWVBFLCBNT0JJTEVdXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAvZHJvaWQuKzsgKGNjNjY2Nj98ZXQ1WzE2XXxtY1syMzldWzIzXXg/fHZjOFswM114PylcXCkvaSAvLyBaZWJyYVxuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgWkVCUkFdLCBbVFlQRSwgVEFCTEVUXV0sXG4gICAgICBbL2Ryb2lkLis7IChlYzMwfHBzMjB8dGNbMi04XVxcZFtreF0pXFwpL2ldLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBaRUJSQV0sIFtUWVBFLCBNT0JJTEVdXSxcbiAgICAgIFtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyBDT05TT0xFU1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgLyhvdXlhKS9pLCAvLyBPdXlhXG4gICAgICAgIC8obmludGVuZG8pIChbd2lkczN1dGNoXSspL2kgLy8gTmludGVuZG9cbiAgICAgIF0sXG4gICAgICBbVkVORE9SLCBNT0RFTCwgW1RZUEUsIENPTlNPTEVdXSxcbiAgICAgIFtcbiAgICAgICAgL2Ryb2lkLis7IChzaGllbGQpIGJ1aS9pIC8vIE52aWRpYVxuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgXCJOdmlkaWFcIl0sIFtUWVBFLCBDT05TT0xFXV0sXG4gICAgICBbXG4gICAgICAgIC8ocGxheXN0YXRpb24gWzM0NXBvcnRhYmxldmldKykvaSAvLyBQbGF5c3RhdGlvblxuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgU09OWV0sIFtUWVBFLCBDT05TT0xFXV0sXG4gICAgICBbXG4gICAgICAgIC9cXGIoeGJveCg/OiBvbmUpPyg/ITsgeGJveCkpW1xcKTsgXS9pIC8vIE1pY3Jvc29mdCBYYm94XG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBNSUNST1NPRlRdLCBbVFlQRSwgQ09OU09MRV1dLFxuICAgICAgW1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIC8vIFNNQVJUVFZTXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAvc21hcnQtdHYuKyhzYW1zdW5nKS9pIC8vIFNhbXN1bmdcbiAgICAgIF0sXG4gICAgICBbVkVORE9SLCBbVFlQRSwgU01BUlRUVl1dLFxuICAgICAgWy9oYmJ0di4rbWFwbGU7KFxcZCspL2ldLFxuICAgICAgW1xuICAgICAgICBbTU9ERUwsIC9eLywgXCJTbWFydFRWXCJdLFxuICAgICAgICBbVkVORE9SLCBTQU1TVU5HXSxcbiAgICAgICAgW1RZUEUsIFNNQVJUVFZdXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAvKG51eDsgbmV0Y2FzdC4rc21hcnR0dnxsZyAobmV0Y2FzdFxcLnR2LTIwMVxcZHxhbmRyb2lkIHR2KSkvaSAvLyBMRyBTbWFydFRWXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICBbVkVORE9SLCBMR10sXG4gICAgICAgIFtUWVBFLCBTTUFSVFRWXVxuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgLyhhcHBsZSkgP3R2L2kgLy8gQXBwbGUgVFZcbiAgICAgIF0sXG4gICAgICBbVkVORE9SLCBbTU9ERUwsIEFQUExFICsgXCIgVFZcIl0sIFtUWVBFLCBTTUFSVFRWXV0sXG4gICAgICBbXG4gICAgICAgIC9jcmtleS9pIC8vIEdvb2dsZSBDaHJvbWVjYXN0XG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICBbTU9ERUwsIENIUk9NRSArIFwiY2FzdFwiXSxcbiAgICAgICAgW1ZFTkRPUiwgR09PR0xFXSxcbiAgICAgICAgW1RZUEUsIFNNQVJUVFZdXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAvZHJvaWQuK2FmdChcXHcpKCBidWl8XFwpKS9pIC8vIEZpcmUgVFZcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIEFNQVpPTl0sIFtUWVBFLCBTTUFSVFRWXV0sXG4gICAgICBbXG4gICAgICAgIC9cXChkdHZbXFwpO10uKyhhcXVvcykvaSxcbiAgICAgICAgLyhhcXVvcy10dltcXHcgXSspXFwpL2kgLy8gU2hhcnBcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtWRU5ET1IsIFNIQVJQXSwgW1RZUEUsIFNNQVJUVFZdXSxcbiAgICAgIFtcbiAgICAgICAgLyhicmF2aWFbXFx3IF0rKSggYnVpfFxcKSkvaSAvLyBTb255XG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBTT05ZXSwgW1RZUEUsIFNNQVJUVFZdXSxcbiAgICAgIFtcbiAgICAgICAgLyhtaXR2LVxcd3s1fSkgYnVpL2kgLy8gWGlhb21pXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBYSUFPTUldLCBbVFlQRSwgU01BUlRUVl1dLFxuICAgICAgW1xuICAgICAgICAvXFxiKHJva3UpW1xcZHhdKltcXClcXC9dKCg/OmR2cC0pP1tcXGRcXC5dKikvaSwgLy8gUm9rdVxuICAgICAgICAvaGJidHZcXC9cXGQrXFwuXFxkK1xcLlxcZCsgK1xcKFtcXHcgXSo7ICooXFx3W147XSopOyhbXjtdKikvaSAvLyBIYmJUViBkZXZpY2VzXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICBbVkVORE9SLCB0cmltXSxcbiAgICAgICAgW01PREVMLCB0cmltXSxcbiAgICAgICAgW1RZUEUsIFNNQVJUVFZdXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAvXFxiKGFuZHJvaWQgdHZ8c21hcnRbLSBdP3R2fG9wZXJhIHR2fHR2OyBydjopXFxiL2kgLy8gU21hcnRUViBmcm9tIFVuaWRlbnRpZmllZCBWZW5kb3JzXG4gICAgICBdLFxuICAgICAgW1tUWVBFLCBTTUFSVFRWXV0sXG4gICAgICBbXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgLy8gV0VBUkFCTEVTXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAvKChwZWJibGUpKWFwcC9pIC8vIFBlYmJsZVxuICAgICAgXSxcbiAgICAgIFtWRU5ET1IsIE1PREVMLCBbVFlQRSwgV0VBUkFCTEVdXSxcbiAgICAgIFtcbiAgICAgICAgL2Ryb2lkLis7IChnbGFzcykgXFxkL2kgLy8gR29vZ2xlIEdsYXNzXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBHT09HTEVdLCBbVFlQRSwgV0VBUkFCTEVdXSxcbiAgICAgIFsvZHJvaWQuKzsgKHd0NjM/MHsyLDN9KVxcKS9pXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgWkVCUkFdLCBbVFlQRSwgV0VBUkFCTEVdXSxcbiAgICAgIFtcbiAgICAgICAgLyhxdWVzdCggMik/KS9pIC8vIE9jdWx1cyBRdWVzdFxuICAgICAgXSxcbiAgICAgIFtNT0RFTCwgW1ZFTkRPUiwgRkFDRUJPT0tdLCBbVFlQRSwgV0VBUkFCTEVdXSxcbiAgICAgIFtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLyBFTUJFRERFRFxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgLyh0ZXNsYSkoPzogcXRjYXJicm93c2VyfFxcL1stXFx3XFwuXSspL2kgLy8gVGVzbGFcbiAgICAgIF0sXG4gICAgICBbVkVORE9SLCBbVFlQRSwgRU1CRURERURdXSxcbiAgICAgIFtcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgLy8gTUlYRUQgKEdFTkVSSUMpXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAvZHJvaWQgLis/OyAoW147XSs/KSg/OiBidWl8XFwpIGFwcGxldykuKz8gbW9iaWxlIHNhZmFyaS9pIC8vIEFuZHJvaWQgUGhvbmVzIGZyb20gVW5pZGVudGlmaWVkIFZlbmRvcnNcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtUWVBFLCBNT0JJTEVdXSxcbiAgICAgIFtcbiAgICAgICAgL2Ryb2lkIC4rPzsgKFteO10rPykoPzogYnVpfFxcKSBhcHBsZXcpLis/KD8hIG1vYmlsZSkgc2FmYXJpL2kgLy8gQW5kcm9pZCBUYWJsZXRzIGZyb20gVW5pZGVudGlmaWVkIFZlbmRvcnNcbiAgICAgIF0sXG4gICAgICBbTU9ERUwsIFtUWVBFLCBUQUJMRVRdXSxcbiAgICAgIFtcbiAgICAgICAgL1xcYigodGFibGV0fHRhYilbO1xcL118Zm9jdXNcXC9cXGQoPyEuK21vYmlsZSkpL2kgLy8gVW5pZGVudGlmaWFibGUgVGFibGV0XG4gICAgICBdLFxuICAgICAgW1tUWVBFLCBUQUJMRVRdXSxcbiAgICAgIFtcbiAgICAgICAgLyhwaG9uZXxtb2JpbGUoPzpbO1xcL118IFsgXFx3XFwvXFwuXSpzYWZhcmkpfHBkYSg/PS4rd2luZG93cyBjZSkpL2kgLy8gVW5pZGVudGlmaWFibGUgTW9iaWxlXG4gICAgICBdLFxuICAgICAgW1tUWVBFLCBNT0JJTEVdXSxcbiAgICAgIFtcbiAgICAgICAgLyhhbmRyb2lkWy1cXHdcXC4gXXswLDl9KTsuK2J1aWwvaSAvLyBHZW5lcmljIEFuZHJvaWQgRGV2aWNlXG4gICAgICBdLFxuICAgICAgW01PREVMLCBbVkVORE9SLCBcIkdlbmVyaWNcIl1dXG4gICAgXSxcblxuICAgIGVuZ2luZTogW1xuICAgICAgW1xuICAgICAgICAvd2luZG93cy4rIGVkZ2VcXC8oW1xcd1xcLl0rKS9pIC8vIEVkZ2VIVE1MXG4gICAgICBdLFxuICAgICAgW1ZFUlNJT04sIFtOQU1FLCBFREdFICsgXCJIVE1MXCJdXSxcbiAgICAgIFtcbiAgICAgICAgL3dlYmtpdFxcLzUzN1xcLjM2LitjaHJvbWVcXC8oPyEyNykoW1xcd1xcLl0rKS9pIC8vIEJsaW5rXG4gICAgICBdLFxuICAgICAgW1ZFUlNJT04sIFtOQU1FLCBcIkJsaW5rXCJdXSxcbiAgICAgIFtcbiAgICAgICAgLyhwcmVzdG8pXFwvKFtcXHdcXC5dKykvaSwgLy8gUHJlc3RvXG4gICAgICAgIC8od2Via2l0fHRyaWRlbnR8bmV0ZnJvbnR8bmV0c3VyZnxhbWF5YXxseW54fHczbXxnb2FubmEpXFwvKFtcXHdcXC5dKykvaSwgLy8gV2ViS2l0L1RyaWRlbnQvTmV0RnJvbnQvTmV0U3VyZi9BbWF5YS9MeW54L3czbS9Hb2FubmFcbiAgICAgICAgL2VraW9oKGZsb3cpXFwvKFtcXHdcXC5dKykvaSwgLy8gRmxvd1xuICAgICAgICAvKGtodG1sfHRhc21hbnxsaW5rcylbXFwvIF1cXCg/KFtcXHdcXC5dKykvaSwgLy8gS0hUTUwvVGFzbWFuL0xpbmtzXG4gICAgICAgIC8oaWNhYilbXFwvIF0oWzIzXVxcLltcXGRcXC5dKykvaSAvLyBpQ2FiXG4gICAgICBdLFxuICAgICAgW05BTUUsIFZFUlNJT05dLFxuICAgICAgW1xuICAgICAgICAvcnZcXDooW1xcd1xcLl17MSw5fSlcXGIuKyhnZWNrbykvaSAvLyBHZWNrb1xuICAgICAgXSxcbiAgICAgIFtWRVJTSU9OLCBOQU1FXVxuICAgIF0sXG5cbiAgICBvczogW1xuICAgICAgW1xuICAgICAgICAvLyBXaW5kb3dzXG4gICAgICAgIC9taWNyb3NvZnQgKHdpbmRvd3MpICh2aXN0YXx4cCkvaSAvLyBXaW5kb3dzIChpVHVuZXMpXG4gICAgICBdLFxuICAgICAgW05BTUUsIFZFUlNJT05dLFxuICAgICAgW1xuICAgICAgICAvKHdpbmRvd3MpIG50IDZcXC4yOyAoYXJtKS9pLCAvLyBXaW5kb3dzIFJUXG4gICAgICAgIC8od2luZG93cyAoPzpwaG9uZSg/OiBvcyk/fG1vYmlsZSkpW1xcLyBdPyhbXFxkXFwuXFx3IF0qKS9pLCAvLyBXaW5kb3dzIFBob25lXG4gICAgICAgIC8od2luZG93cylbXFwvIF0/KFtudGNlXFxkXFwuIF0rXFx3KSg/IS4reGJveCkvaVxuICAgICAgXSxcbiAgICAgIFtOQU1FLCBbVkVSU0lPTiwgc3RyTWFwcGVyLCB3aW5kb3dzVmVyc2lvbk1hcF1dLFxuICAgICAgWy8od2luKD89M3w5fG4pfHdpbiA5eCApKFtudFxcZFxcLl0rKS9pXSxcbiAgICAgIFtcbiAgICAgICAgW05BTUUsIFwiV2luZG93c1wiXSxcbiAgICAgICAgW1ZFUlNJT04sIHN0ck1hcHBlciwgd2luZG93c1ZlcnNpb25NYXBdXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAvLyBpT1MvbWFjT1NcbiAgICAgICAgL2lwW2hvbmVhZF17Miw0fVxcYig/Oi4qb3MgKFtcXHddKykgbGlrZSBtYWN8OyBvcGVyYSkvaSwgLy8gaU9TXG4gICAgICAgIC9jZm5ldHdvcmtcXC8uK2Rhcndpbi9pXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICBbVkVSU0lPTiwgL18vZywgXCIuXCJdLFxuICAgICAgICBbTkFNRSwgXCJpT1NcIl1cbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgIC8obWFjIG9zIHgpID8oW1xcd1xcLiBdKikvaSxcbiAgICAgICAgLyhtYWNpbnRvc2h8bWFjX3Bvd2VycGNcXGIpKD8hLitoYWlrdSkvaSAvLyBNYWMgT1NcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgIFtOQU1FLCBcIk1hYyBPU1wiXSxcbiAgICAgICAgW1ZFUlNJT04sIC9fL2csIFwiLlwiXVxuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgLy8gTW9iaWxlIE9TZXNcbiAgICAgICAgL2Ryb2lkIChbXFx3XFwuXSspXFxiLisoYW5kcm9pZFstIF14ODZ8aGFybW9ueW9zKS9pIC8vIEFuZHJvaWQteDg2L0hhcm1vbnlPU1xuICAgICAgXSxcbiAgICAgIFtWRVJTSU9OLCBOQU1FXSxcbiAgICAgIFtcbiAgICAgICAgLy8gQW5kcm9pZC9XZWJPUy9RTlgvQmFkYS9SSU0vTWFlbW8vTWVlR28vU2FpbGZpc2ggT1NcbiAgICAgICAgLyhhbmRyb2lkfHdlYm9zfHFueHxiYWRhfHJpbSB0YWJsZXQgb3N8bWFlbW98bWVlZ298c2FpbGZpc2gpWy1cXC8gXT8oW1xcd1xcLl0qKS9pLFxuICAgICAgICAvKGJsYWNrYmVycnkpXFx3KlxcLyhbXFx3XFwuXSopL2ksIC8vIEJsYWNrYmVycnlcbiAgICAgICAgLyh0aXplbnxrYWlvcylbXFwvIF0oW1xcd1xcLl0rKS9pLCAvLyBUaXplbi9LYWlPU1xuICAgICAgICAvXFwoKHNlcmllczQwKTsvaSAvLyBTZXJpZXMgNDBcbiAgICAgIF0sXG4gICAgICBbTkFNRSwgVkVSU0lPTl0sXG4gICAgICBbXG4gICAgICAgIC9cXChiYigxMCk7L2kgLy8gQmxhY2tCZXJyeSAxMFxuICAgICAgXSxcbiAgICAgIFtWRVJTSU9OLCBbTkFNRSwgQkxBQ0tCRVJSWV1dLFxuICAgICAgW1xuICAgICAgICAvKD86c3ltYmlhbiA/b3N8c3ltYm9zfHM2MCg/PTspfHNlcmllczYwKVstXFwvIF0/KFtcXHdcXC5dKikvaSAvLyBTeW1iaWFuXG4gICAgICBdLFxuICAgICAgW1ZFUlNJT04sIFtOQU1FLCBcIlN5bWJpYW5cIl1dLFxuICAgICAgW1xuICAgICAgICAvbW96aWxsYVxcL1tcXGRcXC5dKyBcXCgoPzptb2JpbGV8dGFibGV0fHR2fG1vYmlsZTsgW1xcdyBdKyk7IHJ2Oi4rIGdlY2tvXFwvKFtcXHdcXC5dKykvaSAvLyBGaXJlZm94IE9TXG4gICAgICBdLFxuICAgICAgW1ZFUlNJT04sIFtOQU1FLCBGSVJFRk9YICsgXCIgT1NcIl1dLFxuICAgICAgW1xuICAgICAgICAvd2ViMHM7LitydCh0dikvaSxcbiAgICAgICAgL1xcYig/OmhwKT93b3MoPzpicm93c2VyKT9cXC8oW1xcd1xcLl0rKS9pIC8vIFdlYk9TXG4gICAgICBdLFxuICAgICAgW1ZFUlNJT04sIFtOQU1FLCBcIndlYk9TXCJdXSxcbiAgICAgIFtcbiAgICAgICAgLy8gR29vZ2xlIENocm9tZWNhc3RcbiAgICAgICAgL2Nya2V5XFwvKFtcXGRcXC5dKykvaSAvLyBHb29nbGUgQ2hyb21lY2FzdFxuICAgICAgXSxcbiAgICAgIFtWRVJTSU9OLCBbTkFNRSwgQ0hST01FICsgXCJjYXN0XCJdXSxcbiAgICAgIFtcbiAgICAgICAgLyhjcm9zKSBbXFx3XSsgKFtcXHdcXC5dK1xcdykvaSAvLyBDaHJvbWl1bSBPU1xuICAgICAgXSxcbiAgICAgIFtbTkFNRSwgXCJDaHJvbWl1bSBPU1wiXSwgVkVSU0lPTl0sXG4gICAgICBbXG4gICAgICAgIC8vIENvbnNvbGVcbiAgICAgICAgLyhuaW50ZW5kb3xwbGF5c3RhdGlvbikgKFt3aWRzMzQ1cG9ydGFibGV2dWNoXSspL2ksIC8vIE5pbnRlbmRvL1BsYXlzdGF0aW9uXG4gICAgICAgIC8oeGJveCk7ICt4Ym94IChbXlxcKTtdKykvaSwgLy8gTWljcm9zb2Z0IFhib3ggKDM2MCwgT25lLCBYLCBTLCBTZXJpZXMgWCwgU2VyaWVzIFMpXG5cbiAgICAgICAgLy8gT3RoZXJcbiAgICAgICAgL1xcYihqb2xpfHBhbG0pXFxiID8oPzpvcyk/XFwvPyhbXFx3XFwuXSopL2ksIC8vIEpvbGkvUGFsbVxuICAgICAgICAvKG1pbnQpW1xcL1xcKFxcKSBdPyhcXHcqKS9pLCAvLyBNaW50XG4gICAgICAgIC8obWFnZWlhfHZlY3RvcmxpbnV4KVs7IF0vaSwgLy8gTWFnZWlhL1ZlY3RvckxpbnV4XG4gICAgICAgIC8oW2t4bG5dP3VidW50dXxkZWJpYW58c3VzZXxvcGVuc3VzZXxnZW50b298YXJjaCg/PSBsaW51eCl8c2xhY2t3YXJlfGZlZG9yYXxtYW5kcml2YXxjZW50b3N8cGNsaW51eG9zfHJlZCA/aGF0fHplbndhbGt8bGlucHVzfHJhc3BiaWFufHBsYW4gOXxtaW5peHxyaXNjIG9zfGNvbnRpa2l8ZGVlcGlufG1hbmphcm98ZWxlbWVudGFyeSBvc3xzYWJheW9ufGxpbnNwaXJlKSg/OiBnbnVcXC9saW51eCk/KD86IGVudGVycHJpc2UpPyg/OlstIF1saW51eCk/KD86LWdudSk/Wy1cXC8gXT8oPyFjaHJvbXxwYWNrYWdlKShbLVxcd1xcLl0qKS9pLFxuICAgICAgICAvLyBVYnVudHUvRGViaWFuL1NVU0UvR2VudG9vL0FyY2gvU2xhY2t3YXJlL0ZlZG9yYS9NYW5kcml2YS9DZW50T1MvUENMaW51eE9TL1JlZEhhdC9aZW53YWxrL0xpbnB1cy9SYXNwYmlhbi9QbGFuOS9NaW5peC9SSVNDT1MvQ29udGlraS9EZWVwaW4vTWFuamFyby9lbGVtZW50YXJ5L1NhYmF5b24vTGluc3BpcmVcbiAgICAgICAgLyhodXJkfGxpbnV4KSA/KFtcXHdcXC5dKikvaSwgLy8gSHVyZC9MaW51eFxuICAgICAgICAvKGdudSkgPyhbXFx3XFwuXSopL2ksIC8vIEdOVVxuICAgICAgICAvXFxiKFstZnJlbnRvcGNnaHNdezAsNX1ic2R8ZHJhZ29uZmx5KVtcXC8gXT8oPyFhbWR8W2l4MzQ2XXsxLDJ9ODYpKFtcXHdcXC5dKikvaSwgLy8gRnJlZUJTRC9OZXRCU0QvT3BlbkJTRC9QQy1CU0QvR2hvc3RCU0QvRHJhZ29uRmx5XG4gICAgICAgIC8oaGFpa3UpIChcXHcrKS9pIC8vIEhhaWt1XG4gICAgICBdLFxuICAgICAgW05BTUUsIFZFUlNJT05dLFxuICAgICAgW1xuICAgICAgICAvKHN1bm9zKSA/KFtcXHdcXC5cXGRdKikvaSAvLyBTb2xhcmlzXG4gICAgICBdLFxuICAgICAgW1tOQU1FLCBcIlNvbGFyaXNcIl0sIFZFUlNJT05dLFxuICAgICAgW1xuICAgICAgICAvKCg/Om9wZW4pP3NvbGFyaXMpWy1cXC8gXT8oW1xcd1xcLl0qKS9pLCAvLyBTb2xhcmlzXG4gICAgICAgIC8oYWl4KSAoKFxcZCkoPz1cXC58XFwpfCApW1xcd1xcLl0pKi9pLCAvLyBBSVhcbiAgICAgICAgL1xcYihiZW9zfG9zXFwvMnxhbWlnYW9zfG1vcnBob3N8b3BlbnZtc3xmdWNoc2lhfGhwLXV4KS9pLCAvLyBCZU9TL09TMi9BbWlnYU9TL01vcnBoT1MvT3BlblZNUy9GdWNoc2lhL0hQLVVYXG4gICAgICAgIC8odW5peCkgPyhbXFx3XFwuXSopL2kgLy8gVU5JWFxuICAgICAgXSxcbiAgICAgIFtOQU1FLCBWRVJTSU9OXVxuICAgIF1cbiAgfTtcblxuICAvLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBDb25zdHJ1Y3RvclxuICAvLy8vLy8vLy8vLy8vLy8vXG5cbiAgdmFyIFVBUGFyc2VyID0gZnVuY3Rpb24gKHVhLCBleHRlbnNpb25zKSB7XG4gICAgaWYgKHR5cGVvZiB1YSA9PT0gT0JKX1RZUEUpIHtcbiAgICAgIGV4dGVuc2lvbnMgPSB1YTtcbiAgICAgIHVhID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBVQVBhcnNlcikpIHtcbiAgICAgIHJldHVybiBuZXcgVUFQYXJzZXIodWEsIGV4dGVuc2lvbnMpLmdldFJlc3VsdCgpO1xuICAgIH1cblxuICAgIHZhciBfdWEgPVxuICAgICAgdWEgfHxcbiAgICAgICh0eXBlb2Ygd2luZG93ICE9PSBVTkRFRl9UWVBFICYmXG4gICAgICB3aW5kb3cubmF2aWdhdG9yICYmXG4gICAgICB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCA/IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50IDogRU1QVFkpO1xuICAgIHZhciBfcmd4bWFwID0gZXh0ZW5zaW9ucyA/IGV4dGVuZChyZWdleGVzLCBleHRlbnNpb25zKSA6IHJlZ2V4ZXM7XG5cbiAgICB0aGlzLmdldEJyb3dzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2Jyb3dzZXIgPSB7fTtcbiAgICAgIF9icm93c2VyW05BTUVdID0gdW5kZWZpbmVkO1xuICAgICAgX2Jyb3dzZXJbVkVSU0lPTl0gPSB1bmRlZmluZWQ7XG4gICAgICByZ3hNYXBwZXIuY2FsbChfYnJvd3NlciwgX3VhLCBfcmd4bWFwLmJyb3dzZXIpO1xuICAgICAgX2Jyb3dzZXIubWFqb3IgPSBtYWpvcml6ZShfYnJvd3Nlci52ZXJzaW9uKTtcbiAgICAgIHJldHVybiBfYnJvd3NlcjtcbiAgICB9O1xuICAgIHRoaXMuZ2V0Q1BVID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9jcHUgPSB7fTtcbiAgICAgIF9jcHVbQVJDSElURUNUVVJFXSA9IHVuZGVmaW5lZDtcbiAgICAgIHJneE1hcHBlci5jYWxsKF9jcHUsIF91YSwgX3JneG1hcC5jcHUpO1xuICAgICAgcmV0dXJuIF9jcHU7XG4gICAgfTtcbiAgICB0aGlzLmdldERldmljZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfZGV2aWNlID0ge307XG4gICAgICBfZGV2aWNlW1ZFTkRPUl0gPSB1bmRlZmluZWQ7XG4gICAgICBfZGV2aWNlW01PREVMXSA9IHVuZGVmaW5lZDtcbiAgICAgIF9kZXZpY2VbVFlQRV0gPSB1bmRlZmluZWQ7XG4gICAgICByZ3hNYXBwZXIuY2FsbChfZGV2aWNlLCBfdWEsIF9yZ3htYXAuZGV2aWNlKTtcbiAgICAgIHJldHVybiBfZGV2aWNlO1xuICAgIH07XG4gICAgdGhpcy5nZXRFbmdpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2VuZ2luZSA9IHt9O1xuICAgICAgX2VuZ2luZVtOQU1FXSA9IHVuZGVmaW5lZDtcbiAgICAgIF9lbmdpbmVbVkVSU0lPTl0gPSB1bmRlZmluZWQ7XG4gICAgICByZ3hNYXBwZXIuY2FsbChfZW5naW5lLCBfdWEsIF9yZ3htYXAuZW5naW5lKTtcbiAgICAgIHJldHVybiBfZW5naW5lO1xuICAgIH07XG4gICAgdGhpcy5nZXRPUyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfb3MgPSB7fTtcbiAgICAgIF9vc1tOQU1FXSA9IHVuZGVmaW5lZDtcbiAgICAgIF9vc1tWRVJTSU9OXSA9IHVuZGVmaW5lZDtcbiAgICAgIHJneE1hcHBlci5jYWxsKF9vcywgX3VhLCBfcmd4bWFwLm9zKTtcbiAgICAgIHJldHVybiBfb3M7XG4gICAgfTtcbiAgICB0aGlzLmdldFJlc3VsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVhOiB0aGlzLmdldFVBKCksXG4gICAgICAgIGJyb3dzZXI6IHRoaXMuZ2V0QnJvd3NlcigpLFxuICAgICAgICBlbmdpbmU6IHRoaXMuZ2V0RW5naW5lKCksXG4gICAgICAgIG9zOiB0aGlzLmdldE9TKCksXG4gICAgICAgIGRldmljZTogdGhpcy5nZXREZXZpY2UoKSxcbiAgICAgICAgY3B1OiB0aGlzLmdldENQVSgpXG4gICAgICB9O1xuICAgIH07XG4gICAgdGhpcy5nZXRVQSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdWE7XG4gICAgfTtcbiAgICB0aGlzLnNldFVBID0gZnVuY3Rpb24gKHVhKSB7XG4gICAgICBfdWEgPVxuICAgICAgICB0eXBlb2YgdWEgPT09IFNUUl9UWVBFICYmIHVhLmxlbmd0aCA+IFVBX01BWF9MRU5HVEggPyB0cmltKHVhLCBVQV9NQVhfTEVOR1RIKSA6IHVhO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICB0aGlzLnNldFVBKF91YSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgVUFQYXJzZXIuVkVSU0lPTiA9IExJQlZFUlNJT047XG4gIFVBUGFyc2VyLkJST1dTRVIgPSBlbnVtZXJpemUoW05BTUUsIFZFUlNJT04sIE1BSk9SXSk7XG4gIFVBUGFyc2VyLkNQVSA9IGVudW1lcml6ZShbQVJDSElURUNUVVJFXSk7XG4gIFVBUGFyc2VyLkRFVklDRSA9IGVudW1lcml6ZShbXG4gICAgTU9ERUwsXG4gICAgVkVORE9SLFxuICAgIFRZUEUsXG4gICAgQ09OU09MRSxcbiAgICBNT0JJTEUsXG4gICAgU01BUlRUVixcbiAgICBUQUJMRVQsXG4gICAgV0VBUkFCTEUsXG4gICAgRU1CRURERURcbiAgXSk7XG4gIFVBUGFyc2VyLkVOR0lORSA9IFVBUGFyc2VyLk9TID0gZW51bWVyaXplKFtOQU1FLCBWRVJTSU9OXSk7XG5cbiAgLy8vLy8vLy8vLy9cbiAgLy8gRXhwb3J0XG4gIC8vLy8vLy8vLy9cblxuICAvLyBjaGVjayBqcyBlbnZpcm9ubWVudFxuICBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFVOREVGX1RZUEUpIHtcbiAgICAvLyBub2RlanMgZW52XG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09IFVOREVGX1RZUEUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IFVBUGFyc2VyO1xuICAgIH1cbiAgICBleHBvcnRzLlVBUGFyc2VyID0gVUFQYXJzZXI7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVxdWlyZWpzIGVudiAob3B0aW9uYWwpXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IEZVTkNfVFlQRSAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICBkZWZpbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gVUFQYXJzZXI7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFVOREVGX1RZUEUpIHtcbiAgICAgIC8vIGJyb3dzZXIgZW52XG4gICAgICB3aW5kb3cuVUFQYXJzZXIgPSBVQVBhcnNlcjtcbiAgICB9XG4gIH1cblxuICAvLyBqUXVlcnkvWmVwdG8gc3BlY2lmaWMgKG9wdGlvbmFsKVxuICAvLyBOb3RlOlxuICAvLyAgIEluIEFNRCBlbnYgdGhlIGdsb2JhbCBzY29wZSBzaG91bGQgYmUga2VwdCBjbGVhbiwgYnV0IGpRdWVyeSBpcyBhbiBleGNlcHRpb24uXG4gIC8vICAgalF1ZXJ5IGFsd2F5cyBleHBvcnRzIHRvIGdsb2JhbCBzY29wZSwgdW5sZXNzIGpRdWVyeS5ub0NvbmZsaWN0KHRydWUpIGlzIHVzZWQsXG4gIC8vICAgYW5kIHdlIHNob3VsZCBjYXRjaCB0aGF0LlxuICB2YXIgJCA9IHR5cGVvZiB3aW5kb3cgIT09IFVOREVGX1RZUEUgJiYgKHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvKTtcbiAgaWYgKCQgJiYgISQudWEpIHtcbiAgICB2YXIgcGFyc2VyID0gbmV3IFVBUGFyc2VyKCk7XG4gICAgJC51YSA9IHBhcnNlci5nZXRSZXN1bHQoKTtcbiAgICAkLnVhLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBwYXJzZXIuZ2V0VUEoKTtcbiAgICB9O1xuICAgICQudWEuc2V0ID0gZnVuY3Rpb24gKHVhKSB7XG4gICAgICBwYXJzZXIuc2V0VUEodWEpO1xuICAgICAgdmFyIHJlc3VsdCA9IHBhcnNlci5nZXRSZXN1bHQoKTtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gcmVzdWx0KSB7XG4gICAgICAgICQudWFbcHJvcF0gPSByZXN1bHRbcHJvcF07XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSkodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6IHRoaXMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+ua-parser-js@0.7.33/node_modules/@amplitude/ua-parser-js/src/ua-parser.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/base36.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/base36.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEVICE_ID_LENGTH: function() { return /* binding */ DEVICE_ID_LENGTH; },\n/* harmony export */   generateBase36Id: function() { return /* binding */ generateBase36Id; }\n/* harmony export */ });\nvar DEVICE_ID_LENGTH = 25;\nvar BASE_36_CHARACTER_SET = 'abcdefghijklmnopqrstuvwxyz0123456789';\nvar BASE_36_RADIX = 36;\n/** Generates a random sequence of base 36 characters to the specified length */\nvar generateBase36Id = function (idLength) {\n    if (idLength === void 0) { idLength = DEVICE_ID_LENGTH; }\n    var stringBuilder = '';\n    for (var idx = 0; idx < idLength; idx++) {\n        var nextChar = BASE_36_CHARACTER_SET.charAt(Math.floor(Math.random() * BASE_36_RADIX));\n        stringBuilder += nextChar;\n    }\n    return stringBuilder;\n};\n//# sourceMappingURL=base36.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdXRpbHNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3V0aWxzL2VzbS9zcmMvYmFzZTM2LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQLCtCQUErQjtBQUMvQjtBQUNBLHNCQUFzQixnQkFBZ0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFtcGxpdHVkZSt1dGlsc0AxLjEwLjIvbm9kZV9tb2R1bGVzL0BhbXBsaXR1ZGUvdXRpbHMvZXNtL3NyYy9iYXNlMzYuanM/MGY3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIERFVklDRV9JRF9MRU5HVEggPSAyNTtcbnZhciBCQVNFXzM2X0NIQVJBQ1RFUl9TRVQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JztcbnZhciBCQVNFXzM2X1JBRElYID0gMzY7XG4vKiogR2VuZXJhdGVzIGEgcmFuZG9tIHNlcXVlbmNlIG9mIGJhc2UgMzYgY2hhcmFjdGVycyB0byB0aGUgc3BlY2lmaWVkIGxlbmd0aCAqL1xuZXhwb3J0IHZhciBnZW5lcmF0ZUJhc2UzNklkID0gZnVuY3Rpb24gKGlkTGVuZ3RoKSB7XG4gICAgaWYgKGlkTGVuZ3RoID09PSB2b2lkIDApIHsgaWRMZW5ndGggPSBERVZJQ0VfSURfTEVOR1RIOyB9XG4gICAgdmFyIHN0cmluZ0J1aWxkZXIgPSAnJztcbiAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBpZExlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgdmFyIG5leHRDaGFyID0gQkFTRV8zNl9DSEFSQUNURVJfU0VULmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBCQVNFXzM2X1JBRElYKSk7XG4gICAgICAgIHN0cmluZ0J1aWxkZXIgKz0gbmV4dENoYXI7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmdCdWlsZGVyO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UzNi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/base36.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/index.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/index.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncQueue: function() { return /* reexport safe */ _queue__WEBPACK_IMPORTED_MODULE_3__.AsyncQueue; },\n/* harmony export */   DEVICE_ID_LENGTH: function() { return /* reexport safe */ _base36__WEBPACK_IMPORTED_MODULE_0__.DEVICE_ID_LENGTH; },\n/* harmony export */   asyncSleep: function() { return /* reexport safe */ _misc__WEBPACK_IMPORTED_MODULE_2__.asyncSleep; },\n/* harmony export */   collectInvalidEventIndices: function() { return /* reexport safe */ _response__WEBPACK_IMPORTED_MODULE_4__.collectInvalidEventIndices; },\n/* harmony export */   generateBase36Id: function() { return /* reexport safe */ _base36__WEBPACK_IMPORTED_MODULE_0__.generateBase36Id; },\n/* harmony export */   getGlobalAmplitudeNamespace: function() { return /* reexport safe */ _misc__WEBPACK_IMPORTED_MODULE_2__.getGlobalAmplitudeNamespace; },\n/* harmony export */   isBrowserEnv: function() { return /* reexport safe */ _misc__WEBPACK_IMPORTED_MODULE_2__.isBrowserEnv; },\n/* harmony export */   isNodeEnv: function() { return /* reexport safe */ _misc__WEBPACK_IMPORTED_MODULE_2__.isNodeEnv; },\n/* harmony export */   isValidEvent: function() { return /* reexport safe */ _validate__WEBPACK_IMPORTED_MODULE_6__.isValidEvent; },\n/* harmony export */   isValidProperties: function() { return /* reexport safe */ _validateProperties__WEBPACK_IMPORTED_MODULE_7__.isValidProperties; },\n/* harmony export */   logger: function() { return /* reexport safe */ _logger__WEBPACK_IMPORTED_MODULE_1__.logger; },\n/* harmony export */   mapHttpCodeToStatus: function() { return /* reexport safe */ _status__WEBPACK_IMPORTED_MODULE_5__.mapHttpCodeToStatus; },\n/* harmony export */   mapHttpMessageToResponse: function() { return /* reexport safe */ _response__WEBPACK_IMPORTED_MODULE_4__.mapHttpMessageToResponse; },\n/* harmony export */   mapJSONToResponse: function() { return /* reexport safe */ _response__WEBPACK_IMPORTED_MODULE_4__.mapJSONToResponse; },\n/* harmony export */   prototypeJsFix: function() { return /* reexport safe */ _misc__WEBPACK_IMPORTED_MODULE_2__.prototypeJsFix; }\n/* harmony export */ });\n/* harmony import */ var _base36__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base36 */ \"../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/base36.js\");\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger */ \"../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/logger.js\");\n/* harmony import */ var _misc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./misc */ \"../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/misc.js\");\n/* harmony import */ var _queue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./queue */ \"../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/queue.js\");\n/* harmony import */ var _response__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./response */ \"../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/response.js\");\n/* harmony import */ var _status__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./status */ \"../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/status.js\");\n/* harmony import */ var _validate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate */ \"../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/validate.js\");\n/* harmony import */ var _validateProperties__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./validateProperties */ \"../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/validateProperties.js\");\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdXRpbHNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3V0aWxzL2VzbS9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEQ7QUFDNUI7QUFDd0U7QUFDckU7QUFDZ0U7QUFDdEQ7QUFDTDtBQUNlO0FBQ3pEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFtcGxpdHVkZSt1dGlsc0AxLjEwLjIvbm9kZV9tb2R1bGVzL0BhbXBsaXR1ZGUvdXRpbHMvZXNtL3NyYy9pbmRleC5qcz9hYjNmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGdlbmVyYXRlQmFzZTM2SWQsIERFVklDRV9JRF9MRU5HVEggfSBmcm9tICcuL2Jhc2UzNic7XG5leHBvcnQgeyBsb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5leHBvcnQgeyBhc3luY1NsZWVwLCBnZXRHbG9iYWxBbXBsaXR1ZGVOYW1lc3BhY2UsIGlzQnJvd3NlckVudiwgaXNOb2RlRW52LCBwcm90b3R5cGVKc0ZpeCB9IGZyb20gJy4vbWlzYyc7XG5leHBvcnQgeyBBc3luY1F1ZXVlIH0gZnJvbSAnLi9xdWV1ZSc7XG5leHBvcnQgeyBjb2xsZWN0SW52YWxpZEV2ZW50SW5kaWNlcywgbWFwSHR0cE1lc3NhZ2VUb1Jlc3BvbnNlLCBtYXBKU09OVG9SZXNwb25zZSB9IGZyb20gJy4vcmVzcG9uc2UnO1xuZXhwb3J0IHsgbWFwSHR0cENvZGVUb1N0YXR1cyB9IGZyb20gJy4vc3RhdHVzJztcbmV4cG9ydCB7IGlzVmFsaWRFdmVudCB9IGZyb20gJy4vdmFsaWRhdGUnO1xuZXhwb3J0IHsgaXNWYWxpZFByb3BlcnRpZXMgfSBmcm9tICcuL3ZhbGlkYXRlUHJvcGVydGllcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/index.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/logger.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/logger.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: function() { return /* binding */ logger; }\n/* harmony export */ });\n/* harmony import */ var _amplitude_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @amplitude/types */ \"../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/index.js\");\n/* harmony import */ var _misc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc */ \"../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/misc.js\");\n\n\n// TODO: Type the global constant\nvar globalNamespace = (0,_misc__WEBPACK_IMPORTED_MODULE_0__.getGlobalAmplitudeNamespace)();\n/** Prefix for logging strings */\nvar PREFIX = 'Amplitude Logger ';\n/** JSDoc */\nvar Logger = /** @class */ (function () {\n    /** JSDoc */\n    function Logger() {\n        this._logLevel = 0;\n    }\n    /** JSDoc */\n    Logger.prototype.disable = function () {\n        this._logLevel = 0;\n    };\n    /** JSDoc */\n    Logger.prototype.enable = function (logLevel) {\n        if (logLevel === void 0) { logLevel = _amplitude_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.Warn; }\n        this._logLevel = logLevel;\n    };\n    /** JSDoc */\n    Logger.prototype.log = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this._logLevel < _amplitude_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.Verbose) {\n            return;\n        }\n        __webpack_require__.g.console.log(PREFIX + \"[Log]: \" + args.join(' ')); // tslint:disable-line:no-console\n    };\n    /** JSDoc */\n    Logger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this._logLevel < _amplitude_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.Warn) {\n            return;\n        }\n        __webpack_require__.g.console.warn(PREFIX + \"[Warn]: \" + args.join(' ')); // tslint:disable-line:no-console\n    };\n    /** JSDoc */\n    Logger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (this._logLevel < _amplitude_types__WEBPACK_IMPORTED_MODULE_1__.LogLevel.Error) {\n            return;\n        }\n        __webpack_require__.g.console.error(PREFIX + \"[Error]: \" + args.join(' ')); // tslint:disable-line:no-console\n    };\n    return Logger;\n}());\n// Ensure we only have a single logger instance, even if multiple versions of @amplitude/utils are being used\nvar logger = globalNamespace.logger;\nif (logger === undefined) {\n    logger = new Logger();\n    globalNamespace.logger = logger;\n}\n\n//# sourceMappingURL=logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdXRpbHNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3V0aWxzL2VzbS9zcmMvbG9nZ2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QztBQUNTO0FBQ3JEO0FBQ0Esc0JBQXNCLGtFQUEyQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLFdBQVcsc0RBQVE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1QkFBdUI7QUFDaEQ7QUFDQTtBQUNBLDZCQUE2QixzREFBUTtBQUNyQztBQUNBO0FBQ0EsUUFBUSxxQkFBTSxtREFBbUQ7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUJBQXVCO0FBQ2hEO0FBQ0E7QUFDQSw2QkFBNkIsc0RBQVE7QUFDckM7QUFDQTtBQUNBLFFBQVEscUJBQU0scURBQXFEO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHVCQUF1QjtBQUNoRDtBQUNBO0FBQ0EsNkJBQTZCLHNEQUFRO0FBQ3JDO0FBQ0E7QUFDQSxRQUFRLHFCQUFNLHVEQUF1RDtBQUNyRTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdXRpbHNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3V0aWxzL2VzbS9zcmMvbG9nZ2VyLmpzPzA2NWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tICdAYW1wbGl0dWRlL3R5cGVzJztcbmltcG9ydCB7IGdldEdsb2JhbEFtcGxpdHVkZU5hbWVzcGFjZSB9IGZyb20gJy4vbWlzYyc7XG4vLyBUT0RPOiBUeXBlIHRoZSBnbG9iYWwgY29uc3RhbnRcbnZhciBnbG9iYWxOYW1lc3BhY2UgPSBnZXRHbG9iYWxBbXBsaXR1ZGVOYW1lc3BhY2UoKTtcbi8qKiBQcmVmaXggZm9yIGxvZ2dpbmcgc3RyaW5ncyAqL1xudmFyIFBSRUZJWCA9ICdBbXBsaXR1ZGUgTG9nZ2VyICc7XG4vKiogSlNEb2MgKi9cbnZhciBMb2dnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqIEpTRG9jICovXG4gICAgZnVuY3Rpb24gTG9nZ2VyKCkge1xuICAgICAgICB0aGlzLl9sb2dMZXZlbCA9IDA7XG4gICAgfVxuICAgIC8qKiBKU0RvYyAqL1xuICAgIExvZ2dlci5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fbG9nTGV2ZWwgPSAwO1xuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAobG9nTGV2ZWwpIHtcbiAgICAgICAgaWYgKGxvZ0xldmVsID09PSB2b2lkIDApIHsgbG9nTGV2ZWwgPSBMb2dMZXZlbC5XYXJuOyB9XG4gICAgICAgIHRoaXMuX2xvZ0xldmVsID0gbG9nTGV2ZWw7XG4gICAgfTtcbiAgICAvKiogSlNEb2MgKi9cbiAgICBMb2dnZXIucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbG9nTGV2ZWwgPCBMb2dMZXZlbC5WZXJib3NlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZ2xvYmFsLmNvbnNvbGUubG9nKFBSRUZJWCArIFwiW0xvZ106IFwiICsgYXJncy5qb2luKCcgJykpOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLWNvbnNvbGVcbiAgICB9O1xuICAgIC8qKiBKU0RvYyAqL1xuICAgIExvZ2dlci5wcm90b3R5cGUud2FybiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbG9nTGV2ZWwgPCBMb2dMZXZlbC5XYXJuKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZ2xvYmFsLmNvbnNvbGUud2FybihQUkVGSVggKyBcIltXYXJuXTogXCIgKyBhcmdzLmpvaW4oJyAnKSk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tY29uc29sZVxuICAgIH07XG4gICAgLyoqIEpTRG9jICovXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbG9nTGV2ZWwgPCBMb2dMZXZlbC5FcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGdsb2JhbC5jb25zb2xlLmVycm9yKFBSRUZJWCArIFwiW0Vycm9yXTogXCIgKyBhcmdzLmpvaW4oJyAnKSk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tY29uc29sZVxuICAgIH07XG4gICAgcmV0dXJuIExvZ2dlcjtcbn0oKSk7XG4vLyBFbnN1cmUgd2Ugb25seSBoYXZlIGEgc2luZ2xlIGxvZ2dlciBpbnN0YW5jZSwgZXZlbiBpZiBtdWx0aXBsZSB2ZXJzaW9ucyBvZiBAYW1wbGl0dWRlL3V0aWxzIGFyZSBiZWluZyB1c2VkXG52YXIgbG9nZ2VyID0gZ2xvYmFsTmFtZXNwYWNlLmxvZ2dlcjtcbmlmIChsb2dnZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIGxvZ2dlciA9IG5ldyBMb2dnZXIoKTtcbiAgICBnbG9iYWxOYW1lc3BhY2UubG9nZ2VyID0gbG9nZ2VyO1xufVxuZXhwb3J0IHsgbG9nZ2VyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/logger.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/misc.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/misc.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asyncSleep: function() { return /* binding */ asyncSleep; },\n/* harmony export */   getGlobalAmplitudeNamespace: function() { return /* binding */ getGlobalAmplitudeNamespace; },\n/* harmony export */   getGlobalObject: function() { return /* binding */ getGlobalObject; },\n/* harmony export */   isBrowserEnv: function() { return /* binding */ isBrowserEnv; },\n/* harmony export */   isNodeEnv: function() { return /* binding */ isNodeEnv; },\n/* harmony export */   prototypeJsFix: function() { return /* binding */ prototypeJsFix; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"../../node_modules/.pnpm/tslib@2.7.0/node_modules/tslib/tslib.es6.mjs\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/polyfills/process.js\");\n\n/**\n * Checks whether we're in a Node.js environment\n *\n * @returns Answer to given question\n */\nfunction isNodeEnv() {\n    var _a;\n    return typeof process === 'object' && ((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) !== undefined;\n}\n/**\n * Checks whether we're in a browser environment\n *\n * @returns Answer to given question\n */\nfunction isBrowserEnv() {\n    return typeof window === 'object' && (window === null || window === void 0 ? void 0 : window.document) !== undefined;\n}\nvar fallbackGlobalObject = {};\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nvar getGlobalObject = function () {\n    if (isNodeEnv()) {\n        return __webpack_require__.g;\n    }\n    else if (typeof window !== 'undefined') {\n        return window;\n    }\n    else if (typeof self !== 'undefined') {\n        return self;\n    }\n    else {\n        return fallbackGlobalObject;\n    }\n};\nvar getGlobalAmplitudeNamespace = function () {\n    var global = getGlobalObject();\n    if (global.__AMPLITUDE__ === undefined) {\n        global.__AMPLITUDE__ = {};\n    }\n    return global.__AMPLITUDE__;\n};\n/**\n * A promise-based way to sleep for x millseconds, then queue ourselves back to the\n * JS event loop.\n *\n * @param milliseconds The number of milliseconds to wait for\n */\nvar asyncSleep = function (milliseconds) { return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function () {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {\n        switch (_a.label) {\n            case 0: return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, milliseconds); })];\n            case 1: return [2 /*return*/, _a.sent()];\n        }\n    });\n}); };\n/**\n * Fixes browser edge case where Prototype.js injects Array.prototype.toJSON and breaks the built-in JSON.stringify()\n *\n * @returns true if Array.prototype.toJSON was deleted, false if not\n */\nvar prototypeJsFix = function () {\n    var _a;\n    if (isBrowserEnv()) {\n        var augmentedWindow = window;\n        var augmentedArray = Array;\n        if (augmentedWindow.Prototype !== undefined && ((_a = augmentedArray.prototype) === null || _a === void 0 ? void 0 : _a.toJSON) !== undefined) {\n            delete augmentedArray.prototype.toJSON;\n            return true;\n        }\n    }\n    return false;\n};\n//# sourceMappingURL=misc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdXRpbHNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3V0aWxzL2VzbS9zcmMvbWlzYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGtCQUFrQixPQUFPLHdCQUF3QixPQUFPLGFBQWEsT0FBTyx1QkFBdUIsT0FBTztBQUMxRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsZUFBZSxxQkFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywyQ0FBMkMsT0FBTyxnREFBUztBQUNsRSxXQUFXLGtEQUFXO0FBQ3RCO0FBQ0EsMEVBQTBFLDJDQUEyQztBQUNySDtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYW1wbGl0dWRlK3V0aWxzQDEuMTAuMi9ub2RlX21vZHVsZXMvQGFtcGxpdHVkZS91dGlscy9lc20vc3JjL21pc2MuanM/MzhjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHdlJ3JlIGluIGEgTm9kZS5qcyBlbnZpcm9ubWVudFxuICpcbiAqIEByZXR1cm5zIEFuc3dlciB0byBnaXZlbiBxdWVzdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlRW52KCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gdHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmICgoX2EgPSBwcm9jZXNzID09PSBudWxsIHx8IHByb2Nlc3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByb2Nlc3MudmVyc2lvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ub2RlKSAhPT0gdW5kZWZpbmVkO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB3ZSdyZSBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gZ2l2ZW4gcXVlc3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgKHdpbmRvdyA9PT0gbnVsbCB8fCB3aW5kb3cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdpbmRvdy5kb2N1bWVudCkgIT09IHVuZGVmaW5lZDtcbn1cbnZhciBmYWxsYmFja0dsb2JhbE9iamVjdCA9IHt9O1xuLyoqXG4gKiBTYWZlbHkgZ2V0IGdsb2JhbCBzY29wZSBvYmplY3RcbiAqXG4gKiBAcmV0dXJucyBHbG9iYWwgc2NvcGUgb2JqZWN0XG4gKi9cbmV4cG9ydCB2YXIgZ2V0R2xvYmFsT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc05vZGVFbnYoKSkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2tHbG9iYWxPYmplY3Q7XG4gICAgfVxufTtcbmV4cG9ydCB2YXIgZ2V0R2xvYmFsQW1wbGl0dWRlTmFtZXNwYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBnbG9iYWwgPSBnZXRHbG9iYWxPYmplY3QoKTtcbiAgICBpZiAoZ2xvYmFsLl9fQU1QTElUVURFX18gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBnbG9iYWwuX19BTVBMSVRVREVfXyA9IHt9O1xuICAgIH1cbiAgICByZXR1cm4gZ2xvYmFsLl9fQU1QTElUVURFX187XG59O1xuLyoqXG4gKiBBIHByb21pc2UtYmFzZWQgd2F5IHRvIHNsZWVwIGZvciB4IG1pbGxzZWNvbmRzLCB0aGVuIHF1ZXVlIG91cnNlbHZlcyBiYWNrIHRvIHRoZVxuICogSlMgZXZlbnQgbG9vcC5cbiAqXG4gKiBAcGFyYW0gbWlsbGlzZWNvbmRzIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgZm9yXG4gKi9cbmV4cG9ydCB2YXIgYXN5bmNTbGVlcCA9IGZ1bmN0aW9uIChtaWxsaXNlY29uZHMpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmUsIG1pbGxpc2Vjb25kcyk7IH0pXTtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9O1xuLyoqXG4gKiBGaXhlcyBicm93c2VyIGVkZ2UgY2FzZSB3aGVyZSBQcm90b3R5cGUuanMgaW5qZWN0cyBBcnJheS5wcm90b3R5cGUudG9KU09OIGFuZCBicmVha3MgdGhlIGJ1aWx0LWluIEpTT04uc3RyaW5naWZ5KClcbiAqXG4gKiBAcmV0dXJucyB0cnVlIGlmIEFycmF5LnByb3RvdHlwZS50b0pTT04gd2FzIGRlbGV0ZWQsIGZhbHNlIGlmIG5vdFxuICovXG5leHBvcnQgdmFyIHByb3RvdHlwZUpzRml4ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoaXNCcm93c2VyRW52KCkpIHtcbiAgICAgICAgdmFyIGF1Z21lbnRlZFdpbmRvdyA9IHdpbmRvdztcbiAgICAgICAgdmFyIGF1Z21lbnRlZEFycmF5ID0gQXJyYXk7XG4gICAgICAgIGlmIChhdWdtZW50ZWRXaW5kb3cuUHJvdG90eXBlICE9PSB1bmRlZmluZWQgJiYgKChfYSA9IGF1Z21lbnRlZEFycmF5LnByb3RvdHlwZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvSlNPTikgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGVsZXRlIGF1Z21lbnRlZEFycmF5LnByb3RvdHlwZS50b0pTT047XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlzYy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/misc.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/queue.js":
/*!*******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/queue.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncQueue: function() { return /* binding */ AsyncQueue; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"../../node_modules/.pnpm/tslib@2.7.0/node_modules/tslib/tslib.es6.mjs\");\n\n/**\n * Helper utility that processes promises one by one in the order they arrive,\n * with an optional time-out value.\n */\nvar AsyncQueue = /** @class */ (function () {\n    function AsyncQueue() {\n        this._promiseQueue = [];\n        this._promiseInProgress = false;\n    }\n    // Awaits the finish of all promises that have been queued up before it\n    // And will expire itself (reject the promise) after waiting limit ms\n    // or never expire, if limit is not set\n    AsyncQueue.prototype.addToQueue = function (promiseGenerator) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {\n            var _this = this;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {\n                            // The callback that will start the promise resolution\n                            var startPromise = function () { return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(_this, void 0, void 0, function () {\n                                var resp, err_1;\n                                return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            this._promiseInProgress = true;\n                                            _a.label = 1;\n                                        case 1:\n                                            _a.trys.push([1, 3, 4, 5]);\n                                            return [4 /*yield*/, promiseGenerator()];\n                                        case 2:\n                                            resp = _a.sent();\n                                            resolve(resp);\n                                            return [3 /*break*/, 5];\n                                        case 3:\n                                            err_1 = _a.sent();\n                                            reject(err_1);\n                                            return [3 /*break*/, 5];\n                                        case 4:\n                                            this._notifyUploadFinish();\n                                            return [7 /*endfinally*/];\n                                        case 5: return [2 /*return*/];\n                                    }\n                                });\n                            }); };\n                            // If there is no promise in progress\n                            // Return immediately\n                            if (!_this._promiseInProgress) {\n                                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                                startPromise();\n                                return;\n                            }\n                            var queueObject = {\n                                startPromise: startPromise,\n                            };\n                            _this._promiseQueue.push(queueObject);\n                        })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    // Notify the oldest awaiting promise that the queue is ready to process another promise\n    AsyncQueue.prototype._notifyUploadFinish = function () {\n        this._promiseInProgress = false;\n        var oldestPromise = this._promiseQueue.shift();\n        if (oldestPromise !== undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            oldestPromise.startPromise();\n        }\n    };\n    return AsyncQueue;\n}());\n\n//# sourceMappingURL=queue.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdXRpbHNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3V0aWxzL2VzbS9zcmMvcXVldWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdEQUFTO0FBQ3hCO0FBQ0EsbUJBQW1CLGtEQUFXO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxPQUFPLGdEQUFTO0FBQzdFO0FBQ0EsdUNBQXVDLGtEQUFXO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDcUI7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AYW1wbGl0dWRlK3V0aWxzQDEuMTAuMi9ub2RlX21vZHVsZXMvQGFtcGxpdHVkZS91dGlscy9lc20vc3JjL3F1ZXVlLmpzPzQ1YWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hd2FpdGVyLCBfX2dlbmVyYXRvciB9IGZyb20gXCJ0c2xpYlwiO1xuLyoqXG4gKiBIZWxwZXIgdXRpbGl0eSB0aGF0IHByb2Nlc3NlcyBwcm9taXNlcyBvbmUgYnkgb25lIGluIHRoZSBvcmRlciB0aGV5IGFycml2ZSxcbiAqIHdpdGggYW4gb3B0aW9uYWwgdGltZS1vdXQgdmFsdWUuXG4gKi9cbnZhciBBc3luY1F1ZXVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFzeW5jUXVldWUoKSB7XG4gICAgICAgIHRoaXMuX3Byb21pc2VRdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLl9wcm9taXNlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgIH1cbiAgICAvLyBBd2FpdHMgdGhlIGZpbmlzaCBvZiBhbGwgcHJvbWlzZXMgdGhhdCBoYXZlIGJlZW4gcXVldWVkIHVwIGJlZm9yZSBpdFxuICAgIC8vIEFuZCB3aWxsIGV4cGlyZSBpdHNlbGYgKHJlamVjdCB0aGUgcHJvbWlzZSkgYWZ0ZXIgd2FpdGluZyBsaW1pdCBtc1xuICAgIC8vIG9yIG5ldmVyIGV4cGlyZSwgaWYgbGltaXQgaXMgbm90IHNldFxuICAgIEFzeW5jUXVldWUucHJvdG90eXBlLmFkZFRvUXVldWUgPSBmdW5jdGlvbiAocHJvbWlzZUdlbmVyYXRvcikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGNhbGxiYWNrIHRoYXQgd2lsbCBzdGFydCB0aGUgcHJvbWlzZSByZXNvbHV0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0UHJvbWlzZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3AsIGVycl8xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9taXNlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgMywgNCwgNV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBwcm9taXNlR2VuZXJhdG9yKCldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJfMSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycl8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ub3RpZnlVcGxvYWRGaW5pc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7IH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gcHJvbWlzZSBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMuX3Byb21pc2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQcm9taXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF1ZXVlT2JqZWN0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFByb21pc2U6IHN0YXJ0UHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9wcm9taXNlUXVldWUucHVzaChxdWV1ZU9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gTm90aWZ5IHRoZSBvbGRlc3QgYXdhaXRpbmcgcHJvbWlzZSB0aGF0IHRoZSBxdWV1ZSBpcyByZWFkeSB0byBwcm9jZXNzIGFub3RoZXIgcHJvbWlzZVxuICAgIEFzeW5jUXVldWUucHJvdG90eXBlLl9ub3RpZnlVcGxvYWRGaW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Byb21pc2VJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIHZhciBvbGRlc3RQcm9taXNlID0gdGhpcy5fcHJvbWlzZVF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIGlmIChvbGRlc3RQcm9taXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgICAgIG9sZGVzdFByb21pc2Uuc3RhcnRQcm9taXNlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY1F1ZXVlO1xufSgpKTtcbmV4cG9ydCB7IEFzeW5jUXVldWUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXVlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/queue.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/response.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/response.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collectInvalidEventIndices: function() { return /* binding */ collectInvalidEventIndices; },\n/* harmony export */   mapHttpMessageToResponse: function() { return /* binding */ mapHttpMessageToResponse; },\n/* harmony export */   mapJSONToResponse: function() { return /* binding */ mapJSONToResponse; }\n/* harmony export */ });\n/* harmony import */ var _amplitude_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @amplitude/types */ \"../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/index.js\");\n/* harmony import */ var _status__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./status */ \"../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/status.js\");\n\n\n/**\n * Collects the invalid event indices off a HTTP API v2 response\n * and returns them in increasing order.\n *\n * @param response A Response from sending an event payload\n * @returns An concatenated array of indices\n */\nvar collectInvalidEventIndices = function (response) {\n    var invalidEventIndices = new Set();\n    if (response.status === _amplitude_types__WEBPACK_IMPORTED_MODULE_0__.Status.Invalid && response.body !== undefined) {\n        var _a = response.body, eventsWithInvalidFields_1 = _a.eventsWithInvalidFields, eventsWithMissingFields_1 = _a.eventsWithMissingFields;\n        Object.keys(eventsWithInvalidFields_1).forEach(function (field) {\n            var _a;\n            var eventIndices = (_a = eventsWithInvalidFields_1[field]) !== null && _a !== void 0 ? _a : [];\n            eventIndices.forEach(function (index) {\n                invalidEventIndices.add(index);\n            });\n        });\n        Object.keys(eventsWithMissingFields_1).forEach(function (field) {\n            var _a;\n            var eventIndices = (_a = eventsWithMissingFields_1[field]) !== null && _a !== void 0 ? _a : [];\n            eventIndices.forEach(function (index) {\n                invalidEventIndices.add(index);\n            });\n        });\n    }\n    return Array.from(invalidEventIndices).sort(function (numberOne, numberTwo) { return numberOne - numberTwo; });\n};\n/**\n * Converts a http.IncomingMessage object into a Response object.\n *\n * @param httpRes The http response from the HTTP API.\n * @returns Response a nicely typed and cased response object.\n */\nvar mapHttpMessageToResponse = function (httpRes) {\n    var statusCode = httpRes.statusCode === undefined ? 0 : httpRes.statusCode;\n    var status = (0,_status__WEBPACK_IMPORTED_MODULE_1__.mapHttpCodeToStatus)(statusCode);\n    return {\n        status: status,\n        statusCode: statusCode,\n    };\n};\n/**\n * Converts the response from the HTTP V2 API into a Response object.\n * Should be used only if we are pointed towards the v2 api.\n *\n * @param responseJSON The response body from the HTTP V2 API, as a JSON blob\n * @returns Response a nicely typed and cased response object.\n */\nvar mapJSONToResponse = function (responseJSON) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    if (typeof responseJSON !== 'object') {\n        return null;\n    }\n    var status = (0,_status__WEBPACK_IMPORTED_MODULE_1__.mapHttpCodeToStatus)(responseJSON.code);\n    var statusCode = responseJSON.code;\n    switch (status) {\n        case _amplitude_types__WEBPACK_IMPORTED_MODULE_0__.Status.Success:\n            return {\n                status: status,\n                statusCode: statusCode,\n                body: {\n                    eventsIngested: responseJSON.events_ingested,\n                    payloadSizeBytes: responseJSON.payload_size_bytes,\n                    serverUploadTime: responseJSON.server_upload_time,\n                },\n            };\n        case _amplitude_types__WEBPACK_IMPORTED_MODULE_0__.Status.Invalid:\n            return {\n                status: status,\n                statusCode: statusCode,\n                body: {\n                    error: (_a = responseJSON.error) !== null && _a !== void 0 ? _a : '',\n                    missingField: (_b = responseJSON.missing_field) !== null && _b !== void 0 ? _b : null,\n                    eventsWithInvalidFields: (_c = responseJSON.events_with_invalid_fields) !== null && _c !== void 0 ? _c : {},\n                    eventsWithMissingFields: (_d = responseJSON.events_with_missing_fields) !== null && _d !== void 0 ? _d : {},\n                },\n            };\n        case _amplitude_types__WEBPACK_IMPORTED_MODULE_0__.Status.PayloadTooLarge:\n            return {\n                status: status,\n                statusCode: statusCode,\n                body: {\n                    error: (_e = responseJSON.error) !== null && _e !== void 0 ? _e : '',\n                },\n            };\n        case _amplitude_types__WEBPACK_IMPORTED_MODULE_0__.Status.RateLimit:\n            return {\n                status: status,\n                statusCode: statusCode,\n                body: {\n                    error: (_f = responseJSON.error) !== null && _f !== void 0 ? _f : '',\n                    epsThreshold: responseJSON.eps_threshold,\n                    throttledDevices: (_g = responseJSON.throttled_devices) !== null && _g !== void 0 ? _g : {},\n                    throttledUsers: (_h = responseJSON.throttled_users) !== null && _h !== void 0 ? _h : {},\n                    exceededDailyQuotaDevices: (_j = responseJSON.exceeded_daily_quota_devices) !== null && _j !== void 0 ? _j : {},\n                    exceededDailyQuotaUsers: (_k = responseJSON.exceeded_daily_quota_users) !== null && _k !== void 0 ? _k : {},\n                    throttledEvents: (_l = responseJSON.throttled_events) !== null && _l !== void 0 ? _l : [],\n                },\n            };\n        case _amplitude_types__WEBPACK_IMPORTED_MODULE_0__.Status.Timeout:\n        default:\n            return {\n                status: status,\n                statusCode: statusCode,\n            };\n    }\n};\n//# sourceMappingURL=response.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/response.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/status.js":
/*!********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/status.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mapHttpCodeToStatus: function() { return /* binding */ mapHttpCodeToStatus; }\n/* harmony export */ });\n/* harmony import */ var _amplitude_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @amplitude/types */ \"../../node_modules/.pnpm/@amplitude+types@1.10.2/node_modules/@amplitude/types/esm/src/index.js\");\n\n/**\n * Converts a HTTP status code into a {@link Status}.\n *\n * @param code The HTTP response status code.\n * @returns The send status or {@link Status.Unknown}.\n */\nfunction mapHttpCodeToStatus(code) {\n    if (code >= 200 && code < 300) {\n        return _amplitude_types__WEBPACK_IMPORTED_MODULE_0__.Status.Success;\n    }\n    if (code === 429) {\n        return _amplitude_types__WEBPACK_IMPORTED_MODULE_0__.Status.RateLimit;\n    }\n    if (code === 413) {\n        return _amplitude_types__WEBPACK_IMPORTED_MODULE_0__.Status.PayloadTooLarge;\n    }\n    if (code === 408) {\n        return _amplitude_types__WEBPACK_IMPORTED_MODULE_0__.Status.Timeout;\n    }\n    if (code >= 400 && code < 500) {\n        return _amplitude_types__WEBPACK_IMPORTED_MODULE_0__.Status.Invalid;\n    }\n    if (code >= 500) {\n        return _amplitude_types__WEBPACK_IMPORTED_MODULE_0__.Status.Failed;\n    }\n    return _amplitude_types__WEBPACK_IMPORTED_MODULE_0__.Status.Unknown;\n}\n//# sourceMappingURL=status.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdXRpbHNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3V0aWxzL2VzbS9zcmMvc3RhdHVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBDO0FBQzFDO0FBQ0EsdUNBQXVDLGFBQWE7QUFDcEQ7QUFDQTtBQUNBLGdDQUFnQyxxQkFBcUI7QUFDckQ7QUFDTztBQUNQO0FBQ0EsZUFBZSxvREFBTTtBQUNyQjtBQUNBO0FBQ0EsZUFBZSxvREFBTTtBQUNyQjtBQUNBO0FBQ0EsZUFBZSxvREFBTTtBQUNyQjtBQUNBO0FBQ0EsZUFBZSxvREFBTTtBQUNyQjtBQUNBO0FBQ0EsZUFBZSxvREFBTTtBQUNyQjtBQUNBO0FBQ0EsZUFBZSxvREFBTTtBQUNyQjtBQUNBLFdBQVcsb0RBQU07QUFDakI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdXRpbHNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3V0aWxzL2VzbS9zcmMvc3RhdHVzLmpzPzA4OGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdHVzIH0gZnJvbSAnQGFtcGxpdHVkZS90eXBlcyc7XG4vKipcbiAqIENvbnZlcnRzIGEgSFRUUCBzdGF0dXMgY29kZSBpbnRvIGEge0BsaW5rIFN0YXR1c30uXG4gKlxuICogQHBhcmFtIGNvZGUgVGhlIEhUVFAgcmVzcG9uc2Ugc3RhdHVzIGNvZGUuXG4gKiBAcmV0dXJucyBUaGUgc2VuZCBzdGF0dXMgb3Ige0BsaW5rIFN0YXR1cy5Vbmtub3dufS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcEh0dHBDb2RlVG9TdGF0dXMoY29kZSkge1xuICAgIGlmIChjb2RlID49IDIwMCAmJiBjb2RlIDwgMzAwKSB7XG4gICAgICAgIHJldHVybiBTdGF0dXMuU3VjY2VzcztcbiAgICB9XG4gICAgaWYgKGNvZGUgPT09IDQyOSkge1xuICAgICAgICByZXR1cm4gU3RhdHVzLlJhdGVMaW1pdDtcbiAgICB9XG4gICAgaWYgKGNvZGUgPT09IDQxMykge1xuICAgICAgICByZXR1cm4gU3RhdHVzLlBheWxvYWRUb29MYXJnZTtcbiAgICB9XG4gICAgaWYgKGNvZGUgPT09IDQwOCkge1xuICAgICAgICByZXR1cm4gU3RhdHVzLlRpbWVvdXQ7XG4gICAgfVxuICAgIGlmIChjb2RlID49IDQwMCAmJiBjb2RlIDwgNTAwKSB7XG4gICAgICAgIHJldHVybiBTdGF0dXMuSW52YWxpZDtcbiAgICB9XG4gICAgaWYgKGNvZGUgPj0gNTAwKSB7XG4gICAgICAgIHJldHVybiBTdGF0dXMuRmFpbGVkO1xuICAgIH1cbiAgICByZXR1cm4gU3RhdHVzLlVua25vd247XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0dXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/status.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/validate.js":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/validate.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValidEvent: function() { return /* binding */ isValidEvent; }\n/* harmony export */ });\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ \"../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/logger.js\");\n\nvar isValidEvent = function (event) {\n    if (typeof event.event_type !== 'string') {\n        _logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn('Invalid event: expected string for event_type field');\n        return false;\n    }\n    var hasDeviceId = event.device_id !== undefined;\n    var hasUserId = event.user_id !== undefined;\n    var hasEventProperties = event.event_properties !== undefined;\n    if (!hasDeviceId && !hasUserId) {\n        _logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn('Invalid event: expected at least one of device or user id');\n        return false;\n    }\n    if (hasDeviceId && typeof event.device_id !== 'string') {\n        _logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn('Invalid event: expected device id to be a string if present');\n        return false;\n    }\n    if (hasUserId && typeof event.user_id !== 'string') {\n        _logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn('Invalid event: expected user id to be a string if present');\n        return false;\n    }\n    if (hasEventProperties && typeof event.event_properties !== 'object') {\n        _logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn('Invalid event properties: expected event properties to be type object');\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=validate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdXRpbHNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3V0aWxzL2VzbS9zcmMvdmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0M7QUFDM0I7QUFDUDtBQUNBLFFBQVEsMkNBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDJDQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSwyQ0FBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBLFFBQVEsMkNBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQSxRQUFRLDJDQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdXRpbHNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3V0aWxzL2VzbS9zcmMvdmFsaWRhdGUuanM/MWM5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5leHBvcnQgdmFyIGlzVmFsaWRFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmICh0eXBlb2YgZXZlbnQuZXZlbnRfdHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ0ludmFsaWQgZXZlbnQ6IGV4cGVjdGVkIHN0cmluZyBmb3IgZXZlbnRfdHlwZSBmaWVsZCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBoYXNEZXZpY2VJZCA9IGV2ZW50LmRldmljZV9pZCAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBoYXNVc2VySWQgPSBldmVudC51c2VyX2lkICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGhhc0V2ZW50UHJvcGVydGllcyA9IGV2ZW50LmV2ZW50X3Byb3BlcnRpZXMgIT09IHVuZGVmaW5lZDtcbiAgICBpZiAoIWhhc0RldmljZUlkICYmICFoYXNVc2VySWQpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ0ludmFsaWQgZXZlbnQ6IGV4cGVjdGVkIGF0IGxlYXN0IG9uZSBvZiBkZXZpY2Ugb3IgdXNlciBpZCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChoYXNEZXZpY2VJZCAmJiB0eXBlb2YgZXZlbnQuZGV2aWNlX2lkICE9PSAnc3RyaW5nJykge1xuICAgICAgICBsb2dnZXIud2FybignSW52YWxpZCBldmVudDogZXhwZWN0ZWQgZGV2aWNlIGlkIHRvIGJlIGEgc3RyaW5nIGlmIHByZXNlbnQnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaGFzVXNlcklkICYmIHR5cGVvZiBldmVudC51c2VyX2lkICE9PSAnc3RyaW5nJykge1xuICAgICAgICBsb2dnZXIud2FybignSW52YWxpZCBldmVudDogZXhwZWN0ZWQgdXNlciBpZCB0byBiZSBhIHN0cmluZyBpZiBwcmVzZW50Jyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGhhc0V2ZW50UHJvcGVydGllcyAmJiB0eXBlb2YgZXZlbnQuZXZlbnRfcHJvcGVydGllcyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ0ludmFsaWQgZXZlbnQgcHJvcGVydGllczogZXhwZWN0ZWQgZXZlbnQgcHJvcGVydGllcyB0byBiZSB0eXBlIG9iamVjdCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/validate.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/validateProperties.js":
/*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/validateProperties.js ***!
  \********************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValidProperties: function() { return /* binding */ isValidProperties; }\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"../../node_modules/.pnpm/tslib@2.7.0/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ \"../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/logger.js\");\n\n\nvar MAX_PROPERTY_KEYS = 1000;\nvar _isValidObject = function (properties) {\n    if (Object.keys(properties).length > MAX_PROPERTY_KEYS) {\n        _logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn('too many properties. Skipping operation');\n        return false;\n    }\n    for (var key in properties) {\n        if (typeof key !== 'string') {\n            _logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn('invalid properties format. Skipping operation');\n            return false;\n        }\n        var value = properties[key];\n        if (!isValidProperties(key, value))\n            return false;\n    }\n    return true;\n};\nvar isValidProperties = function (property, value) {\n    var e_1, _a;\n    if (typeof property !== 'string')\n        return false;\n    if (Array.isArray(value)) {\n        try {\n            for (var value_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__values)(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {\n                var valueElement = value_1_1.value;\n                if (Array.isArray(valueElement)) {\n                    _logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn('invalid array element type ', typeof valueElement);\n                    return false;\n                }\n                else if (typeof valueElement === 'object') {\n                    return _isValidObject(value);\n                }\n                else if (!(typeof valueElement === 'number' || typeof valueElement === 'string' || typeof valueElement === 'boolean')) {\n                    _logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn('invalid array element type ', typeof valueElement);\n                    return false;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    }\n    else if (typeof value === 'object') {\n        return _isValidObject(value);\n    }\n    else if (!(typeof value === 'number' || typeof value === 'string' || typeof value === 'boolean')) {\n        _logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn('invalid value type ', typeof value);\n        return false;\n    }\n    return true;\n};\n\n//# sourceMappingURL=validateProperties.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbXBsaXR1ZGUrdXRpbHNAMS4xMC4yL25vZGVfbW9kdWxlcy9AYW1wbGl0dWRlL3V0aWxzL2VzbS9zcmMvdmFsaWRhdGVQcm9wZXJ0aWVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUNDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLFFBQVEsMkNBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksMkNBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwrQ0FBUSxxQ0FBcUMsaUJBQWlCO0FBQzdGO0FBQ0E7QUFDQSxvQkFBb0IsMkNBQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDJDQUFNO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwyQ0FBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQzZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQGFtcGxpdHVkZSt1dGlsc0AxLjEwLjIvbm9kZV9tb2R1bGVzL0BhbXBsaXR1ZGUvdXRpbHMvZXNtL3NyYy92YWxpZGF0ZVByb3BlcnRpZXMuanM/ZjcyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xudmFyIE1BWF9QUk9QRVJUWV9LRVlTID0gMTAwMDtcbnZhciBfaXNWYWxpZE9iamVjdCA9IGZ1bmN0aW9uIChwcm9wZXJ0aWVzKSB7XG4gICAgaWYgKE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmxlbmd0aCA+IE1BWF9QUk9QRVJUWV9LRVlTKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKCd0b28gbWFueSBwcm9wZXJ0aWVzLiBTa2lwcGluZyBvcGVyYXRpb24nKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcGVydGllcykge1xuICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdpbnZhbGlkIHByb3BlcnRpZXMgZm9ybWF0LiBTa2lwcGluZyBvcGVyYXRpb24nKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmFsdWUgPSBwcm9wZXJ0aWVzW2tleV07XG4gICAgICAgIGlmICghaXNWYWxpZFByb3BlcnRpZXMoa2V5LCB2YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbnZhciBpc1ZhbGlkUHJvcGVydGllcyA9IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICB2YXIgZV8xLCBfYTtcbiAgICBpZiAodHlwZW9mIHByb3BlcnR5ICE9PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgdmFsdWVfMSA9IF9fdmFsdWVzKHZhbHVlKSwgdmFsdWVfMV8xID0gdmFsdWVfMS5uZXh0KCk7ICF2YWx1ZV8xXzEuZG9uZTsgdmFsdWVfMV8xID0gdmFsdWVfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVFbGVtZW50ID0gdmFsdWVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ2ludmFsaWQgYXJyYXkgZWxlbWVudCB0eXBlICcsIHR5cGVvZiB2YWx1ZUVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZUVsZW1lbnQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfaXNWYWxpZE9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCEodHlwZW9mIHZhbHVlRWxlbWVudCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHZhbHVlRWxlbWVudCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlRWxlbWVudCA9PT0gJ2Jvb2xlYW4nKSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybignaW52YWxpZCBhcnJheSBlbGVtZW50IHR5cGUgJywgdHlwZW9mIHZhbHVlRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZV8xXzEgJiYgIXZhbHVlXzFfMS5kb25lICYmIChfYSA9IHZhbHVlXzEucmV0dXJuKSkgX2EuY2FsbCh2YWx1ZV8xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBfaXNWYWxpZE9iamVjdCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCEodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSkge1xuICAgICAgICBsb2dnZXIud2FybignaW52YWxpZCB2YWx1ZSB0eXBlICcsIHR5cGVvZiB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuZXhwb3J0IHsgaXNWYWxpZFByb3BlcnRpZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRlUHJvcGVydGllcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/validateProperties.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/amplitude-js@8.21.9/node_modules/amplitude-js/amplitude.esm.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/amplitude-js@8.21.9/node_modules/amplitude-js/amplitude.esm.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ newInstance; }\n/* harmony export */ });\n/* harmony import */ var _amplitude_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @amplitude/utils */ \"../../node_modules/.pnpm/@amplitude+utils@1.10.2/node_modules/@amplitude/utils/esm/src/index.js\");\n/* harmony import */ var blueimp_md5__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blueimp-md5 */ \"../../node_modules/.pnpm/blueimp-md5@2.19.0/node_modules/blueimp-md5/js/md5.js\");\n/* harmony import */ var blueimp_md5__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blueimp_md5__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! query-string */ \"../../node_modules/.pnpm/query-string@8.1.0/node_modules/query-string/index.js\");\n/* harmony import */ var _amplitude_ua_parser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @amplitude/ua-parser-js */ \"../../node_modules/.pnpm/@amplitude+ua-parser-js@0.7.33/node_modules/@amplitude/ua-parser-js/src/ua-parser.js\");\n/* harmony import */ var _amplitude_ua_parser_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_amplitude_ua_parser_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _amplitude_analytics_connector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @amplitude/analytics-connector */ \"../../node_modules/.pnpm/@amplitude+analytics-connector@1.5.0/node_modules/@amplitude/analytics-connector/dist/analytics-connector.esm.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n\n\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function () {};\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar Constants = {\n  DEFAULT_INSTANCE: '$default_instance',\n  API_VERSION: 2,\n  MAX_STRING_LENGTH: 4096,\n  MAX_PROPERTY_KEYS: 1000,\n  IDENTIFY_EVENT: '$identify',\n  GROUP_IDENTIFY_EVENT: '$groupidentify',\n  EVENT_LOG_URL: 'api.amplitude.com',\n  EVENT_LOG_EU_URL: 'api.eu.amplitude.com',\n  DYNAMIC_CONFIG_URL: 'regionconfig.amplitude.com',\n  DYNAMIC_CONFIG_EU_URL: 'regionconfig.eu.amplitude.com',\n  // localStorageKeys\n  LAST_EVENT_ID: 'amplitude_lastEventId',\n  LAST_EVENT_TIME: 'amplitude_lastEventTime',\n  LAST_IDENTIFY_ID: 'amplitude_lastIdentifyId',\n  LAST_SEQUENCE_NUMBER: 'amplitude_lastSequenceNumber',\n  SESSION_ID: 'amplitude_sessionId',\n  // Used in cookie as well\n  DEVICE_ID: 'amplitude_deviceId',\n  OPT_OUT: 'amplitude_optOut',\n  USER_ID: 'amplitude_userId',\n  // indexes of properties in cookie v2 storage format\n  DEVICE_ID_INDEX: 0,\n  USER_ID_INDEX: 1,\n  OPT_OUT_INDEX: 2,\n  SESSION_ID_INDEX: 3,\n  LAST_EVENT_TIME_INDEX: 4,\n  EVENT_ID_INDEX: 5,\n  IDENTIFY_ID_INDEX: 6,\n  SEQUENCE_NUMBER_INDEX: 7,\n  COOKIE_TEST_PREFIX: 'amp_cookie_test',\n  COOKIE_PREFIX: 'amp',\n  // Storage options\n  STORAGE_DEFAULT: '',\n  STORAGE_COOKIES: 'cookies',\n  STORAGE_NONE: 'none',\n  STORAGE_LOCAL: 'localStorage',\n  STORAGE_SESSION: 'sessionStorage',\n  // revenue keys\n  REVENUE_EVENT: 'revenue_amount',\n  REVENUE_PRODUCT_ID: '$productId',\n  REVENUE_QUANTITY: '$quantity',\n  REVENUE_PRICE: '$price',\n  REVENUE_REVENUE_TYPE: '$revenueType',\n  AMP_DEVICE_ID_PARAM: 'amp_device_id',\n  // url param\n  AMP_REFERRER_PARAM: 'amp_referrer',\n  // url param for overwriting the document.refer\n\n  REFERRER: 'referrer',\n  REFERRING_DOMAIN: 'referring_domain',\n  // UTM Params\n  UTM_SOURCE: 'utm_source',\n  UTM_MEDIUM: 'utm_medium',\n  UTM_CAMPAIGN: 'utm_campaign',\n  UTM_TERM: 'utm_term',\n  UTM_CONTENT: 'utm_content',\n  ATTRIBUTION_EVENT: '[Amplitude] Attribution Captured',\n  TRANSPORT_HTTP: 'http',\n  TRANSPORT_BEACON: 'beacon'\n};\n\n/*\n * UTF-8 encoder/decoder\n * http://www.webtoolkit.info/\n */\nvar UTF8 = {\n  encode: function encode(s) {\n    var utftext = '';\n    for (var n = 0; n < s.length; n++) {\n      var c = s.charCodeAt(n);\n      if (c < 128) {\n        utftext += String.fromCharCode(c);\n      } else if (c > 127 && c < 2048) {\n        utftext += String.fromCharCode(c >> 6 | 192);\n        utftext += String.fromCharCode(c & 63 | 128);\n      } else {\n        utftext += String.fromCharCode(c >> 12 | 224);\n        utftext += String.fromCharCode(c >> 6 & 63 | 128);\n        utftext += String.fromCharCode(c & 63 | 128);\n      }\n    }\n    return utftext;\n  },\n  decode: function decode(utftext) {\n    var s = '';\n    var i = 0;\n    var c = 0,\n      c1 = 0,\n      c2 = 0;\n    while (i < utftext.length) {\n      c = utftext.charCodeAt(i);\n      if (c < 128) {\n        s += String.fromCharCode(c);\n        i++;\n      } else if (c > 191 && c < 224) {\n        c1 = utftext.charCodeAt(i + 1);\n        s += String.fromCharCode((c & 31) << 6 | c1 & 63);\n        i += 2;\n      } else {\n        c1 = utftext.charCodeAt(i + 1);\n        c2 = utftext.charCodeAt(i + 2);\n        s += String.fromCharCode((c & 15) << 12 | (c1 & 63) << 6 | c2 & 63);\n        i += 3;\n      }\n    }\n    return s;\n  }\n};\n\n/* global globalThis */\nvar GlobalScope = function () {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof __webpack_require__.g !== 'undefined') {\n    return __webpack_require__.g;\n  }\n}();\n\n/*\n * Base64 encoder/decoder\n * http://www.webtoolkit.info/\n */\nvar Base64 = {\n  _keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  encode: function encode(input) {\n    try {\n      if (GlobalScope.btoa && GlobalScope.atob) {\n        return GlobalScope.btoa(unescape(encodeURIComponent(input)));\n      }\n    } catch (e) {\n      //log(e);\n    }\n    return Base64._encode(input);\n  },\n  _encode: function _encode(input) {\n    var output = '';\n    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n    var i = 0;\n    input = UTF8.encode(input);\n    while (i < input.length) {\n      chr1 = input.charCodeAt(i++);\n      chr2 = input.charCodeAt(i++);\n      chr3 = input.charCodeAt(i++);\n      enc1 = chr1 >> 2;\n      enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n      enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n      enc4 = chr3 & 63;\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n      output = output + Base64._keyStr.charAt(enc1) + Base64._keyStr.charAt(enc2) + Base64._keyStr.charAt(enc3) + Base64._keyStr.charAt(enc4);\n    }\n    return output;\n  },\n  decode: function decode(input) {\n    try {\n      if (GlobalScope.btoa && GlobalScope.atob) {\n        return decodeURIComponent(escape(GlobalScope.atob(input)));\n      }\n    } catch (e) {\n      //log(e);\n    }\n    return Base64._decode(input);\n  },\n  _decode: function _decode(input) {\n    var output = '';\n    var chr1, chr2, chr3;\n    var enc1, enc2, enc3, enc4;\n    var i = 0;\n    input = input.replace(/[^A-Za-z0-9+/=]/g, '');\n    while (i < input.length) {\n      enc1 = Base64._keyStr.indexOf(input.charAt(i++));\n      enc2 = Base64._keyStr.indexOf(input.charAt(i++));\n      enc3 = Base64._keyStr.indexOf(input.charAt(i++));\n      enc4 = Base64._keyStr.indexOf(input.charAt(i++));\n      chr1 = enc1 << 2 | enc2 >> 4;\n      chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n      chr3 = (enc3 & 3) << 6 | enc4;\n      output = output + String.fromCharCode(chr1);\n      if (enc3 !== 64) {\n        output = output + String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output = output + String.fromCharCode(chr3);\n      }\n    }\n    output = UTF8.decode(output);\n    return output;\n  }\n};\n\n/**\n * toString ref.\n * @private\n */\n\nvar toString = Object.prototype.toString;\n\n/**\n * Return the type of `val`.\n * @private\n * @param {Mixed} val\n * @return {String}\n * @api public\n */\n\nfunction type (val) {\n  switch (toString.call(val)) {\n    case '[object Date]':\n      return 'date';\n    case '[object RegExp]':\n      return 'regexp';\n    case '[object Arguments]':\n      return 'arguments';\n    case '[object Array]':\n      return 'array';\n    case '[object Error]':\n      return 'error';\n  }\n  if (val === null) {\n    return 'null';\n  }\n  if (val === undefined) {\n    return 'undefined';\n  }\n  if (val !== val) {\n    return 'nan';\n  }\n  if (val && val.nodeType === 1) {\n    return 'element';\n  }\n  if (typeof Buffer !== 'undefined' && typeof Buffer.isBuffer === 'function' && Buffer.isBuffer(val)) {\n    return 'buffer';\n  }\n  val = val.valueOf ? val.valueOf() : Object.prototype.valueOf.apply(val);\n  return _typeof(val);\n}\n\nvar logLevels = {\n  DISABLE: 0,\n  ERROR: 1,\n  WARN: 2,\n  INFO: 3\n};\nvar logLevel = logLevels.WARN;\nvar setLogLevel = function setLogLevel(logLevelName) {\n  if (Object.prototype.hasOwnProperty.call(logLevels, logLevelName)) {\n    logLevel = logLevels[logLevelName];\n  }\n};\nvar getLogLevel = function getLogLevel() {\n  return logLevel;\n};\nvar log = {\n  error: function error(s) {\n    if (logLevel >= logLevels.ERROR) {\n      _log(s);\n    }\n  },\n  warn: function warn(s) {\n    if (logLevel >= logLevels.WARN) {\n      _log(s);\n    }\n  },\n  info: function info(s) {\n    if (logLevel >= logLevels.INFO) {\n      _log(s);\n    }\n  }\n};\nvar _log = function _log(s) {\n  try {\n    console.log('[Amplitude] ' + s);\n  } catch (e) {\n    // console logging not available\n  }\n};\nvar isEmptyString = function isEmptyString(str) {\n  return !str || str.length === 0;\n};\nvar sessionStorageEnabled = function sessionStorageEnabled() {\n  try {\n    if (GlobalScope.sessionStorage) {\n      return true;\n    }\n  } catch (e) {\n    // sessionStorage disabled\n  }\n  return false;\n};\n\n// truncate string values in event and user properties so that request size does not get too large\nvar truncate = function truncate(value) {\n  if (type(value) === 'array') {\n    for (var i = 0; i < value.length; i++) {\n      value[i] = truncate(value[i]);\n    }\n  } else if (type(value) === 'object') {\n    for (var key in value) {\n      if (key in value) {\n        value[key] = truncate(value[key]);\n      }\n    }\n  } else {\n    value = _truncateValue(value);\n  }\n  return value;\n};\nvar _truncateValue = function _truncateValue(value) {\n  if (type(value) === 'string') {\n    return value.length > Constants.MAX_STRING_LENGTH ? value.substring(0, Constants.MAX_STRING_LENGTH) : value;\n  }\n  return value;\n};\nvar validateInput = function validateInput(input, name, expectedType) {\n  if (type(input) !== expectedType) {\n    log.error('Invalid ' + name + ' input type. Expected ' + expectedType + ' but received ' + type(input));\n    return false;\n  }\n  return true;\n};\nvar validateDeviceId = function validateDeviceId(deviceId) {\n  if (!validateInput(deviceId, 'deviceId', 'string')) {\n    return false;\n  }\n  if (deviceId.indexOf('.') >= 0) {\n    log.error(\"Device IDs may not contain '.' characters. Value will be ignored: \\\"\".concat(deviceId, \"\\\"\"));\n    return false;\n  }\n  return true;\n};\nvar validateTransport = function validateTransport(transport) {\n  if (!validateInput(transport, 'transport', 'string')) {\n    return false;\n  }\n  if (transport !== Constants.TRANSPORT_HTTP && transport !== Constants.TRANSPORT_BEACON) {\n    log.error(\"transport value must be one of '\".concat(Constants.TRANSPORT_BEACON, \"' or '\").concat(Constants.TRANSPORT_HTTP, \"'\"));\n    return false;\n  }\n  if (transport !== Constants.TRANSPORT_HTTP && typeof navigator !== 'undefined' && !navigator.sendBeacon) {\n    log.error(\"browser does not support sendBeacon, so transport must be HTTP\");\n    return false;\n  }\n  return true;\n};\n\n// do some basic sanitization and type checking, also catch property dicts with more than 1000 key/value pairs\nvar validateProperties = function validateProperties(properties) {\n  var propsType = type(properties);\n  if (propsType !== 'object') {\n    log.error('Error: invalid properties format. Expecting Javascript object, received ' + propsType + ', ignoring');\n    return {};\n  }\n  if (Object.keys(properties).length > Constants.MAX_PROPERTY_KEYS) {\n    log.error('Error: too many properties (more than 1000), ignoring');\n    return {};\n  }\n  var copy = {}; // create a copy with all of the valid properties\n  for (var property in properties) {\n    if (!Object.prototype.hasOwnProperty.call(properties, property)) {\n      continue;\n    }\n\n    // validate key\n    var key = property;\n    var keyType = type(key);\n    if (keyType !== 'string') {\n      key = String(key);\n      log.warn('WARNING: Non-string property key, received type ' + keyType + ', coercing to string \"' + key + '\"');\n    }\n\n    // validate value\n    var value = validatePropertyValue(key, properties[property]);\n    if (value === null) {\n      continue;\n    }\n    copy[key] = value;\n  }\n  return copy;\n};\nvar invalidValueTypes = ['nan', 'function', 'arguments', 'regexp', 'element'];\nvar validatePropertyValue = function validatePropertyValue(key, value) {\n  var valueType = type(value);\n  if (invalidValueTypes.indexOf(valueType) !== -1) {\n    log.warn('WARNING: Property key \"' + key + '\" with invalid value type ' + valueType + ', ignoring');\n    value = null;\n  } else if (valueType === 'undefined') {\n    value = null;\n  } else if (valueType === 'error') {\n    value = String(value);\n    log.warn('WARNING: Property key \"' + key + '\" with value type error, coercing to ' + value);\n  } else if (valueType === 'array') {\n    // check for nested arrays or objects\n    var arrayCopy = [];\n    for (var i = 0; i < value.length; i++) {\n      var element = value[i];\n      var elemType = type(element);\n      if (elemType === 'array') {\n        log.warn('WARNING: Cannot have ' + elemType + ' nested in an array property value, skipping');\n        continue;\n      } else if (elemType === 'object') {\n        arrayCopy.push(validateProperties(element));\n      } else {\n        arrayCopy.push(validatePropertyValue(key, element));\n      }\n    }\n    value = arrayCopy;\n  } else if (valueType === 'object') {\n    value = validateProperties(value);\n  }\n  return value;\n};\nvar validateGroups = function validateGroups(groups) {\n  var groupsType = type(groups);\n  if (groupsType !== 'object') {\n    log.error('Error: invalid groups format. Expecting Javascript object, received ' + groupsType + ', ignoring');\n    return {};\n  }\n  var copy = {}; // create a copy with all of the valid properties\n  for (var group in groups) {\n    if (!Object.prototype.hasOwnProperty.call(groups, group)) {\n      continue;\n    }\n\n    // validate key\n    var key = group;\n    var keyType = type(key);\n    if (keyType !== 'string') {\n      key = String(key);\n      log.warn('WARNING: Non-string groupType, received type ' + keyType + ', coercing to string \"' + key + '\"');\n    }\n\n    // validate value\n    var value = validateGroupName(key, groups[group]);\n    if (value === null) {\n      continue;\n    }\n    copy[key] = value;\n  }\n  return copy;\n};\nvar validateGroupName = function validateGroupName(key, groupName) {\n  var groupNameType = type(groupName);\n  if (groupNameType === 'string') {\n    return groupName;\n  }\n  if (groupNameType === 'date' || groupNameType === 'number' || groupNameType === 'boolean') {\n    groupName = String(groupName);\n    log.warn('WARNING: Non-string groupName, received type ' + groupNameType + ', coercing to string \"' + groupName + '\"');\n    return groupName;\n  }\n  if (groupNameType === 'array') {\n    // check for nested arrays or objects\n    var arrayCopy = [];\n    for (var i = 0; i < groupName.length; i++) {\n      var element = groupName[i];\n      var elemType = type(element);\n      if (elemType === 'array' || elemType === 'object') {\n        log.warn('WARNING: Skipping nested ' + elemType + ' in array groupName');\n        continue;\n      } else if (elemType === 'string') {\n        arrayCopy.push(element);\n      } else if (elemType === 'date' || elemType === 'number' || elemType === 'boolean') {\n        element = String(element);\n        log.warn('WARNING: Non-string groupName, received type ' + elemType + ', coercing to string \"' + element + '\"');\n        arrayCopy.push(element);\n      }\n    }\n    return arrayCopy;\n  }\n  log.warn('WARNING: Non-string groupName, received type ' + groupNameType + '. Please use strings or array of strings for groupName');\n};\n\n// parses the value of a url param (for example ?gclid=1234&...)\nvar getQueryParam = function getQueryParam(name, query) {\n  name = name.replace(/[[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n  var regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\n  var results = regex.exec(query);\n  return results === null ? undefined : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n};\nvar isWebWorkerEnvironment = function isWebWorkerEnvironment() {\n  return typeof WorkerGlobalScope !== 'undefined';\n};\nvar validateSessionId = function validateSessionId(sessionId) {\n  if (validateInput(sessionId, 'sessionId', 'number') && new Date(sessionId).getTime() > 0) {\n    return true;\n  }\n  log.error(\"sessionId value must in milliseconds since epoch (Unix Timestamp)\");\n  return false;\n};\nvar getLocation = function getLocation() {\n  return GlobalScope.location;\n};\nvar getHost = function getHost(url) {\n  var defaultHostname = GlobalScope.location ? GlobalScope.location.hostname : '';\n  if (url) {\n    if (typeof document !== 'undefined') {\n      var a = document.createElement('a');\n      a.href = url;\n      return a.hostname || defaultHostname;\n    }\n    if (typeof URL === 'function') {\n      var u = new URL(url);\n      return u.hostname || defaultHostname;\n    }\n  }\n  return defaultHostname;\n};\nvar utils = {\n  setLogLevel: setLogLevel,\n  getLogLevel: getLogLevel,\n  logLevels: logLevels,\n  log: log,\n  isEmptyString: isEmptyString,\n  isWebWorkerEnvironment: isWebWorkerEnvironment,\n  getQueryParam: getQueryParam,\n  sessionStorageEnabled: sessionStorageEnabled,\n  truncate: truncate,\n  validateGroups: validateGroups,\n  validateInput: validateInput,\n  validateProperties: validateProperties,\n  validateDeviceId: validateDeviceId,\n  validateTransport: validateTransport,\n  validateSessionId: validateSessionId,\n  getLocation: getLocation,\n  getHost: getHost\n};\n\nvar get$1 = function get(name) {\n  try {\n    var ca = document.cookie.split(';');\n    var value = null;\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n      while (c.charAt(0) === ' ') {\n        c = c.substring(1, c.length);\n      }\n      if (c.indexOf(name) === 0) {\n        value = c.substring(name.length, c.length);\n        break;\n      }\n    }\n    return value;\n  } catch (e) {\n    return null;\n  }\n};\nvar getAll = function getAll(name) {\n  try {\n    var cookieArray = document.cookie.split(';').map(function (c) {\n      return c.trimStart();\n    });\n    var values = [];\n    var _iterator = _createForOfIteratorHelper(cookieArray),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var cookie = _step.value;\n        while (cookie.charAt(0) === ' ') {\n          cookie = cookie.substring(1);\n        }\n        if (cookie.indexOf(name) === 0) {\n          values.push(cookie.substring(name.length));\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return values;\n  } catch (e) {\n    return [];\n  }\n};\nvar set$1 = function set(name, value, opts) {\n  var expires = value !== null ? opts.expirationDays : -1;\n  if (expires) {\n    var date = new Date();\n    date.setTime(date.getTime() + expires * 24 * 60 * 60 * 1000);\n    expires = date;\n  }\n  var str = name + '=' + value;\n  if (expires) {\n    str += '; expires=' + expires.toUTCString();\n  }\n  str += '; path=/';\n  if (opts.domain) {\n    str += '; domain=' + opts.domain;\n  }\n  if (opts.secure) {\n    str += '; Secure';\n  }\n  if (opts.sameSite) {\n    str += '; SameSite=' + opts.sameSite;\n  }\n  document.cookie = str;\n};\nvar getLastEventTime = function getLastEventTime() {\n  var cookie = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var strValue = cookie.split('.')[Constants.LAST_EVENT_TIME_INDEX];\n  var parsedValue;\n  if (strValue) {\n    parsedValue = parseInt(strValue, 32);\n  }\n  if (parsedValue) {\n    return parsedValue;\n  } else {\n    utils.log.warn(\"unable to parse malformed cookie: \".concat(cookie));\n    return 0;\n  }\n};\nvar sortByEventTime = function sortByEventTime(cookies) {\n  return _toConsumableArray(cookies).sort(function (c1, c2) {\n    var t1 = getLastEventTime(c1);\n    var t2 = getLastEventTime(c2);\n    // sort c1 first if its last event time is more recent\n    // i.e its event time integer is larger that c2's\n    return t2 - t1;\n  });\n};\n\n// test that cookies are enabled - navigator.cookiesEnabled yields false positives in IE, need to test directly\nvar areCookiesEnabled = function areCookiesEnabled() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var cookieName = Constants.COOKIE_TEST_PREFIX;\n  if (typeof document === 'undefined') {\n    return false;\n  }\n  var _areCookiesEnabled = false;\n  try {\n    var uid = String(Date.now());\n    set$1(cookieName, uid, opts);\n    utils.log.info(\"Testing if cookies available\");\n    _areCookiesEnabled = get$1(cookieName + '=') === uid;\n  } catch (e) {\n    utils.log.warn(\"Error thrown when checking for cookies. Reason: \\\"\".concat(e, \"\\\"\"));\n  } finally {\n    utils.log.info(\"Cleaning up cookies availability test\");\n    set$1(cookieName, null, opts);\n  }\n  return _areCookiesEnabled;\n};\nvar baseCookie = {\n  set: set$1,\n  get: get$1,\n  getAll: getAll,\n  getLastEventTime: getLastEventTime,\n  sortByEventTime: sortByEventTime,\n  areCookiesEnabled: areCookiesEnabled\n};\n\n// A URL safe variation on the the list of Base64 characters\nvar base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\nvar base64Id = function base64Id() {\n  var str = '';\n  for (var i = 0; i < 22; ++i) {\n    str += base64Chars.charAt(Math.floor(Math.random() * 64));\n  }\n  return str;\n};\n\n// Utility that finds top level domain to write to\nvar topDomain = function topDomain(url) {\n  var host = utils.getHost(url);\n  var parts = host.split('.');\n  var levels = [];\n  var cname = '_tldtest_' + base64Id();\n  if (utils.isWebWorkerEnvironment()) return '';\n  for (var i = parts.length - 2; i >= 0; --i) {\n    levels.push(parts.slice(i).join('.'));\n  }\n  for (var _i = 0; _i < levels.length; ++_i) {\n    var domain = levels[_i];\n    var opts = {\n      domain: '.' + domain\n    };\n    baseCookie.set(cname, 1, opts);\n    if (baseCookie.get(cname)) {\n      baseCookie.set(cname, null, opts);\n      return domain;\n    }\n  }\n  return '';\n};\n\n/*\n * Cookie data\n */\nvar _options = {\n  expirationDays: undefined,\n  domain: undefined\n};\nvar reset = function reset() {\n  _options = {\n    expirationDays: undefined,\n    domain: undefined\n  };\n};\nvar options = function options(opts) {\n  if (arguments.length === 0) {\n    return _options;\n  }\n  opts = opts || {};\n  _options.expirationDays = opts.expirationDays;\n  _options.secure = opts.secure;\n  _options.sameSite = opts.sameSite;\n  var domain = !utils.isEmptyString(opts.domain) ? opts.domain : '.' + topDomain(utils.getLocation().href);\n  var token = Math.random();\n  _options.domain = domain;\n  set('amplitude_test', token);\n  var stored = get('amplitude_test');\n  if (!stored || stored !== token) {\n    domain = null;\n  }\n  remove('amplitude_test');\n  _options.domain = domain;\n  return _options;\n};\nvar _domainSpecific = function _domainSpecific(name) {\n  // differentiate between cookies on different domains\n  var suffix = '';\n  if (_options.domain) {\n    suffix = _options.domain.charAt(0) === '.' ? _options.domain.substring(1) : _options.domain;\n  }\n  return name + suffix;\n};\nvar get = function get(name) {\n  var nameEq = _domainSpecific(name) + '=';\n  var value = baseCookie.get(nameEq);\n  try {\n    if (value) {\n      return JSON.parse(Base64.decode(value));\n    }\n  } catch (e) {\n    return null;\n  }\n  return null;\n};\nvar set = function set(name, value) {\n  try {\n    baseCookie.set(_domainSpecific(name), Base64.encode(JSON.stringify(value)), _options);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\nvar setRaw = function setRaw(name, value) {\n  try {\n    baseCookie.set(_domainSpecific(name), value, _options);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\nvar getRaw = function getRaw(name) {\n  var nameEq = _domainSpecific(name) + '=';\n  return baseCookie.get(nameEq);\n};\nvar remove = function remove(name) {\n  try {\n    baseCookie.set(_domainSpecific(name), null, _options);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\nvar Cookie = {\n  reset: reset,\n  options: options,\n  get: get,\n  set: set,\n  remove: remove,\n  setRaw: setRaw,\n  getRaw: getRaw\n};\n\nvar WorkerStorage = /*#__PURE__*/function () {\n  function WorkerStorage() {\n    _classCallCheck(this, WorkerStorage);\n    this.map = new Map();\n    this.length = 0;\n  }\n  _createClass(WorkerStorage, [{\n    key: \"key\",\n    value: function key(index) {\n      var keys = Array.from(this.map.keys());\n      var key = keys[index];\n      return this.map.get(key);\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.map.get(key);\n    }\n  }, {\n    key: \"setItem\",\n    value: function setItem(key, value) {\n      if (!this.map.has(key)) {\n        this.length += 1;\n      }\n      this.map.set(key, value);\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(key) {\n      if (this.map.has(key)) {\n        this.length -= 1;\n        this.map[\"delete\"](key);\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.map.clear();\n      this.length = 0;\n    }\n  }]);\n  return WorkerStorage;\n}();\n\n/*\n * Implement localStorage to support Firefox 2-3 and IE 5-7\n */\nvar localStorage;\n{\n  // test that Window.localStorage is available and works\n  var windowLocalStorageAvailable = function windowLocalStorageAvailable() {\n    var uid = new Date();\n    var result;\n    try {\n      GlobalScope.localStorage.setItem(uid, uid);\n      result = GlobalScope.localStorage.getItem(uid) === String(uid);\n      GlobalScope.localStorage.removeItem(uid);\n      return result;\n    } catch (e) {\n      // localStorage not available\n    }\n    return false;\n  };\n  if (windowLocalStorageAvailable()) {\n    localStorage = GlobalScope.localStorage;\n  } else if (typeof GlobalScope !== 'undefined' && GlobalScope.globalStorage) {\n    // Firefox 2-3 use globalStorage\n    // See https://developer.mozilla.org/en/dom/storage#globalStorage\n    try {\n      localStorage = GlobalScope.globalStorage[GlobalScope.location.hostname];\n    } catch (e) {\n      // Something bad happened...\n    }\n  } else if (typeof document !== 'undefined') {\n    // IE 5-7 use userData\n    // See http://msdn.microsoft.com/en-us/library/ms531424(v=vs.85).aspx\n    var div = document.createElement('div'),\n      attrKey = 'localStorage';\n    div.style.display = 'none';\n    document.getElementsByTagName('head')[0].appendChild(div);\n    if (div.addBehavior) {\n      div.addBehavior('#default#userdata');\n      localStorage = {\n        length: 0,\n        setItem: function setItem(k, v) {\n          div.load(attrKey);\n          if (!div.getAttribute(k)) {\n            this.length++;\n          }\n          div.setAttribute(k, v);\n          div.save(attrKey);\n        },\n        getItem: function getItem(k) {\n          div.load(attrKey);\n          return div.getAttribute(k);\n        },\n        removeItem: function removeItem(k) {\n          div.load(attrKey);\n          if (div.getAttribute(k)) {\n            this.length--;\n          }\n          div.removeAttribute(k);\n          div.save(attrKey);\n        },\n        clear: function clear() {\n          div.load(attrKey);\n          var i = 0;\n          var attr;\n          while (attr = div.XMLDocument.documentElement.attributes[i++]) {\n            div.removeAttribute(attr.name);\n          }\n          div.save(attrKey);\n          this.length = 0;\n        },\n        key: function key(k) {\n          div.load(attrKey);\n          return div.XMLDocument.documentElement.attributes[k];\n        }\n      };\n      div.load(attrKey);\n      localStorage.length = div.XMLDocument.documentElement.attributes.length;\n    }\n  } else if (utils.isWebWorkerEnvironment()) {\n    // Web worker\n    localStorage = new WorkerStorage();\n  }\n  if (!localStorage) {\n    /* eslint-disable no-unused-vars */\n    localStorage = {\n      length: 0,\n      setItem: function setItem(k, v) {},\n      getItem: function getItem(k) {},\n      removeItem: function removeItem(k) {},\n      clear: function clear() {},\n      key: function key(k) {}\n    };\n    /* eslint-enable no-unused-vars */\n  }\n}\n\nvar localStorage$1 = localStorage;\n\n/*\n * Abstraction layer for cookie storage.\n * Uses cookie if available, otherwise fallback to localstorage.\n */\nvar cookieStorage = function cookieStorage() {\n  this.storage = null;\n};\ncookieStorage.prototype.getStorage = function (disableCookies) {\n  if (this.storage !== null) {\n    return this.storage;\n  }\n  if (!disableCookies && baseCookie.areCookiesEnabled()) {\n    this.storage = Cookie;\n  } else {\n    // if cookies disabled, fallback to localstorage\n    // note: localstorage does not persist across subdomains\n    var keyPrefix = 'amp_cookiestore_';\n    this.storage = {\n      _options: {\n        expirationDays: undefined,\n        domain: undefined,\n        secure: false\n      },\n      reset: function reset() {\n        this._options = {\n          expirationDays: undefined,\n          domain: undefined,\n          secure: false\n        };\n      },\n      options: function options(opts) {\n        if (arguments.length === 0) {\n          return this._options;\n        }\n        opts = opts || {};\n        this._options.expirationDays = opts.expirationDays || this._options.expirationDays;\n        // localStorage is specific to subdomains\n        this._options.domain = opts.domain || this._options.domain || GlobalScope && GlobalScope.location && GlobalScope.location.hostname;\n        return this._options.secure = opts.secure || false;\n      },\n      get: function get(name) {\n        try {\n          return JSON.parse(localStorage$1.getItem(keyPrefix + name));\n        } catch (e) {} /* eslint-disable-line no-empty */\n        return null;\n      },\n      set: function set(name, value) {\n        try {\n          localStorage$1.setItem(keyPrefix + name, JSON.stringify(value));\n          return true;\n        } catch (e) {} /* eslint-disable-line no-empty */\n        return false;\n      },\n      remove: function remove(name) {\n        try {\n          localStorage$1.removeItem(keyPrefix + name);\n        } catch (e) {\n          return false;\n        }\n      }\n    };\n  }\n  return this.storage;\n};\n\nvar _storageOptionExists;\nvar storageOptionExists = (_storageOptionExists = {}, _defineProperty(_storageOptionExists, Constants.STORAGE_COOKIES, true), _defineProperty(_storageOptionExists, Constants.STORAGE_NONE, true), _defineProperty(_storageOptionExists, Constants.STORAGE_LOCAL, true), _defineProperty(_storageOptionExists, Constants.STORAGE_SESSION, true), _storageOptionExists);\n\n/**\n * MetadataStorage involves SDK data persistance\n * storage priority: cookies -> localStorage -> in memory\n * This priority can be overriden by setting the storage options.\n * if in localStorage, unable track users between subdomains\n * if in memory, then memory can't be shared between different tabs\n */\nvar MetadataStorage = /*#__PURE__*/function () {\n  function MetadataStorage(_ref) {\n    var storageKey = _ref.storageKey,\n      disableCookies = _ref.disableCookies,\n      domain = _ref.domain,\n      secure = _ref.secure,\n      sameSite = _ref.sameSite,\n      expirationDays = _ref.expirationDays,\n      storage = _ref.storage;\n    _classCallCheck(this, MetadataStorage);\n    this.storageKey = storageKey;\n    this.domain = domain;\n    this.secure = secure;\n    this.sameSite = sameSite;\n    this.expirationDays = expirationDays;\n    this.cookieDomain = '';\n    var loc = utils.getLocation() ? utils.getLocation().href : undefined;\n    var writableTopDomain = !disableCookies ? topDomain(loc) : '';\n    this.cookieDomain = domain || (writableTopDomain ? '.' + writableTopDomain : null);\n    if (storageOptionExists[storage]) {\n      this.storage = storage;\n    } else {\n      var disableCookieStorage = disableCookies || !baseCookie.areCookiesEnabled({\n        domain: this.cookieDomain,\n        secure: this.secure,\n        sameSite: this.sameSite,\n        expirationDays: this.expirationDays\n      });\n      if (disableCookieStorage) {\n        this.storage = Constants.STORAGE_LOCAL;\n      } else {\n        this.storage = Constants.STORAGE_COOKIES;\n      }\n    }\n  }\n  _createClass(MetadataStorage, [{\n    key: \"getCookieStorageKey\",\n    value: function getCookieStorageKey() {\n      if (!this.domain) {\n        return this.storageKey;\n      }\n      var suffix = this.domain.charAt(0) === '.' ? this.domain.substring(1) : this.domain;\n      return \"\".concat(this.storageKey).concat(suffix ? \"_\".concat(suffix) : '');\n    }\n\n    /*\n     * Data is saved as delimited values rather than JSO to minimize cookie space\n     * Should not change order of the items\n     */\n  }, {\n    key: \"save\",\n    value: function save(_ref2) {\n      var deviceId = _ref2.deviceId,\n        userId = _ref2.userId,\n        optOut = _ref2.optOut,\n        sessionId = _ref2.sessionId,\n        lastEventTime = _ref2.lastEventTime,\n        eventId = _ref2.eventId,\n        identifyId = _ref2.identifyId,\n        sequenceNumber = _ref2.sequenceNumber;\n      if (this.storage === Constants.STORAGE_NONE) {\n        return;\n      }\n      var value = [deviceId, Base64.encode(userId || ''),\n      // used to convert not unicode to alphanumeric since cookies only use alphanumeric\n      optOut ? '1' : '', sessionId ? sessionId.toString(32) : '0',\n      // generated when instantiated, timestamp (but re-uses session id in cookie if not expired) @TODO clients may want custom session id\n      lastEventTime ? lastEventTime.toString(32) : '0',\n      // last time an event was set\n      eventId ? eventId.toString(32) : '0', identifyId ? identifyId.toString(32) : '0', sequenceNumber ? sequenceNumber.toString(32) : '0'].join('.');\n      switch (this.storage) {\n        case Constants.STORAGE_SESSION:\n          if (GlobalScope.sessionStorage) {\n            GlobalScope.sessionStorage.setItem(this.storageKey, value);\n          }\n          break;\n        case Constants.STORAGE_LOCAL:\n          localStorage$1.setItem(this.storageKey, value);\n          break;\n        case Constants.STORAGE_COOKIES:\n          this.saveCookie(value);\n          break;\n      }\n    }\n  }, {\n    key: \"saveCookie\",\n    value: function saveCookie(value) {\n      baseCookie.set(this.getCookieStorageKey(), value, {\n        domain: this.cookieDomain,\n        secure: this.secure,\n        sameSite: this.sameSite,\n        expirationDays: this.expirationDays\n      });\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      var _this = this;\n      var str;\n      if (this.storage === Constants.STORAGE_COOKIES) {\n        var cookieKey = this.getCookieStorageKey() + '=';\n        var allCookies = baseCookie.getAll(cookieKey);\n        if (allCookies.length === 0 || allCookies.length === 1) {\n          str = allCookies[0];\n        } else {\n          // dedup cookies by deleting them all and restoring\n          // the one with the most recent event time\n          var latestCookie = baseCookie.sortByEventTime(allCookies)[0];\n          allCookies.forEach(function () {\n            return baseCookie.set(_this.getCookieStorageKey(), null, {});\n          });\n          this.saveCookie(latestCookie);\n          str = baseCookie.get(cookieKey);\n        }\n      }\n      if (!str) {\n        str = localStorage$1.getItem(this.storageKey);\n      }\n      if (!str) {\n        try {\n          str = GlobalScope.sessionStorage && GlobalScope.sessionStorage.getItem(this.storageKey);\n        } catch (e) {\n          utils.log.info(\"window.sessionStorage unavailable. Reason: \\\"\".concat(e, \"\\\"\"));\n        }\n      }\n      if (!str) {\n        return null;\n      }\n      var values = str.split('.');\n      var userId = null;\n      if (values[Constants.USER_ID_INDEX]) {\n        try {\n          userId = Base64.decode(values[Constants.USER_ID_INDEX]);\n        } catch (e) {\n          userId = null;\n        }\n      }\n      return {\n        deviceId: values[Constants.DEVICE_ID_INDEX],\n        userId: userId,\n        optOut: values[Constants.OPT_OUT_INDEX] === '1',\n        sessionId: parseInt(values[Constants.SESSION_ID_INDEX], 32),\n        lastEventTime: parseInt(values[Constants.LAST_EVENT_TIME_INDEX], 32),\n        eventId: parseInt(values[Constants.EVENT_ID_INDEX], 32),\n        identifyId: parseInt(values[Constants.IDENTIFY_ID_INDEX], 32),\n        sequenceNumber: parseInt(values[Constants.SEQUENCE_NUMBER_INDEX], 32)\n      };\n    }\n\n    /**\n     * Clears any saved metadata storage\n     * @constructor AmplitudeClient\n     * @public\n     * @return {boolean} True if metadata was cleared, false if none existed\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var str;\n      if (this.storage === Constants.STORAGE_COOKIES) {\n        str = baseCookie.get(this.getCookieStorageKey() + '=');\n        baseCookie.set(this.getCookieStorageKey(), null, {\n          domain: this.cookieDomain,\n          secure: this.secure,\n          sameSite: this.sameSite,\n          expirationDays: 0\n        });\n      }\n      if (!str) {\n        str = localStorage$1.getItem(this.storageKey);\n        localStorage$1.clear();\n      }\n      if (!str) {\n        try {\n          str = GlobalScope.sessionStorage && GlobalScope.sessionStorage.getItem(this.storageKey);\n          GlobalScope.sessionStorage.clear();\n        } catch (e) {\n          utils.log.info(\"window.sessionStorage unavailable. Reason: \\\"\".concat(e, \"\\\"\"));\n        }\n      }\n      return !!str;\n    }\n  }]);\n  return MetadataStorage;\n}();\n\nvar getUtmData = function getUtmData(rawCookie, query) {\n  // Translate the utmz cookie format into url query string format.\n  var cookie = rawCookie ? '?' + rawCookie.split('.').slice(-1)[0].replace(/\\|/g, '&') : '';\n  var fetchParam = function fetchParam(queryName, query, cookieName, cookie) {\n    return utils.getQueryParam(queryName, query) || utils.getQueryParam(cookieName, cookie);\n  };\n  var utmSource = fetchParam(Constants.UTM_SOURCE, query, 'utmcsr', cookie);\n  var utmMedium = fetchParam(Constants.UTM_MEDIUM, query, 'utmcmd', cookie);\n  var utmCampaign = fetchParam(Constants.UTM_CAMPAIGN, query, 'utmccn', cookie);\n  var utmTerm = fetchParam(Constants.UTM_TERM, query, 'utmctr', cookie);\n  var utmContent = fetchParam(Constants.UTM_CONTENT, query, 'utmcct', cookie);\n  var utmData = {};\n  var addIfNotNull = function addIfNotNull(key, value) {\n    if (!utils.isEmptyString(value)) {\n      utmData[key] = value;\n    }\n  };\n  addIfNotNull(Constants.UTM_SOURCE, utmSource);\n  addIfNotNull(Constants.UTM_MEDIUM, utmMedium);\n  addIfNotNull(Constants.UTM_CAMPAIGN, utmCampaign);\n  addIfNotNull(Constants.UTM_TERM, utmTerm);\n  addIfNotNull(Constants.UTM_CONTENT, utmContent);\n  return utmData;\n};\n\n/*\n * Wrapper for a user properties JSON object that supports operations.\n * Note: if a user property is used in multiple operations on the same Identify object,\n * only the first operation will be saved, and the rest will be ignored.\n */\n\nvar AMP_OP_ADD = '$add';\nvar AMP_OP_APPEND = '$append';\nvar AMP_OP_CLEAR_ALL = '$clearAll';\nvar AMP_OP_PREPEND = '$prepend';\nvar AMP_OP_SET = '$set';\nvar AMP_OP_SET_ONCE = '$setOnce';\nvar AMP_OP_UNSET = '$unset';\nvar AMP_OP_PREINSERT = '$preInsert';\nvar AMP_OP_POSTINSERT = '$postInsert';\nvar AMP_OP_REMOVE = '$remove';\n\n/**\n * Identify API - instance constructor. Identify objects are a wrapper for user property operations.\n * Each method adds a user property operation to the Identify object, and returns the same Identify object,\n * allowing you to chain multiple method calls together.\n * Note: if the same user property is used in multiple operations on a single Identify object,\n * only the first operation on that property will be saved, and the rest will be ignored.\n * @constructor Identify\n * @public\n * @example var identify = new amplitude.Identify();\n */\nvar Identify = function Identify() {\n  this.userPropertiesOperations = {};\n  this.properties = []; // keep track of keys that have been added\n};\n\n/**\n * Increment a user property by a given value (can also be negative to decrement).\n * If the user property does not have a value set yet, it will be initialized to 0 before being incremented.\n * @public\n * @param {string} property - The user property key.\n * @param {number|string} value - The amount by which to increment the user property. Allows numbers as strings (ex: '123').\n * @return {Identify} Returns the same Identify object, allowing you to chain multiple method calls together.\n * @example var identify = new amplitude.Identify().add('karma', 1).add('friends', 1);\n * amplitude.identify(identify); // send the Identify call\n */\nIdentify.prototype.add = function (property, value) {\n  if (type(value) === 'number' || type(value) === 'string') {\n    this._addOperation(AMP_OP_ADD, property, value);\n  } else {\n    utils.log.error('Unsupported type for value: ' + type(value) + ', expecting number or string');\n  }\n  return this;\n};\n\n/**\n * Append a value or values to a user property.\n * If the user property does not have a value set yet,\n * it will be initialized to an empty list before the new values are appended.\n * If the user property has an existing value and it is not a list,\n * the existing value will be converted into a list with the new values appended.\n * @public\n * @param {string} property - The user property key.\n * @param {number|string|list|object} value - A value or values to append.\n * Values can be numbers, strings, lists, or object (key:value dict will be flattened).\n * @return {Identify} Returns the same Identify object, allowing you to chain multiple method calls together.\n * @example var identify = new amplitude.Identify().append('ab-tests', 'new-user-tests');\n * identify.append('some_list', [1, 2, 3, 4, 'values']);\n * amplitude.identify(identify); // send the Identify call\n */\nIdentify.prototype.append = function (property, value) {\n  this._addOperation(AMP_OP_APPEND, property, value);\n  return this;\n};\n\n/**\n * Clear all user properties for the current user.\n * SDK user should instead call amplitude.clearUserProperties() instead of using this.\n * $clearAll needs to be sent on its own Identify object. If there are already other operations, then don't add $clearAll.\n * If $clearAll already in an Identify object, don't allow other operations to be added.\n * @private\n */\nIdentify.prototype.clearAll = function () {\n  if (Object.keys(this.userPropertiesOperations).length > 0) {\n    if (!Object.prototype.hasOwnProperty.call(this.userPropertiesOperations, AMP_OP_CLEAR_ALL)) {\n      utils.log.error('Need to send $clearAll on its own Identify object without any other operations, skipping $clearAll');\n    }\n    return this;\n  }\n  this.userPropertiesOperations[AMP_OP_CLEAR_ALL] = '-';\n  return this;\n};\n\n/**\n * Prepend a value or values to a user property.\n * Prepend means inserting the value or values at the front of a list.\n * If the user property does not have a value set yet,\n * it will be initialized to an empty list before the new values are prepended.\n * If the user property has an existing value and it is not a list,\n * the existing value will be converted into a list with the new values prepended.\n * @public\n * @param {string} property - The user property key.\n * @param {number|string|list|object} value - A value or values to prepend.\n * Values can be numbers, strings, lists, or object (key:value dict will be flattened).\n * @return {Identify} Returns the same Identify object, allowing you to chain multiple method calls together.\n * @example var identify = new amplitude.Identify().prepend('ab-tests', 'new-user-tests');\n * identify.prepend('some_list', [1, 2, 3, 4, 'values']);\n * amplitude.identify(identify); // send the Identify call\n */\nIdentify.prototype.prepend = function (property, value) {\n  this._addOperation(AMP_OP_PREPEND, property, value);\n  return this;\n};\n\n/**\n * Sets the value of a given user property. If a value already exists, it will be overwriten with the new value.\n * @public\n * @param {string} property - The user property key.\n * @param {number|string|list|boolean|object} value - A value or values to set.\n * Values can be numbers, strings, lists, or object (key:value dict will be flattened).\n * @return {Identify} Returns the same Identify object, allowing you to chain multiple method calls together.\n * @example var identify = new amplitude.Identify().set('user_type', 'beta');\n * identify.set('name', {'first': 'John', 'last': 'Doe'}); // dict is flattened and becomes name.first: John, name.last: Doe\n * amplitude.identify(identify); // send the Identify call\n */\nIdentify.prototype.set = function (property, value) {\n  this._addOperation(AMP_OP_SET, property, value);\n  return this;\n};\n\n/**\n * Sets the value of a given user property only once. Subsequent setOnce operations on that user property will be ignored;\n * however, that user property can still be modified through any of the other operations.\n * Useful for capturing properties such as 'initial_signup_date', 'initial_referrer', etc.\n * @public\n * @param {string} property - The user property key.\n * @param {number|string|list|boolean|object} value - A value or values to set once.\n * Values can be numbers, strings, lists, or object (key:value dict will be flattened).\n * @return {Identify} Returns the same Identify object, allowing you to chain multiple method calls together.\n * @example var identify = new amplitude.Identify().setOnce('sign_up_date', '2016-04-01');\n * amplitude.identify(identify); // send the Identify call\n */\nIdentify.prototype.setOnce = function (property, value) {\n  this._addOperation(AMP_OP_SET_ONCE, property, value);\n  return this;\n};\n\n/**\n * Unset and remove a user property. This user property will no longer show up in a user's profile.\n * @public\n * @param {string} property - The user property key.\n * @return {Identify} Returns the same Identify object, allowing you to chain multiple method calls together.\n * @example var identify = new amplitude.Identify().unset('user_type').unset('age');\n * amplitude.identify(identify); // send the Identify call\n */\nIdentify.prototype.unset = function (property) {\n  this._addOperation(AMP_OP_UNSET, property, '-');\n  return this;\n};\n\n/**\n * Preinsert a value or values to a user property, if it does not exist in the user property already.\n * Preinsert means inserting the value or values to the beginning of the specified user property.\n * If the item already exists in the user property, it will be a no-op.\n * @public\n * @param {string} property - The user property key.\n * @param {number|string|list|object} value - A value or values to insert.\n * @returns {Identify} Returns the same Identify object, allowing you to chain multiple method calls together.\n */\nIdentify.prototype.preInsert = function (property, value) {\n  this._addOperation(AMP_OP_PREINSERT, property, value);\n  return this;\n};\n\n/**\n * Postinsert a value or values to a user property, if it does not exist in the user property already.\n * Postinsert means inserting the value or values to the beginning of the specified user property.\n * If the item already exists in the user property, it will be a no-op.\n * @param {string} property - The user property key.\n * @param {number|string|list|object} value - A value or values to insert.\n * @returns {Identify} Returns the same Identify object, allowing you to chain multiple method calls together.\n */\nIdentify.prototype.postInsert = function (property, value) {\n  this._addOperation(AMP_OP_POSTINSERT, property, value);\n  return this;\n};\n\n/**\n * Remove a value or values to a user property, if it does exist in the user property.\n * If the item does not exist in the user property, it will be a no-op.\n * @param {string} property - The user property key.\n * @param {number|string|list|object} value - A value or values to remove.\n * @returns {Identify} Returns the same Identify object, allowing you to chain multiple method calls together.\n */\nIdentify.prototype.remove = function (property, value) {\n  this._addOperation(AMP_OP_REMOVE, property, value);\n  return this;\n};\n\n/**\n * Helper function that adds operation to the Identify's object\n * Handle's filtering of duplicate user property keys, and filtering for clearAll.\n * @private\n */\nIdentify.prototype._addOperation = function (operation, property, value) {\n  // check that the identify doesn't already contain a clearAll\n  if (Object.prototype.hasOwnProperty.call(this.userPropertiesOperations, AMP_OP_CLEAR_ALL)) {\n    utils.log.error('This identify already contains a $clearAll operation, skipping operation ' + operation);\n    return;\n  }\n\n  // check that property wasn't already used in this Identify\n  if (this.properties.indexOf(property) !== -1) {\n    utils.log.error('User property \"' + property + '\" already used in this identify, skipping operation ' + operation);\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(this.userPropertiesOperations, operation)) {\n    this.userPropertiesOperations[operation] = {};\n  }\n  this.userPropertiesOperations[operation][property] = value;\n  this.properties.push(property);\n};\n\n/*\n * Simple AJAX request object\n */\nvar Request = function Request(url, data, headers) {\n  this.url = url;\n  this.data = data || {};\n  this.headers = headers;\n};\nvar CORS_HEADER = 'Cross-Origin-Resource-Policy';\nfunction setHeaders(xhr, headers) {\n  for (var header in headers) {\n    if (header === CORS_HEADER && !headers[header]) {\n      continue;\n    }\n    xhr.setRequestHeader(header, headers[header]);\n  }\n}\nRequest.prototype.send = function (callback) {\n  var isIE = GlobalScope.XDomainRequest ? true : false;\n  if (isIE) {\n    var xdr = new GlobalScope.XDomainRequest();\n    xdr.open('POST', this.url, true);\n    xdr.onload = function () {\n      callback(200, xdr.responseText);\n    };\n    xdr.onerror = function () {\n      // status code not available from xdr, try string matching on responseText\n      if (xdr.responseText === 'Request Entity Too Large') {\n        callback(413, xdr.responseText);\n      } else {\n        callback(500, xdr.responseText);\n      }\n    };\n    xdr.ontimeout = function () {};\n    xdr.onprogress = function () {};\n    xdr.send(query_string__WEBPACK_IMPORTED_MODULE_1__[\"default\"].stringify(this.data));\n  } else if (typeof XMLHttpRequest !== 'undefined') {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', this.url, true);\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        callback(xhr.status, xhr.responseText);\n      }\n    };\n    setHeaders(xhr, this.headers);\n    xhr.send(query_string__WEBPACK_IMPORTED_MODULE_1__[\"default\"].stringify(this.data));\n  } else {\n    var responseStatus = undefined;\n    fetch(this.url, {\n      method: 'POST',\n      headers: this.headers,\n      body: query_string__WEBPACK_IMPORTED_MODULE_1__[\"default\"].stringify(this.data)\n    }).then(function (response) {\n      responseStatus = response.status;\n      return response.text();\n    }).then(function (responseText) {\n      callback(responseStatus, responseText);\n    });\n  }\n  //log('sent request to ' + this.url + ' with data ' + decodeURIComponent(queryString(this.data)));\n};\n\n/**\n * Revenue API - instance constructor. Wrapper for logging Revenue data. Revenue objects get passed to amplitude.logRevenueV2 to send to Amplitude servers.\n * Each method updates a revenue property in the Revenue object, and returns the same Revenue object,\n * allowing you to chain multiple method calls together.\n *\n * Note: price is a required field to log revenue events.\n * If quantity is not specified then defaults to 1.\n * @constructor Revenue\n * @public\n * @example var revenue = new amplitude.Revenue();\n */\nvar Revenue = function Revenue() {\n  // required fields\n  this._price = null;\n\n  // optional fields\n  this._productId = null;\n  this._quantity = 1;\n  this._revenueType = null;\n  this._properties = null;\n};\n\n/**\n * Set a value for the product identifer.\n * @public\n * @param {string} productId - The value for the product identifier. Empty and invalid strings are ignored.\n * @return {Revenue} Returns the same Revenue object, allowing you to chain multiple method calls together.\n * @example var revenue = new amplitude.Revenue().setProductId('productIdentifier').setPrice(10.99);\n * amplitude.logRevenueV2(revenue);\n */\nRevenue.prototype.setProductId = function setProductId(productId) {\n  if (type(productId) !== 'string') {\n    utils.log.error('Unsupported type for productId: ' + type(productId) + ', expecting string');\n  } else if (utils.isEmptyString(productId)) {\n    utils.log.error('Invalid empty productId');\n  } else {\n    this._productId = productId;\n  }\n  return this;\n};\n\n/**\n * Set a value for the quantity. Note revenue amount is calculated as price * quantity.\n * @public\n * @param {number} quantity - Integer value for the quantity. If not set, quantity defaults to 1.\n * @return {Revenue} Returns the same Revenue object, allowing you to chain multiple method calls together.\n * @example var revenue = new amplitude.Revenue().setProductId('productIdentifier').setPrice(10.99).setQuantity(5);\n * amplitude.logRevenueV2(revenue);\n */\nRevenue.prototype.setQuantity = function setQuantity(quantity) {\n  if (type(quantity) !== 'number') {\n    utils.log.error('Unsupported type for quantity: ' + type(quantity) + ', expecting number');\n  } else {\n    this._quantity = parseInt(quantity);\n  }\n  return this;\n};\n\n/**\n * Set a value for the price. This field is required for all revenue being logged.\n *\n * Note: revenue amount is calculated as price * quantity.\n * @public\n * @param {number} price - Double value for the quantity.\n * @return {Revenue} Returns the same Revenue object, allowing you to chain multiple method calls together.\n * @example var revenue = new amplitude.Revenue().setProductId('productIdentifier').setPrice(10.99);\n * amplitude.logRevenueV2(revenue);\n */\nRevenue.prototype.setPrice = function setPrice(price) {\n  if (type(price) !== 'number') {\n    utils.log.error('Unsupported type for price: ' + type(price) + ', expecting number');\n  } else {\n    this._price = price;\n  }\n  return this;\n};\n\n/**\n * Set a value for the revenueType (for example purchase, cost, tax, refund, etc).\n * @public\n * @param {string} revenueType - RevenueType to designate.\n * @return {Revenue} Returns the same Revenue object, allowing you to chain multiple method calls together.\n * @example var revenue = new amplitude.Revenue().setProductId('productIdentifier').setPrice(10.99).setRevenueType('purchase');\n * amplitude.logRevenueV2(revenue);\n */\nRevenue.prototype.setRevenueType = function setRevenueType(revenueType) {\n  if (type(revenueType) !== 'string') {\n    utils.log.error('Unsupported type for revenueType: ' + type(revenueType) + ', expecting string');\n  } else {\n    this._revenueType = revenueType;\n  }\n  return this;\n};\n\n/**\n * Set event properties for the revenue event.\n * @public\n * @param {object} eventProperties - Revenue event properties to set.\n * @return {Revenue} Returns the same Revenue object, allowing you to chain multiple method calls together.\n * @example var event_properties = {'city': 'San Francisco'};\n * var revenue = new amplitude.Revenue().setProductId('productIdentifier').setPrice(10.99).setEventProperties(event_properties);\n * amplitude.logRevenueV2(revenue);\n */\nRevenue.prototype.setEventProperties = function setEventProperties(eventProperties) {\n  if (type(eventProperties) !== 'object') {\n    utils.log.error('Unsupported type for eventProperties: ' + type(eventProperties) + ', expecting object');\n  } else {\n    this._properties = utils.validateProperties(eventProperties);\n  }\n  return this;\n};\n\n/**\n * @private\n */\nRevenue.prototype._isValidRevenue = function _isValidRevenue() {\n  if (type(this._price) !== 'number') {\n    utils.log.error('Invalid revenue, need to set price field');\n    return false;\n  }\n  return true;\n};\n\n/**\n * @private\n */\nRevenue.prototype._toJSONObject = function _toJSONObject() {\n  var obj = type(this._properties) === 'object' ? this._properties : {};\n  if (this._productId !== null) {\n    obj[Constants.REVENUE_PRODUCT_ID] = this._productId;\n  }\n  if (this._quantity !== null) {\n    obj[Constants.REVENUE_QUANTITY] = this._quantity;\n  }\n  if (this._price !== null) {\n    obj[Constants.REVENUE_PRICE] = this._price;\n  }\n  if (this._revenueType !== null) {\n    obj[Constants.REVENUE_REVENUE_TYPE] = this._revenueType;\n  }\n  return obj;\n};\n\n/**\n * Source: [jed's gist]{@link https://gist.github.com/982883}.\n * Returns a random v4 UUID of the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx,\n * where each x is replaced with a random hexadecimal digit from 0 to f, and\n * y is replaced with a random hexadecimal digit from 8 to b.\n * Used to generate UUIDs for deviceIds.\n * @private\n */\nvar uuid = function uuid(a) {\n  return a // if the placeholder was passed, return\n  ?\n  // a random number from 0 to 15\n  (a ^\n  // unless b is 8,\n  Math.random() *\n  // in which case\n  16 >>\n  // a random number from\n  a / 4\n  // 8 to 11\n  ).toString(16) // in hexadecimal\n  :\n  // or otherwise a concatenated string:\n  ([1e7] +\n  // 10000000 +\n  -1e3 +\n  // -1000 +\n  -4e3 +\n  // -4000 +\n  -8e3 +\n  // -80000000 +\n  -1e11\n  // -100000000000,\n  ).replace(\n  // replacing\n  /[018]/g,\n  // zeroes, ones, and eights with\n  uuid // random hex digits\n  );\n};\n\nvar getLanguage = function getLanguage() {\n  return typeof navigator !== 'undefined' && (navigator.languages && navigator.languages[0] || navigator.language || navigator.userLanguage) || '';\n};\nvar language = {\n  getLanguage: getLanguage\n};\n\n/**\n * AmplitudeServerZone is for Data Residency and handling server zone related properties.\n * The server zones now are US and EU.\n *\n * For usage like sending data to Amplitude's EU servers, you need to configure the serverZone during nitializing.\n */\nvar AmplitudeServerZone = {\n  US: 'US',\n  EU: 'EU'\n};\nvar getEventLogApi = function getEventLogApi(serverZone) {\n  var eventLogUrl = Constants.EVENT_LOG_URL;\n  switch (serverZone) {\n    case AmplitudeServerZone.EU:\n      eventLogUrl = Constants.EVENT_LOG_EU_URL;\n      break;\n    case AmplitudeServerZone.US:\n      eventLogUrl = Constants.EVENT_LOG_URL;\n      break;\n  }\n  return eventLogUrl;\n};\nvar getDynamicConfigApi = function getDynamicConfigApi(serverZone) {\n  var dynamicConfigUrl = Constants.DYNAMIC_CONFIG_URL;\n  switch (serverZone) {\n    case AmplitudeServerZone.EU:\n      dynamicConfigUrl = Constants.DYNAMIC_CONFIG_EU_URL;\n      break;\n    case AmplitudeServerZone.US:\n      dynamicConfigUrl = Constants.DYNAMIC_CONFIG_URL;\n      break;\n  }\n  return dynamicConfigUrl;\n};\n\nvar version = \"8.21.9\";\n\n/**\n * Options used when initializing Amplitude\n * @typedef {Object} Options\n * @property {string} [apiEndpoint=`api.amplitude.com`] - Endpoint to send amplitude event requests to.\n * @property {boolean} [batchEvents=`false`] -  If `true`, then events are batched together and uploaded only when the number of unsent events is greater than or equal to eventUploadThreshold or after eventUploadPeriodMillis milliseconds have passed since the first unsent event was logged.\n * @property {number} [cookieExpiration=`365`] - The number of days after which the Amplitude cookie will expire. 12 months is for GDPR compliance.\n * @property {string} [cookieName=`amplitude_id`] - *DEPRECATED*\n * @property {string} [sameSiteCookie='None'] -  Sets the SameSite flag on the amplitude cookie. Decides cookie privacy policy.\n * @property {boolean} [cookieForceUpgrade=`false`] - Forces pre-v6.0.0 instances to adopt post-v6.0.0 compat cookie formats.\n * @property {boolean} [deferInitialization=`null`] -  If `true`, disables the core functionality of the sdk, including saving a cookie and all logging, until explicitly enabled. To enable tracking, please call `amplitude.getInstance().enableTracking()` *Note: This will not affect users who already have an amplitude cookie. The decision to track events is determined by whether or not a user has an amplitude analytics cookie. If the `cookieExpiration</code> is manually defined to be a short lifespan, you may need to run `amplitude.getInstance().enableTracking()` upon the cookie expiring or upon logging in.*\n * @property {boolean} [disableCookies=`false`] -  Disable Ampllitude cookies altogether.\n * @property {string} [deviceId=A randomly generated UUID.] -  The custom Device ID to set. *Note: This is not recommended unless you know what you are doing (e.g. you have your own system for tracking user devices).*\n * @property {boolean} [deviceIdFromUrlParam=`false`] -  If `true`, then the SDK will parse Device ID values from the URL parameter amp_device_id if available. Device IDs defined in the configuration options during init will take priority over Device IDs from URL parameters.\n * @property {string} [domain=The top domain of the current page's URL. ('https://amplitude.com')] -  Set a custom domain for the Amplitude cookie. To include subdomains, add a preceding period, eg: `.amplitude.com`.\n * @property {number} [eventUploadPeriodMillis=`30000` (30 sec)] -  Amount of time in milliseconds that the SDK waits before uploading events if batchEvents is true.\n * @property {number} [eventUploadThreshold=`30`] -  Minimum number of events to batch together per request if batchEvents is true.\n * @property {boolean} [forceHttps=`true`] -  If `true`, the events will always be uploaded to HTTPS endpoint. Otherwise, it will use the embedding site's protocol.\n * @property {boolean} [includeFbclid=`false`] -  If `true`, captures the fbclid URL parameter as well as the user's initial_fbclid via a setOnce operation.\n * @property {boolean} [includeGclid=`false`] -  If `true`, captures the gclid URL parameter as well as the user's initial_gclid via a setOnce operation.\n * @property {boolean} [includeReferrer=`false`] -  If `true`, captures the referrer and referring_domain for each session, as well as the user's initial_referrer and initial_referring_domain via a setOnce operation.\n * @property {boolean} [includeUtm=`false`] -  If `true`, finds UTM parameters in the query string or the _utmz cookie, parses, and includes them as user properties on all events uploaded. This also captures initial UTM parameters for each session via a setOnce operation.\n * @property {Object} [ingestionMetadata] Ingestion metadata\n * @property {string} [ingestionMetadata.sourceName] source name in ingestion metadata, e.g. \"ampli\"\n * @property {string} [ingestionMetadata.sourceVersion] source version in ingestion metadata, e.g. \"1.0.0\"\n * @property {string} [language=The language determined by the browser] -  Custom language to set.\n * @property {Object} [library=`{ name: 'amplitude-js', version: packageJsonVersion }`] -  Values for the library version\n * @property {string} [logLevel=`WARN`] -  Level of logs to be printed in the developer console. Valid values are 'DISABLE', 'ERROR', 'WARN', 'INFO'. To learn more about the different options, see below.\n * @property {boolean} [logAttributionCapturedEvent=`false`] - If `true`, the SDK will log an Amplitude event anytime new attribution values are captured from the user. **Note: These events count towards your event volume.** Event name being logged: [Amplitude] Attribution Captured. Event Properties that can be logged: `utm_source`, `utm_medium`, `utm_campaign`, `utm_term`, `utm_content`, `referrer`, `referring_domain`, `gclid`, `fbclid`. For UTM properties to be logged, `includeUtm` must be set to `true`. For the `referrer` and `referring_domain` properties to be logged, `includeReferrer` must be set to `true`. For the `gclid` property to be logged, `includeGclid` must be set to `true`. For the `fbclid` property to be logged, `includeFbclid` must be set to `true`.\n * @property {boolean} [optOut=`false`] -  Whether or not to disable tracking for the current user.\n * @property {function} [onError=`() => {}`] - Function to call on error.\n * @property {function} [onExitPage=`() => {}`] - Function called when the user exits the browser. Useful logging on page exit.\n * @property {Object} [plan] Tracking plan properties\n * @property {string} [plan.branch] The tracking plan branch name e.g. \"main\"\n * @property {string} [plan.source] The tracking plan source e.g. \"web\"\n * @property {string} [plan.version] The tracking plan version e.g. \"1\", \"15\"\n * @property {string} [plan.versionId] The tracking plan version Id e.g. \"9ec23ba0-275f-468f-80d1-66b88bff9529\"\n * @property {string} [platform=`Web`] -  Platform device is running on. Defaults to `Web` (browser, including mobile browsers).\n * @property {number} [savedMaxCount=`1000`] -  Maximum number of events to save in localStorage. If more events are logged while offline, then old events are removed.\n * @property {boolean} [saveEvents=`true`] -  If `true`, saves events to localStorage and removes them upon successful upload. *Note: Without saving events, events may be lost if the user navigates to another page before the events are uploaded.*\n * @property {boolean} [saveParamsReferrerOncePerSession=`true`] -  If `true`, then includeGclid, includeFbclid, includeReferrer, and includeUtm will only track their respective properties once per session. New values that come in during the middle of the user's session will be ignored. Set to false to always capture new values.\n * @property {boolean} [secureCookie=`false`] -  If `true`, the amplitude cookie will be set with the Secure flag.\n * @property {number} [sessionTimeout=`30*60*1000` (30 min)] -  The time between logged events before a new session starts in milliseconds.\n * @property {string[]} [storage=`''`] - Sets storage strategy.  Options are 'cookies', 'localStorage', 'sessionStorage', or `none`. Will override `disableCookies` option\n * @property {Object} [trackingOptions=`{ city: true, country: true, carrier: true, device_manufacturer: true, device_model: true, dma: true, ip_address: true, language: true, os_name: true, os_version: true, platform: true, region: true, version_name: true}`] - Type of data associated with a user.\n * @property {string} [transport=`http`] - Network transport mechanism used to send events. Options are 'http' and 'beacon'.\n * @property {boolean} [unsetParamsReferrerOnNewSession=`false`] -  If `false`, the existing `referrer` and `utm_parameter` values will be carried through each new session. If set to `true`, the `referrer` and `utm_parameter` user properties, which include `referrer`, `utm_source`, `utm_medium`, `utm_campaign`, `utm_term`, and `utm_content`, will be set to `null` upon instantiating a new session. Note: This only works if `includeReferrer` or `includeUtm` is set to `true`.\n * @property {string} [unsentKey=`amplitude_unsent`] - localStorage key that stores unsent events.\n * @property {string} [unsentIdentifyKey=`amplitude_unsent_identify`] - localStorage key that stores unsent identifies.\n * @property {number} [uploadBatchSize=`100`] -  The maximum number of events to send to the server per request.\n * @property {Object} [headers=`{ 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }`] - Headers attached to an event(s) upload network request. Custom header properties are merged with this object.\n * @property {string} [serverZone] - For server zone related configuration, used for server api endpoint and dynamic configuration.\n * @property {boolean} [useDynamicConfig] - Enable dynamic configuration to find best server url for user.\n * @property {boolean} [serverZoneBasedApi] - To update api endpoint with serverZone change or not. For data residency, recommend to enable it unless using own proxy server.\n * @property {number} [sessionId=`null`] - The custom Session ID for the current session. *Note: This is not recommended unless you know what you are doing because the Session ID of a session is utilized for all session metrics in Amplitude.\n * @property {string} [partnerId=`null`] - The partner id value\n */\nvar DEFAULT_OPTIONS = {\n  apiEndpoint: Constants.EVENT_LOG_URL,\n  batchEvents: false,\n  cookieExpiration: 365,\n  // 12 months is for GDPR compliance\n  cookieName: 'amplitude_id',\n  // this is a deprecated option\n  sameSiteCookie: 'Lax',\n  // cookie privacy policy\n  cookieForceUpgrade: false,\n  deferInitialization: false,\n  disableCookies: false,\n  // this is a deprecated option\n  deviceIdFromUrlParam: false,\n  domain: '',\n  eventUploadPeriodMillis: 30 * 1000,\n  // 30s\n  eventUploadThreshold: 30,\n  forceHttps: true,\n  includeFbclid: false,\n  includeGclid: false,\n  includeReferrer: false,\n  includeUtm: false,\n  ingestionMetadata: {\n    sourceName: '',\n    sourceVersion: ''\n  },\n  language: language.getLanguage(),\n  library: {\n    name: 'amplitude-js',\n    version: version\n  },\n  logLevel: 'WARN',\n  logAttributionCapturedEvent: false,\n  optOut: false,\n  onError: function onError() {},\n  onExitPage: function onExitPage() {},\n  onNewSessionStart: function onNewSessionStart() {},\n  plan: {\n    branch: '',\n    source: '',\n    version: '',\n    versionId: ''\n  },\n  platform: 'Web',\n  savedMaxCount: 1000,\n  saveEvents: true,\n  saveParamsReferrerOncePerSession: true,\n  secureCookie: false,\n  sessionTimeout: 30 * 60 * 1000,\n  storage: Constants.STORAGE_DEFAULT,\n  trackingOptions: {\n    city: true,\n    country: true,\n    carrier: true,\n    device_manufacturer: true,\n    device_model: true,\n    dma: true,\n    ip_address: true,\n    language: true,\n    os_name: true,\n    os_version: true,\n    platform: true,\n    region: true,\n    version_name: true\n  },\n  transport: Constants.TRANSPORT_HTTP,\n  unsetParamsReferrerOnNewSession: false,\n  unsentKey: 'amplitude_unsent',\n  unsentIdentifyKey: 'amplitude_unsent_identify',\n  uploadBatchSize: 100,\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n    'Cross-Origin-Resource-Policy': 'cross-origin'\n  },\n  serverZone: AmplitudeServerZone.US,\n  useDynamicConfig: false,\n  serverZoneBasedApi: false,\n  sessionId: null,\n  partnerId: ''\n};\n\n/**\n * Dynamic Configuration\n * Find the best server url automatically based on app users' geo location.\n */\nvar ConfigManager = /*#__PURE__*/function () {\n  function ConfigManager() {\n    _classCallCheck(this, ConfigManager);\n    if (!ConfigManager.instance) {\n      this.ingestionEndpoint = Constants.EVENT_LOG_URL;\n      ConfigManager.instance = this;\n    }\n    return ConfigManager.instance;\n  }\n  _createClass(ConfigManager, [{\n    key: \"refresh\",\n    value: function refresh(serverZone, forceHttps, callback) {\n      var protocol = 'https';\n      if (!forceHttps && 'https:' !== GlobalScope.location.protocol) {\n        protocol = 'http';\n      }\n      var dynamicConfigUrl = protocol + '://' + getDynamicConfigApi(serverZone);\n      var self = this;\n      var isIE = GlobalScope.XDomainRequest ? true : false;\n      if (isIE) {\n        var xdr = new GlobalScope.XDomainRequest();\n        xdr.open('GET', dynamicConfigUrl, true);\n        xdr.onload = function () {\n          var response = JSON.parse(xdr.responseText);\n          self.ingestionEndpoint = response['ingestionEndpoint'];\n          if (callback) {\n            callback();\n          }\n        };\n        xdr.onerror = function () {};\n        xdr.ontimeout = function () {};\n        xdr.onprogress = function () {};\n        xdr.send();\n      } else {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', dynamicConfigUrl, true);\n        xhr.onreadystatechange = function () {\n          if (xhr.readyState === 4 && xhr.status === 200) {\n            var response = JSON.parse(xhr.responseText);\n            self.ingestionEndpoint = response['ingestionEndpoint'];\n            if (callback) {\n              callback();\n            }\n          }\n        };\n        xhr.send();\n      }\n    }\n  }]);\n  return ConfigManager;\n}();\nvar instance$1 = new ConfigManager();\n\n/**\n * AmplitudeClient SDK API - instance constructor.\n * The Amplitude class handles creation of client instances, all you need to do is call amplitude.getInstance()\n * @constructor AmplitudeClient\n * @public\n * @example var amplitudeClient = new AmplitudeClient();\n */\nvar AmplitudeClient = function AmplitudeClient(instanceName) {\n  if (!(0,_amplitude_utils__WEBPACK_IMPORTED_MODULE_4__.isBrowserEnv)() && !utils.isWebWorkerEnvironment()) {\n    utils.log.warn('amplitude-js will not work in a non-browser environment. If you are planning to add Amplitude to a node environment, please use @amplitude/node');\n  }\n  this._instanceName = utils.isEmptyString(instanceName) ? Constants.DEFAULT_INSTANCE : instanceName.toLowerCase();\n  this._unsentEvents = [];\n  this._unsentIdentifys = [];\n  this.options = _objectSpread2(_objectSpread2({}, DEFAULT_OPTIONS), {}, {\n    headers: _objectSpread2({}, DEFAULT_OPTIONS.headers),\n    ingestionMetadata: _objectSpread2({}, DEFAULT_OPTIONS.ingestionMetadata),\n    library: _objectSpread2({}, DEFAULT_OPTIONS.library),\n    plan: _objectSpread2({}, DEFAULT_OPTIONS.plan),\n    trackingOptions: _objectSpread2({}, DEFAULT_OPTIONS.trackingOptions)\n  });\n  this._q = []; // queue for proxied functions before script load\n  this._sending = false;\n  this._updateScheduled = false;\n  this._onInitCallbacks = [];\n  this._onNewSessionStartCallbacks = [];\n\n  // event meta data\n  this._eventId = 0;\n  this._identifyId = 0;\n  this._lastEventTime = null;\n  this._newSession = false;\n  // sequence used for by frontend for prioritizing event send retries\n  this._sequenceNumber = 0;\n  this._sessionId = null;\n  this._isInitialized = false;\n\n  // used to integrate with experiment SDK (client-side exposure tracking & real-time user properties)\n  this._connector = null;\n  this._userAgent = typeof navigator !== 'undefined' && navigator && navigator.userAgent || null;\n  this._ua = new (_amplitude_ua_parser_js__WEBPACK_IMPORTED_MODULE_2___default())(this._userAgent).getResult();\n};\nAmplitudeClient.prototype.Identify = Identify;\nAmplitudeClient.prototype.Revenue = Revenue;\n\n/**\n * Initializes the Amplitude Javascript SDK with your apiKey and any optional configurations.\n * This is required before any other methods can be called.\n * @public\n * @param {string} apiKey - The API key for your app.\n * @param {string} opt_userId - (optional) An identifier for this user.\n * @param {object} opt_config - (optional) Configuration options.\n * See [options.js](https://amplitude.github.io/Amplitude-JavaScript/Options) for a list of options and default values.\n * @param {function} opt_callback - (optional) Provide a callback function to run after initialization is complete.\n * @example amplitudeClient.init('API_KEY', 'USER_ID', {includeReferrer: true, includeUtm: true}, function() { alert('init complete'); });\n */\nAmplitudeClient.prototype.init = function init(apiKey, opt_userId, opt_config, opt_callback) {\n  var _this = this;\n  if (type(apiKey) !== 'string' || utils.isEmptyString(apiKey)) {\n    utils.log.error('Invalid apiKey. Please re-initialize with a valid apiKey');\n    return;\n  }\n  try {\n    // used to integrate with experiment SDK (client-side exposure tracking & real-time user properties)\n    this._connector = _amplitude_analytics_connector__WEBPACK_IMPORTED_MODULE_3__.AnalyticsConnector.getInstance(this._instanceName);\n    _parseConfig(this.options, opt_config);\n    if (((0,_amplitude_utils__WEBPACK_IMPORTED_MODULE_4__.isBrowserEnv)() || utils.isWebWorkerEnvironment()) && GlobalScope.Prototype !== undefined && Array.prototype.toJSON) {\n      (0,_amplitude_utils__WEBPACK_IMPORTED_MODULE_4__.prototypeJsFix)();\n      utils.log.warn('Prototype.js injected Array.prototype.toJSON. Deleting Array.prototype.toJSON to prevent double-stringify');\n    }\n    if (this.options.cookieName !== DEFAULT_OPTIONS.cookieName) {\n      utils.log.warn('The cookieName option is deprecated. We will be ignoring it for newer cookies');\n    }\n    if (this.options.serverZoneBasedApi) {\n      this.options.apiEndpoint = getEventLogApi(this.options.serverZone);\n    }\n    this._refreshDynamicConfig();\n    this.options.apiKey = apiKey;\n    this._storageSuffix = '_' + apiKey + (this._instanceName === Constants.DEFAULT_INSTANCE ? '' : '_' + this._instanceName);\n    this._storageSuffixV5 = apiKey.slice(0, 6);\n    this._oldCookiename = this.options.cookieName + this._storageSuffix;\n    this._unsentKey = this.options.unsentKey + this._storageSuffix;\n    this._unsentIdentifyKey = this.options.unsentIdentifyKey + this._storageSuffix;\n    this._cookieName = Constants.COOKIE_PREFIX + '_' + this._storageSuffixV5;\n    this.cookieStorage = new cookieStorage().getStorage(this.options.disableCookies);\n    this.cookieStorage.options({\n      expirationDays: this.options.cookieExpiration,\n      domain: this.options.domain,\n      secure: this.options.secureCookie,\n      sameSite: this.options.sameSiteCookie\n    });\n    this._metadataStorage = new MetadataStorage({\n      storageKey: this._cookieName,\n      disableCookies: this.options.disableCookies,\n      expirationDays: this.options.cookieExpiration,\n      domain: this.options.domain,\n      secure: this.options.secureCookie,\n      sameSite: this.options.sameSiteCookie,\n      storage: this.options.storage\n    });\n    var hasOldCookie = !!this.cookieStorage.get(this._oldCookiename);\n    var hasNewCookie = !!this._metadataStorage.load();\n    this._useOldCookie = !hasNewCookie && hasOldCookie && !this.options.cookieForceUpgrade;\n    var hasCookie = hasNewCookie || hasOldCookie;\n    if (this.options.deferInitialization && !hasCookie) {\n      this._deferInitialization(apiKey, opt_userId, opt_config, opt_callback);\n      return;\n    }\n    this.options.domain = this.cookieStorage.options().domain;\n    if (type(this.options.logLevel) === 'string') {\n      utils.setLogLevel(this.options.logLevel);\n    }\n    var trackingOptions = _generateApiPropertiesTrackingConfig(this);\n    this._apiPropertiesTrackingOptions = Object.keys(trackingOptions).length > 0 ? {\n      tracking_options: trackingOptions\n    } : {};\n    if (this.options.cookieForceUpgrade && hasOldCookie) {\n      if (!hasNewCookie) {\n        _upgradeCookieData(this);\n      }\n      this.cookieStorage.remove(this._oldCookiename);\n    }\n    _loadCookieData(this);\n    this._pendingReadStorage = true;\n    var initFromStorage = function initFromStorage(storedDeviceId) {\n      if (opt_config && opt_config.deviceId && !utils.validateDeviceId(opt_config.deviceId)) {\n        utils.log.error(\"Invalid device ID rejected. Randomly generated UUID will be used instead of \\\"\".concat(opt_config.deviceId, \"\\\"\"));\n        delete opt_config.deviceId;\n      }\n      _this.options.deviceId = _this._getInitialDeviceId(opt_config && opt_config.deviceId, storedDeviceId);\n      _this.options.userId = type(opt_userId) === 'string' && !utils.isEmptyString(opt_userId) && opt_userId || type(opt_userId) === 'number' && opt_userId.toString() || _this.options.userId || null;\n      var now = new Date().getTime();\n      var startNewSession = !_this._sessionId || !_this._lastEventTime || now - _this._lastEventTime > _this.options.sessionTimeout || _this.options.sessionId;\n      if (startNewSession) {\n        if (_this.options.unsetParamsReferrerOnNewSession) {\n          _this._unsetUTMParams();\n        }\n        _this._newSession = true;\n        _this._sessionId = _this.options.sessionId || now;\n        // reset this.options.sessionId to avoid re-usage\n        // use instance.getSessionId() to get session id\n        _this.options.sessionId = undefined;\n\n        // only capture UTM params and referrer if new session\n        if (_this.options.saveParamsReferrerOncePerSession) {\n          _this._trackParamsAndReferrer();\n        }\n      }\n      if (!_this.options.saveParamsReferrerOncePerSession) {\n        _this._trackParamsAndReferrer();\n      }\n\n      // load unsent events and identifies before any attempt to log new ones\n      if (_this.options.saveEvents) {\n        _validateUnsentEventQueue(_this._unsentEvents);\n        _validateUnsentEventQueue(_this._unsentIdentifys);\n      }\n      _this._lastEventTime = now;\n      _saveCookieData(_this);\n      _this._pendingReadStorage = false;\n      _this._sendEventsIfReady(); // try sending unsent events\n\n      for (var i = 0; i < _this._onInitCallbacks.length; i++) {\n        _this._onInitCallbacks[i](_this);\n      }\n      _this._onInitCallbacks = [];\n      _this._isInitialized = true;\n      if (startNewSession) {\n        _this._runNewSessionStartCallbacks();\n      }\n    };\n    if (this.options.saveEvents) {\n      this._unsentEvents = this._loadSavedUnsentEvents(this.options.unsentKey).map(function (event) {\n        return {\n          event: event\n        };\n      }).concat(this._unsentEvents);\n      this._unsentIdentifys = this._loadSavedUnsentEvents(this.options.unsentIdentifyKey).map(function (event) {\n        return {\n          event: event\n        };\n      }).concat(this._unsentIdentifys);\n    }\n    if (opt_config && opt_config.onNewSessionStart) {\n      this.onNewSessionStart(this.options.onNewSessionStart);\n    }\n    initFromStorage();\n    this.runQueuedFunctions();\n    if (type(opt_callback) === 'function') {\n      opt_callback(this);\n    }\n    var onExitPage = this.options.onExitPage;\n    if (type(onExitPage) === 'function' && GlobalScope.addEventListener) {\n      if (!this.pageHandlersAdded) {\n        this.pageHandlersAdded = true;\n        var handleVisibilityChange = function handleVisibilityChange() {\n          var prevTransport = _this.options.transport;\n          _this.setTransport(Constants.TRANSPORT_BEACON);\n          onExitPage();\n          _this.setTransport(prevTransport);\n        };\n\n        // Monitoring just page exits because that is the most requested feature for now\n        // \"If you're specifically trying to detect page unload events, the pagehide event is the best option.\"\n        // https://developer.mozilla.org/en-US/docs/Web/API/Window/pagehide_event\n        GlobalScope.addEventListener('pagehide', function () {\n          handleVisibilityChange();\n        }, false);\n      }\n    }\n\n    // Sets an event receiver to receive and forward exposure events from the experiment SDK.\n    this._connector.eventBridge.setEventReceiver(function (event) {\n      _this._logEvent(event.eventType, event.eventProperties, event.userProperties);\n    });\n\n    // Set the user ID and device ID in the core identity store to enable fetching variants.\n    var editor = this._connector.identityStore.editIdentity();\n    if (this.options.deviceId) {\n      editor.setDeviceId(this.options.deviceId);\n    }\n    if (this.options.userId) {\n      editor.setUserId(this.options.userId);\n    }\n    editor.commit();\n  } catch (err) {\n    utils.log.error(err);\n    if (opt_config && type(opt_config.onError) === 'function') {\n      opt_config.onError(err);\n    }\n  }\n};\nAmplitudeClient.prototype._runNewSessionStartCallbacks = function () {\n  for (var i = 0; i < this._onNewSessionStartCallbacks.length; i++) {\n    this._onNewSessionStartCallbacks[i](this);\n  }\n};\nAmplitudeClient.prototype.deleteLowerLevelDomainCookies = function () {\n  var host = utils.getHost();\n  var cookieHost = this.options.domain && this.options.domain[0] === '.' ? this.options.domain.slice(1) : this.options.domain;\n  if (!cookieHost || !utils.isWebWorkerEnvironment()) {\n    return;\n  }\n  if (host !== cookieHost) {\n    if (new RegExp(cookieHost + '$').test(host)) {\n      var hostParts = host.split('.');\n      var cookieHostParts = cookieHost.split('.');\n      for (var i = hostParts.length; i > cookieHostParts.length; --i) {\n        var deleteDomain = hostParts.slice(hostParts.length - i).join('.');\n        baseCookie.set(this._cookieName, null, {\n          domain: '.' + deleteDomain\n        });\n      }\n      baseCookie.set(this._cookieName, null, {});\n    }\n  }\n};\nAmplitudeClient.prototype._getInitialDeviceId = function (configDeviceId, storedDeviceId) {\n  if (configDeviceId) {\n    return configDeviceId;\n  }\n  if (this.options.deviceIdFromUrlParam) {\n    var deviceIdFromUrlParam = this._getDeviceIdFromUrlParam(this._getUrlParams());\n    if (deviceIdFromUrlParam) {\n      return deviceIdFromUrlParam;\n    }\n  }\n  if (this.options.deviceId) {\n    return this.options.deviceId;\n  }\n  if (storedDeviceId) {\n    return storedDeviceId;\n  }\n  return base64Id();\n};\n\n// validate properties for unsent events\nvar _validateUnsentEventQueue = function _validateUnsentEventQueue(queue) {\n  for (var i = 0; i < queue.length; i++) {\n    var userProperties = queue[i].event.user_properties;\n    var eventProperties = queue[i].event.event_properties;\n    var groups = queue[i].event.groups;\n    queue[i].event.user_properties = utils.validateProperties(userProperties);\n    queue[i].event.event_properties = utils.validateProperties(eventProperties);\n    queue[i].event.groups = utils.validateGroups(groups);\n  }\n};\n\n/**\n * @private\n */\nAmplitudeClient.prototype._trackParamsAndReferrer = function _trackParamsAndReferrer() {\n  var utmProperties;\n  var referrerProperties;\n  var gclidProperties;\n  var fbclidProperties;\n  if (this.options.includeUtm) {\n    utmProperties = this._initUtmData();\n  }\n  if (this.options.includeReferrer) {\n    referrerProperties = this._saveReferrer(this._getReferrer());\n  }\n  if (this.options.includeGclid) {\n    gclidProperties = this._saveGclid(this._getUrlParams());\n  }\n  if (this.options.includeFbclid) {\n    fbclidProperties = this._saveFbclid(this._getUrlParams());\n  }\n  if (this.options.logAttributionCapturedEvent) {\n    var attributionProperties = _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, utmProperties), referrerProperties), gclidProperties), fbclidProperties);\n    if (Object.keys(attributionProperties).length > 0) {\n      this.logEvent(Constants.ATTRIBUTION_EVENT, attributionProperties);\n    }\n  }\n};\n\n/**\n * Parse and validate user specified config values and overwrite existing option value\n * DEFAULT_OPTIONS provides list of all config keys that are modifiable, as well as expected types for values\n * @private\n */\nvar _parseConfig = function _parseConfig(options, config) {\n  if (type(config) !== 'object') {\n    return;\n  }\n\n  // Add exception in headers\n  var freeFormObjectKeys = new Set(['headers']);\n  var zeroAllowedKeys = new Set(['eventUploadPeriodMillis']);\n\n  // validates config value is defined, is the correct type, and some additional value sanity checks\n  var parseValidateAndLoad = function parseValidateAndLoad(key) {\n    if (!Object.prototype.hasOwnProperty.call(options, key)) {\n      return; // skip bogus config values\n    }\n\n    var inputValue = config[key];\n    var expectedType = type(options[key]);\n    if (key === 'transport' && !utils.validateTransport(inputValue)) {\n      return;\n    } else if (key === 'sessionId' && inputValue !== null) {\n      options[key] = utils.validateSessionId(inputValue) ? inputValue : null;\n      return;\n    } else if (!utils.validateInput(inputValue, key + ' option', expectedType)) {\n      return;\n    }\n    if (expectedType === 'boolean') {\n      options[key] = !!inputValue;\n    } else if (expectedType === 'string' && !utils.isEmptyString(inputValue) || expectedType === 'number' && (inputValue > 0 || inputValue === 0 && zeroAllowedKeys.has(key)) || expectedType === 'function') {\n      options[key] = inputValue;\n    } else if (expectedType === 'object') {\n      _parseConfig(options[key], inputValue);\n    }\n  };\n  for (var key in config) {\n    if (freeFormObjectKeys.has(key)) {\n      options[key] = _objectSpread2(_objectSpread2({}, options[key]), config[key]);\n    } else if (Object.prototype.hasOwnProperty.call(config, key)) {\n      parseValidateAndLoad(key);\n    }\n  }\n};\n\n/**\n * Run functions queued up by proxy loading snippet\n * @private\n */\nAmplitudeClient.prototype.runQueuedFunctions = function () {\n  var queue = this._q;\n  this._q = [];\n  for (var i = 0; i < queue.length; i++) {\n    var fn = this[queue[i][0]];\n    if (type(fn) === 'function') {\n      fn.apply(this, queue[i].slice(1));\n    }\n  }\n};\n\n/**\n * Check that the apiKey is set before calling a function. Logs a warning message if not set.\n * @private\n */\nAmplitudeClient.prototype._apiKeySet = function _apiKeySet(methodName) {\n  if (utils.isEmptyString(this.options.apiKey)) {\n    utils.log.error('Invalid apiKey. Please set a valid apiKey with init() before calling ' + methodName);\n    return false;\n  }\n  return true;\n};\n\n/**\n * Load saved events from localStorage. JSON deserializes event array. Handles case where string is corrupted.\n * @private\n */\nAmplitudeClient.prototype._loadSavedUnsentEvents = function _loadSavedUnsentEvents(unsentKey) {\n  var savedUnsentEventsString = this._getFromStorage(localStorage$1, unsentKey);\n  var unsentEvents = this._parseSavedUnsentEventsString(savedUnsentEventsString, unsentKey);\n  this._setInStorage(localStorage$1, unsentKey, JSON.stringify(unsentEvents));\n  return unsentEvents;\n};\n\n/**\n * Load saved events from localStorage. JSON deserializes event array. Handles case where string is corrupted.\n * @private\n */\nAmplitudeClient.prototype._parseSavedUnsentEventsString = function _parseSavedUnsentEventsString(savedUnsentEventsString, unsentKey) {\n  if (utils.isEmptyString(savedUnsentEventsString)) {\n    return []; // new app, does not have any saved events\n  }\n\n  if (type(savedUnsentEventsString) === 'string') {\n    try {\n      var events = JSON.parse(savedUnsentEventsString);\n      if (type(events) === 'array') {\n        // handle case where JSON dumping of unsent events is corrupted\n        return events;\n      }\n    } catch (e) {} /* eslint-disable-line no-empty */\n  }\n\n  utils.log.error('Unable to load ' + unsentKey + ' events. Restart with a new empty queue.');\n  return [];\n};\n\n/**\n * Returns true if a new session was created during initialization, otherwise false.\n * @public\n * @return {boolean} Whether a new session was created during initialization.\n */\nAmplitudeClient.prototype.isNewSession = function isNewSession() {\n  return this._newSession;\n};\n\n/**\n * Add callbacks to call after init. Useful for users who load Amplitude through a snippet.\n * @public\n */\nAmplitudeClient.prototype.onInit = function onInit(callback) {\n  if (this._isInitialized) {\n    callback(this);\n  } else {\n    this._onInitCallbacks.push(callback);\n  }\n};\n\n/**\n * Add callbacks to call after new session start.\n * @public\n */\nAmplitudeClient.prototype.onNewSessionStart = function onNewSessionStart(callback) {\n  this._onNewSessionStartCallbacks.push(callback);\n};\n\n/**\n * Returns the id of the current session.\n * @public\n * @return {number} Id of the current session.\n */\nAmplitudeClient.prototype.getSessionId = function getSessionId() {\n  return this._sessionId;\n};\n\n/**\n * Increments the eventId and returns it.\n * @private\n */\nAmplitudeClient.prototype.nextEventId = function nextEventId() {\n  this._eventId++;\n  return this._eventId;\n};\n\n/**\n * Increments the identifyId and returns it.\n * @private\n */\nAmplitudeClient.prototype.nextIdentifyId = function nextIdentifyId() {\n  this._identifyId++;\n  return this._identifyId;\n};\n\n/**\n * Increments the sequenceNumber and returns it.\n * @private\n */\nAmplitudeClient.prototype.nextSequenceNumber = function nextSequenceNumber() {\n  this._sequenceNumber++;\n  return this._sequenceNumber;\n};\n\n/**\n * Returns the total count of unsent events and identifys\n * @private\n */\nAmplitudeClient.prototype._unsentCount = function _unsentCount() {\n  return this._unsentEvents.length + this._unsentIdentifys.length;\n};\n\n/**\n * Send events if ready. Returns true if events are sent.\n * @private\n */\nAmplitudeClient.prototype._sendEventsIfReady = function _sendEventsIfReady() {\n  if (this._unsentCount() === 0) {\n    return false;\n  }\n\n  // if batching disabled, send any unsent events immediately\n  if (!this.options.batchEvents) {\n    this.sendEvents();\n    return true;\n  }\n\n  // if batching enabled, check if min threshold met for batch size\n  if (this._unsentCount() >= this.options.eventUploadThreshold) {\n    this.sendEvents();\n    return true;\n  }\n\n  // if beacon transport is activated, send events immediately\n  // because there is no way to retry them later\n  if (this.options.transport === Constants.TRANSPORT_BEACON) {\n    this.sendEvents();\n    return true;\n  }\n\n  // otherwise schedule an upload after 30s\n  if (!this._updateScheduled) {\n    // make sure we only schedule 1 upload\n    this._updateScheduled = true;\n    setTimeout(function () {\n      this._updateScheduled = false;\n      this.sendEvents();\n    }.bind(this), this.options.eventUploadPeriodMillis);\n  }\n  return false; // an upload was scheduled, no events were uploaded\n};\n\n/**\n * Clears any stored events and metadata. Storage is then re-created on next event sending.\n * @public\n * @return {boolean} True if metadata was cleared, false if none existed\n */\nAmplitudeClient.prototype.clearStorage = function clearStorage() {\n  return this._metadataStorage.clear();\n};\n\n/**\n * Helper function to fetch values from storage\n * Storage argument allows for localStoraoge and sessionStoraoge\n * @private\n */\nAmplitudeClient.prototype._getFromStorage = function _getFromStorage(storage, key) {\n  return storage.getItem(key + this._storageSuffix);\n};\n\n/**\n * Helper function to set values in storage\n * Storage argument allows for localStoraoge and sessionStoraoge\n * @private\n */\nAmplitudeClient.prototype._setInStorage = function _setInStorage(storage, key, value) {\n  storage.setItem(key + this._storageSuffix, value);\n};\n\n/**\n * Fetches deviceId, userId, event meta data from amplitude cookie\n * @private\n */\nvar _loadCookieData = function _loadCookieData(scope) {\n  if (!scope._useOldCookie) {\n    var props = scope._metadataStorage.load();\n    if (type(props) === 'object') {\n      _loadCookieDataProps(scope, props);\n    }\n    return;\n  }\n  var cookieData = scope.cookieStorage.get(scope._oldCookiename);\n  if (type(cookieData) === 'object') {\n    _loadCookieDataProps(scope, cookieData);\n    return;\n  }\n};\nvar _upgradeCookieData = function _upgradeCookieData(scope) {\n  var cookieData = scope.cookieStorage.get(scope._oldCookiename);\n  if (type(cookieData) === 'object') {\n    _loadCookieDataProps(scope, cookieData);\n    _saveCookieData(scope);\n  }\n};\nvar _loadCookieDataProps = function _loadCookieDataProps(scope, cookieData) {\n  if (cookieData.deviceId) {\n    scope.options.deviceId = cookieData.deviceId;\n  }\n  if (cookieData.userId) {\n    scope.options.userId = cookieData.userId;\n  }\n  if (cookieData.optOut !== null && cookieData.optOut !== undefined) {\n    // Do not clobber config opt out value if cookieData has optOut as false\n    if (cookieData.optOut !== false) {\n      scope.options.optOut = cookieData.optOut;\n    }\n  }\n  if (cookieData.sessionId) {\n    scope._sessionId = parseInt(cookieData.sessionId, 10);\n  }\n  if (cookieData.lastEventTime) {\n    scope._lastEventTime = parseInt(cookieData.lastEventTime, 10);\n  }\n  if (cookieData.eventId) {\n    scope._eventId = parseInt(cookieData.eventId, 10);\n  }\n  if (cookieData.identifyId) {\n    scope._identifyId = parseInt(cookieData.identifyId, 10);\n  }\n  if (cookieData.sequenceNumber) {\n    scope._sequenceNumber = parseInt(cookieData.sequenceNumber, 10);\n  }\n};\n\n/**\n * Saves deviceId, userId, event meta data to amplitude cookie\n * @private\n */\nvar _saveCookieData = function _saveCookieData(scope) {\n  var cookieData = {\n    deviceId: scope.options.deviceId,\n    userId: scope.options.userId,\n    optOut: scope.options.optOut,\n    sessionId: scope._sessionId,\n    lastEventTime: scope._lastEventTime,\n    eventId: scope._eventId,\n    identifyId: scope._identifyId,\n    sequenceNumber: scope._sequenceNumber\n  };\n  if (scope._useOldCookie) {\n    scope.cookieStorage.set(scope.options.cookieName + scope._storageSuffix, cookieData);\n  } else {\n    scope._metadataStorage.save(cookieData);\n  }\n};\n\n/**\n * Parse the utm properties out of cookies and query for adding to user properties.\n * @private\n */\nAmplitudeClient.prototype._initUtmData = function _initUtmData(queryParams, cookieParams) {\n  queryParams = queryParams || this._getUrlParams();\n  cookieParams = cookieParams || this.cookieStorage.get('__utmz');\n  var utmProperties = getUtmData(cookieParams, queryParams);\n  _sendParamsReferrerUserProperties(this, utmProperties);\n  return utmProperties;\n};\n\n/**\n * Unset the utm params from the Amplitude instance and update the identify.\n * @private\n */\nAmplitudeClient.prototype._unsetUTMParams = function _unsetUTMParams() {\n  var identify = new Identify();\n  identify.unset(Constants.REFERRER);\n  identify.unset(Constants.REFERRING_DOMAIN);\n  identify.unset(Constants.UTM_SOURCE);\n  identify.unset(Constants.UTM_MEDIUM);\n  identify.unset(Constants.UTM_CAMPAIGN);\n  identify.unset(Constants.UTM_TERM);\n  identify.unset(Constants.UTM_CONTENT);\n  this.identify(identify);\n};\n\n/**\n * The calling function should determine when it is appropriate to send these user properties. This function\n * will no longer contain any session storage checking logic.\n * @private\n */\nvar _sendParamsReferrerUserProperties = function _sendParamsReferrerUserProperties(scope, userProperties) {\n  if (type(userProperties) !== 'object' || Object.keys(userProperties).length === 0) {\n    return;\n  }\n\n  // setOnce the initial user properties\n  var identify = new Identify();\n  for (var key in userProperties) {\n    if (Object.prototype.hasOwnProperty.call(userProperties, key)) {\n      identify.setOnce('initial_' + key, userProperties[key]);\n      identify.set(key, userProperties[key]);\n    }\n  }\n  scope.identify(identify);\n};\n\n/**\n * @private\n */\nAmplitudeClient.prototype._getReferrer = function _getReferrer() {\n  var urlRefer = this._getReferrerFromUrlParam(this._getUrlParams());\n  if (urlRefer) return urlRefer;else return typeof document !== 'undefined' ? document.referrer : '';\n};\n\n/**\n * @private\n */\nAmplitudeClient.prototype._getUrlParams = function _getUrlParams() {\n  return GlobalScope.location.search;\n};\n\n/**\n * Try to fetch Google Gclid from url params.\n * @private\n */\nAmplitudeClient.prototype._saveGclid = function _saveGclid(urlParams) {\n  var gclid = utils.getQueryParam('gclid', urlParams);\n  if (utils.isEmptyString(gclid)) {\n    return;\n  }\n  var gclidProperties = {\n    gclid: gclid\n  };\n  _sendParamsReferrerUserProperties(this, gclidProperties);\n  return gclidProperties;\n};\n\n/**\n * Try to fetch Facebook Fbclid from url params.\n * @private\n */\nAmplitudeClient.prototype._saveFbclid = function _saveFbclid(urlParams) {\n  var fbclid = utils.getQueryParam('fbclid', urlParams);\n  if (utils.isEmptyString(fbclid)) {\n    return;\n  }\n  var fbclidProperties = {\n    fbclid: fbclid\n  };\n  _sendParamsReferrerUserProperties(this, fbclidProperties);\n  return fbclidProperties;\n};\n\n/**\n * Try to fetch Amplitude device id from url params.\n * @private\n */\nAmplitudeClient.prototype._getDeviceIdFromUrlParam = function _getDeviceIdFromUrlParam(urlParams) {\n  return utils.getQueryParam(Constants.AMP_DEVICE_ID_PARAM, urlParams);\n};\n\n/**\n * Try to fetch referrer from url params.\n * @private\n */\nAmplitudeClient.prototype._getReferrerFromUrlParam = function _getReferrerFromUrlParam(urlParams) {\n  return utils.getQueryParam(Constants.AMP_REFERRER_PARAM, urlParams);\n};\n\n/**\n * Parse the domain from referrer info\n * @private\n */\nAmplitudeClient.prototype._getReferringDomain = function _getReferringDomain(referrer) {\n  if (utils.isEmptyString(referrer)) {\n    return null;\n  }\n  var parts = referrer.split('/');\n  if (parts.length >= 3) {\n    return parts[2];\n  }\n  return null;\n};\n\n/**\n * Fetch the referrer information, parse the domain and send.\n * Since user properties are propagated on the server, only send once per session, don't need to send with every event\n * @private\n */\nAmplitudeClient.prototype._saveReferrer = function _saveReferrer(referrer) {\n  if (utils.isEmptyString(referrer)) {\n    return;\n  }\n  var referrerInfo = {\n    referrer: referrer,\n    referring_domain: this._getReferringDomain(referrer)\n  };\n  _sendParamsReferrerUserProperties(this, referrerInfo);\n  return referrerInfo;\n};\n\n/**\n * Saves unsent events and identifies to localStorage. JSON stringifies event queues before saving.\n * Note: this is called automatically every time events are logged, unless you explicitly set option saveEvents to false.\n * @private\n */\nAmplitudeClient.prototype.saveEvents = function saveEvents() {\n  try {\n    var serializedUnsentEvents = JSON.stringify(this._unsentEvents.map(function (_ref) {\n      var event = _ref.event;\n      return event;\n    }));\n    this._setInStorage(localStorage$1, this.options.unsentKey, serializedUnsentEvents);\n  } catch (e) {} /* eslint-disable-line no-empty */\n\n  try {\n    var serializedIdentifys = JSON.stringify(this._unsentIdentifys.map(function (unsentIdentify) {\n      return unsentIdentify.event;\n    }));\n    this._setInStorage(localStorage$1, this.options.unsentIdentifyKey, serializedIdentifys);\n  } catch (e) {} /* eslint-disable-line no-empty */\n};\n\n/**\n * Sets a customer domain for the amplitude cookie. Useful if you want to support cross-subdomain tracking.\n * @public\n * @param {string} domain to set.\n * @example amplitudeClient.setDomain('.amplitude.com');\n */\nAmplitudeClient.prototype.setDomain = function setDomain(domain) {\n  if (this._shouldDeferCall()) {\n    return this._q.push(['setDomain'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  if (!utils.validateInput(domain, 'domain', 'string')) {\n    return;\n  }\n  try {\n    this.cookieStorage.options({\n      expirationDays: this.options.cookieExpiration,\n      secure: this.options.secureCookie,\n      domain: domain,\n      sameSite: this.options.sameSiteCookie\n    });\n    this.options.domain = this.cookieStorage.options().domain;\n    _loadCookieData(this);\n    _saveCookieData(this);\n  } catch (e) {\n    utils.log.error(e);\n  }\n};\n\n/**\n * Sets an identifier for the current user.\n * @public\n * @param {string} userId - identifier to set. Can be null.\n * @param {boolean} startNewSession - (optional) if start a new session or not\n * @example amplitudeClient.setUserId('joe@gmail.com');\n */\nAmplitudeClient.prototype.setUserId = function setUserId(userId) {\n  var startNewSession = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (!utils.validateInput(startNewSession, 'startNewSession', 'boolean')) {\n    return;\n  }\n  if (this._shouldDeferCall()) {\n    return this._q.push(['setUserId'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  try {\n    this.options.userId = userId !== undefined && userId !== null && '' + userId || null;\n    if (startNewSession) {\n      if (this.options.unsetParamsReferrerOnNewSession) {\n        this._unsetUTMParams();\n      }\n      this._newSession = true;\n      this._sessionId = new Date().getTime();\n      this._runNewSessionStartCallbacks();\n\n      // only capture UTM params and referrer if new session\n      if (this.options.saveParamsReferrerOncePerSession) {\n        this._trackParamsAndReferrer();\n      }\n    }\n    _saveCookieData(this);\n\n    // Update core identity store to propagate new user info\n    // to experiment SDK and trigger a fetch if the ID has changed.\n    if (this._connector) {\n      this._connector.identityStore.editIdentity().setUserId(this.options.userId).commit();\n    }\n  } catch (e) {\n    utils.log.error(e);\n  }\n};\n\n/**\n * Add user to a group or groups. You need to specify a groupType and groupName(s).\n *\n * For example you can group people by their organization.\n * In that case, groupType is \"orgId\" and groupName would be the actual ID(s).\n * groupName can be a string or an array of strings to indicate a user in multiple gruups.\n * You can also call setGroup multiple times with different groupTypes to track multiple types of groups (up to 5 per app).\n *\n * Note: this will also set groupType: groupName as a user property.\n * See the [advanced topics article](https://developers.amplitude.com/docs/javascript#user-groups) for more information.\n * @public\n * @param {string} groupType - the group type (ex: orgId)\n * @param {string|list} groupName - the name of the group (ex: 15), or a list of names of the groups\n * @example amplitudeClient.setGroup('orgId', 15); // this adds the current user to orgId 15.\n */\nAmplitudeClient.prototype.setGroup = function (groupType, groupName) {\n  if (this._shouldDeferCall()) {\n    return this._q.push(['setGroup'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  if (!this._apiKeySet('setGroup()') || !utils.validateInput(groupType, 'groupType', 'string') || utils.isEmptyString(groupType)) {\n    return;\n  }\n  var groups = {};\n  groups[groupType] = groupName;\n  var identify = new Identify().set(groupType, groupName);\n  this._logEvent(Constants.IDENTIFY_EVENT, null, null, identify.userPropertiesOperations, groups, null, null, null);\n};\n\n/**\n * Sets whether to opt current user out of tracking.\n * @public\n * @param {boolean} enable - if true then no events will be logged or sent.\n * @example: amplitude.setOptOut(true);\n */\nAmplitudeClient.prototype.setOptOut = function setOptOut(enable) {\n  if (this._shouldDeferCall()) {\n    return this._q.push(['setOptOut'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  if (!utils.validateInput(enable, 'enable', 'boolean')) {\n    return;\n  }\n  try {\n    this.options.optOut = enable;\n    _saveCookieData(this);\n  } catch (e) {\n    utils.log.error(e);\n  }\n};\n\n/**\n * Set a custom Session ID for the current session.\n * Note: This is not recommended unless you know what you are doing because the Session ID of a session is utilized for all session metrics in Amplitude.\n * The Session ID to set for the current session must be in milliseconds since epoch (Unix Timestamp).\n * @public\n * @param {int} sessionId to set.\n * @example amplitudeClient.setSessionId(1622158968000);\n */\nAmplitudeClient.prototype.setSessionId = function setSessionId(sessionId) {\n  if (!utils.validateInput(sessionId, 'sessionId', 'number')) {\n    return;\n  }\n  try {\n    this._sessionId = sessionId;\n    _saveCookieData(this);\n  } catch (e) {\n    utils.log.error(e);\n  }\n};\n\n/**\n * Sets the current Unix timestamp as the new Session ID for the instance.\n * @public\n * @example amplitudeClient.resetSessionId();\n */\nAmplitudeClient.prototype.resetSessionId = function resetSessionId() {\n  this.setSessionId(new Date().getTime());\n};\n\n/**\n * Regenerates a new random deviceId for current user. Note: this is not recommended unless you know what you\n * are doing. This can be used in conjunction with `setUserId(null)` to anonymize users after they log out.\n * With a null userId and a completely new deviceId, the current user would appear as a brand new user in dashboard.\n * This uses src/uuid.js to regenerate the deviceId.\n * @public\n */\nAmplitudeClient.prototype.regenerateDeviceId = function regenerateDeviceId() {\n  if (this._shouldDeferCall()) {\n    return this._q.push(['regenerateDeviceId'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  this.setDeviceId(base64Id());\n};\n\n/**\n * Sets a custom deviceId for current user. **Values may not have `.` inside them**\n * Note: this is not recommended unless you know what you are doing (like if you have your own system for managing deviceIds).\n * Make sure the deviceId you set is sufficiently unique\n * (we recommend something like a UUID - see src/uuid.js for an example of how to generate) to prevent conflicts with other devices in our system.\n * @public\n * @param {string} deviceId - custom deviceId for current user.\n * @example amplitudeClient.setDeviceId('45f0954f-eb79-4463-ac8a-233a6f45a8f0');\n */\nAmplitudeClient.prototype.setDeviceId = function setDeviceId(deviceId) {\n  if (this._shouldDeferCall()) {\n    return this._q.push(['setDeviceId'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  if (!utils.validateDeviceId(deviceId)) {\n    return;\n  }\n  try {\n    if (!utils.isEmptyString(deviceId)) {\n      this.options.deviceId = '' + deviceId;\n      _saveCookieData(this);\n\n      // Update core identity store to propagate new user info\n      // to experiment SDK and trigger a fetch if the ID has changed.\n      if (this._connector) {\n        this._connector.identityStore.editIdentity().setDeviceId(this.options.deviceId).commit();\n      }\n    }\n  } catch (e) {\n    utils.log.error(e);\n  }\n};\n\n/**\n * Sets the network transport type for events. Typically used to set to 'beacon'\n * on an end-of-lifecycle event handler such as `onpagehide` or `onvisibilitychange`\n * @public\n * @param {string} transport - transport mechanism to use for events. Must be one of `http` or `beacon`.\n * @example amplitudeClient.setTransport('beacon');\n */\nAmplitudeClient.prototype.setTransport = function setTransport(transport) {\n  if (this._shouldDeferCall()) {\n    return this._q.push(['setTransport'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  if (!utils.validateTransport(transport)) {\n    return;\n  }\n  this.options.transport = transport;\n};\n\n/**\n * Sets user properties for the current user.\n * @public\n * @param {object} - object with string keys and values for the user properties to set.\n * @param {boolean} - DEPRECATED opt_replace: in earlier versions of the JS SDK the user properties object was kept in\n * memory and replace = true would replace the object in memory. Now the properties are no longer stored in memory, so replace is deprecated.\n * @example amplitudeClient.setUserProperties({'gender': 'female', 'sign_up_complete': true})\n */\nAmplitudeClient.prototype.setUserProperties = function setUserProperties(userProperties) {\n  if (this._shouldDeferCall()) {\n    return this._q.push(['setUserProperties'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  if (!this._apiKeySet('setUserProperties()') || !utils.validateInput(userProperties, 'userProperties', 'object')) {\n    return;\n  }\n  // sanitize the userProperties dict before converting into identify\n  var sanitized = utils.truncate(utils.validateProperties(userProperties));\n  if (Object.keys(sanitized).length === 0) {\n    return;\n  }\n\n  // convert userProperties into an identify call\n  var identify = new Identify();\n  for (var property in sanitized) {\n    if (Object.prototype.hasOwnProperty.call(sanitized, property)) {\n      identify.set(property, sanitized[property]);\n    }\n  }\n  this.identify(identify);\n};\n\n/**\n * Clear all of the user properties for the current user. Note: clearing user properties is irreversible!\n * @public\n * @example amplitudeClient.clearUserProperties();\n */\nAmplitudeClient.prototype.clearUserProperties = function clearUserProperties() {\n  if (this._shouldDeferCall()) {\n    return this._q.push(['clearUserProperties'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  if (!this._apiKeySet('clearUserProperties()')) {\n    return;\n  }\n  var identify = new Identify();\n  identify.clearAll();\n  this.identify(identify);\n};\n\n/**\n * Applies the proxied functions on the proxied object to an instance of the real object.\n * Used to convert proxied Identify and Revenue objects.\n * @private\n */\nvar _convertProxyObjectToRealObject = function _convertProxyObjectToRealObject(instance, proxy) {\n  for (var i = 0; i < proxy._q.length; i++) {\n    var fn = instance[proxy._q[i][0]];\n    if (type(fn) === 'function') {\n      fn.apply(instance, proxy._q[i].slice(1));\n    }\n  }\n  return instance;\n};\n\n/**\n * Send an identify call containing user property operations to Amplitude servers.\n * See the [Identify](https://amplitude.github.io/Amplitude-JavaScript/Identify/)\n * reference page for more information on the Identify API and user property operations.\n * @param {Identify} identify_obj - the Identify object containing the user property operations to send.\n * @param {Amplitude~eventCallback} opt_callback - (optional) callback function to run when the identify event has been sent.\n * Note: the server response code and response body from the identify event upload are passed to the callback function.\n * @param {Amplitude~eventCallback} opt_error_callback - (optional) a callback function to run after the event logging\n * fails. The failure can be from the request being malformed or from a network failure\n * Note: the server response code and response body from the event upload are passed to the callback function.\n * @example\n * var identify = new amplitude.Identify().set('colors', ['rose', 'gold']).add('karma', 1).setOnce('sign_up_date', '2016-03-31');\n * amplitude.identify(identify);\n */\nAmplitudeClient.prototype.identify = function (identify_obj, opt_callback, opt_error_callback, outOfSession) {\n  if (this._shouldDeferCall()) {\n    return this._q.push(['identify'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  if (!this._apiKeySet('identify()')) {\n    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, 'No request sent', {\n      reason: 'API key is not set'\n    });\n    return;\n  }\n\n  // if identify input is a proxied object created by the async loading snippet, convert it into an identify object\n  if (type(identify_obj) === 'object' && Object.prototype.hasOwnProperty.call(identify_obj, '_q')) {\n    identify_obj = _convertProxyObjectToRealObject(new Identify(), identify_obj);\n  }\n  if (identify_obj instanceof Identify) {\n    // only send if there are operations\n    if (Object.keys(identify_obj.userPropertiesOperations).length > 0) {\n      return this._logEvent(Constants.IDENTIFY_EVENT, null, null, identify_obj.userPropertiesOperations, null, null, null, opt_callback, opt_error_callback, outOfSession);\n    } else {\n      _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, 'No request sent', {\n        reason: 'No user property operations'\n      });\n    }\n  } else {\n    utils.log.error('Invalid identify input type. Expected Identify object but saw ' + type(identify_obj));\n    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, 'No request sent', {\n      reason: 'Invalid identify input type'\n    });\n  }\n};\nAmplitudeClient.prototype.groupIdentify = function (group_type, group_name, identify_obj, opt_callback, opt_error_callback, outOfSession) {\n  if (this._shouldDeferCall()) {\n    return this._q.push(['groupIdentify'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  if (!this._apiKeySet('groupIdentify()')) {\n    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, 'No request sent', {\n      reason: 'API key is not set'\n    });\n    return;\n  }\n  if (!utils.validateInput(group_type, 'group_type', 'string') || utils.isEmptyString(group_type)) {\n    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, 'No request sent', {\n      reason: 'Invalid group type'\n    });\n    return;\n  }\n  if (group_name === null || group_name === undefined) {\n    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, 'No request sent', {\n      reason: 'Invalid group name'\n    });\n    return;\n  }\n\n  // if identify input is a proxied object created by the async loading snippet, convert it into an identify object\n  if (type(identify_obj) === 'object' && Object.prototype.hasOwnProperty.call(identify_obj, '_q')) {\n    identify_obj = _convertProxyObjectToRealObject(new Identify(), identify_obj);\n  }\n  if (identify_obj instanceof Identify) {\n    // only send if there are operations\n    if (Object.keys(identify_obj.userPropertiesOperations).length > 0) {\n      return this._logEvent(Constants.GROUP_IDENTIFY_EVENT, null, null, null, _defineProperty({}, group_type, group_name), identify_obj.userPropertiesOperations, null, opt_callback, opt_error_callback, outOfSession);\n    } else {\n      _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, 'No request sent', {\n        reason: 'No group property operations'\n      });\n    }\n  } else {\n    utils.log.error('Invalid identify input type. Expected Identify object but saw ' + type(identify_obj));\n    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, 'No request sent', {\n      reason: 'Invalid identify input type'\n    });\n  }\n};\n\n/**\n * Set a versionName for your application.\n * @public\n * @param {string} versionName - The version to set for your application.\n * @example amplitudeClient.setVersionName('1.12.3');\n */\nAmplitudeClient.prototype.setVersionName = function setVersionName(versionName) {\n  if (this._shouldDeferCall()) {\n    return this._q.push(['setVersionName'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  if (!utils.validateInput(versionName, 'versionName', 'string')) {\n    return;\n  }\n  this.options.versionName = versionName;\n};\n\n/**\n * Private logEvent method. Keeps apiProperties from being publicly exposed.\n * @private\n */\nAmplitudeClient.prototype._logEvent = function _logEvent(eventType, eventProperties, apiProperties, userProperties, groups, groupProperties, timestamp, callback, errorCallback, outOfSession) {\n  _loadCookieData(this); // reload cookie before each log event to sync event meta-data between windows and tabs\n\n  if (!eventType) {\n    _logErrorsWithCallbacks(callback, errorCallback, 0, 'No request sent', {\n      reason: 'Missing eventType'\n    });\n    return;\n  }\n  if (this.options.optOut) {\n    _logErrorsWithCallbacks(callback, errorCallback, 0, 'No request sent', {\n      reason: 'optOut is set to true'\n    });\n    return;\n  }\n  try {\n    var eventId;\n    if (eventType === Constants.IDENTIFY_EVENT || eventType === Constants.GROUP_IDENTIFY_EVENT) {\n      eventId = this.nextIdentifyId();\n    } else {\n      eventId = this.nextEventId();\n    }\n    var sequenceNumber = this.nextSequenceNumber();\n    var eventTime = type(timestamp) === 'number' ? timestamp : new Date().getTime();\n    if (outOfSession) {\n      this._sessionId = -1;\n    } else if (!this._sessionId || !this._lastEventTime || eventTime - this._lastEventTime > this.options.sessionTimeout) {\n      this._sessionId = eventTime;\n      this._runNewSessionStartCallbacks();\n    }\n    this._lastEventTime = eventTime;\n    _saveCookieData(this);\n    var osName = this._ua.browser.name;\n    var osVersion = this._ua.browser.major;\n    var deviceModel = this._ua.device.model || this._ua.os.name;\n    var deviceVendor = this._ua.device.vendor;\n    userProperties = userProperties || {};\n    var trackingOptions = _objectSpread2({}, this._apiPropertiesTrackingOptions);\n    apiProperties = _objectSpread2(_objectSpread2({}, apiProperties || {}), trackingOptions);\n    eventProperties = eventProperties || {};\n    groups = groups || {};\n    groupProperties = groupProperties || {};\n    var event = {\n      device_id: this.options.deviceId,\n      user_id: this.options.userId,\n      timestamp: eventTime,\n      event_id: eventId,\n      session_id: this._sessionId || -1,\n      event_type: eventType,\n      version_name: this.options.versionName || null,\n      platform: _shouldTrackField(this, 'platform') ? this.options.platform : null,\n      os_name: _shouldTrackField(this, 'os_name') ? osName || null : null,\n      os_version: _shouldTrackField(this, 'os_version') ? osVersion || null : null,\n      device_model: _shouldTrackField(this, 'device_model') ? deviceModel || null : null,\n      device_manufacturer: _shouldTrackField(this, 'device_manufacturer') ? deviceVendor || null : null,\n      language: _shouldTrackField(this, 'language') ? this.options.language : null,\n      api_properties: apiProperties,\n      event_properties: utils.truncate(utils.validateProperties(eventProperties)),\n      user_properties: utils.truncate(utils.validateProperties(userProperties)),\n      uuid: uuid(),\n      library: this.options.library,\n      sequence_number: sequenceNumber,\n      // for ordering events and identifys\n      groups: utils.truncate(utils.validateGroups(groups)),\n      group_properties: utils.truncate(utils.validateProperties(groupProperties)),\n      user_agent: this._userAgent,\n      partner_id: this.options.partnerId || null\n    };\n    if (_isObservePlanSet(this)) {\n      event.plan = {\n        branch: this.options.plan.branch || undefined,\n        source: this.options.plan.source || undefined,\n        version: this.options.plan.version || undefined,\n        versionId: this.options.plan.versionId || undefined\n      };\n    }\n    if (_isIngestionMetadataSet(this)) {\n      event.ingestion_metadata = {\n        source_name: this.options.ingestionMetadata.sourceName || undefined,\n        source_version: this.options.ingestionMetadata.sourceVersion || undefined\n      };\n    }\n    if (eventType === Constants.IDENTIFY_EVENT || eventType === Constants.GROUP_IDENTIFY_EVENT) {\n      this._unsentIdentifys.push({\n        event: event,\n        callback: callback,\n        errorCallback: errorCallback\n      });\n      this._limitEventsQueued(this._unsentIdentifys);\n    } else {\n      this._unsentEvents.push({\n        event: event,\n        callback: callback,\n        errorCallback: errorCallback\n      });\n      this._limitEventsQueued(this._unsentEvents);\n    }\n    if (this.options.saveEvents) {\n      this.saveEvents();\n    }\n    this._sendEventsIfReady();\n\n    // In the case of an identify event, update the core user store so the experiment SDK can fetch new variants and\n    // utilize user properties in real time.\n    if (eventType === Constants.IDENTIFY_EVENT && this._connector) {\n      this._connector.identityStore.editIdentity().updateUserProperties(utils.truncate(utils.validateProperties(userProperties))).commit();\n    }\n    return eventId;\n  } catch (e) {\n    utils.log.error(e);\n  }\n};\nvar _isObservePlanSet = function _isObservePlanSet(scope) {\n  return scope.options.plan && (scope.options.plan.source || scope.options.plan.branch || scope.options.plan.version || scope.options.plan.versionId);\n};\nvar _isIngestionMetadataSet = function _isIngestionMetadataSet(scope) {\n  return scope.options.ingestionMetadata && (scope.options.ingestionMetadata.sourceName || scope.options.ingestionMetadata.sourceVersion);\n};\nvar _shouldTrackField = function _shouldTrackField(scope, field) {\n  return !!scope.options.trackingOptions[field];\n};\nvar _generateApiPropertiesTrackingConfig = function _generateApiPropertiesTrackingConfig(scope) {\n  // to limit size of config payload, only send fields that have been disabled\n  var fields = ['city', 'country', 'dma', 'ip_address', 'region'];\n  var config = {};\n  for (var i = 0; i < fields.length; i++) {\n    var field = fields[i];\n    if (!_shouldTrackField(scope, field)) {\n      config[field] = false;\n    }\n  }\n  return config;\n};\n\n/**\n * Remove old events from the beginning of the array if too many have accumulated. Default limit is 1000 events.\n * @private\n */\nAmplitudeClient.prototype._limitEventsQueued = function _limitEventsQueued(queue) {\n  if (queue.length > this.options.savedMaxCount) {\n    var deletedEvents = queue.splice(0, queue.length - this.options.savedMaxCount);\n    deletedEvents.forEach(function (event) {\n      _logErrorsWithCallbacks(event.callback, event.errorCallback, 0, 'No request sent', {\n        reason: 'Event dropped because options.savedMaxCount exceeded. User may be offline or have a content blocker'\n      });\n    });\n  }\n};\n\n/**\n * This is the callback for logEvent and identify calls. It gets called after the event/identify is uploaded,\n * and the server response code and response body from the upload request are passed to the callback function.\n * @callback Amplitude~eventCallback\n * @param {number} responseCode - Server response code for the event / identify upload request.\n * @param {string} responseBody - Server response body for the event / identify upload request.\n * @param {object} details - (optional) Additional information associated with sending event.\n */\n\n/**\n * Log an event with eventType and eventProperties\n * @public\n * @param {string} eventType - name of event\n * @param {object} eventProperties - (optional) an object with string keys and values for the event properties.\n * @param {Amplitude~eventCallback} opt_callback - (optional) a callback function to run after the event is logged.\n * Note: the server response code and response body from the event upload are passed to the callback function.\n * @param {Amplitude~eventCallback} opt_error_callback - (optional) a callback function to run after the event logging\n * fails. The failure can be from the request being malformed or from a network failure\n * Note: the server response code and response body from the event upload are passed to the callback function.\n * @param {boolean} outOfSession - (optional) if this event is out of session or not\n * @example amplitudeClient.logEvent('Clicked Homepage Button', {'finished_flow': false, 'clicks': 15});\n */\nAmplitudeClient.prototype.logEvent = function logEvent(eventType, eventProperties, opt_callback, opt_error_callback) {\n  var outOfSession = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (this._shouldDeferCall()) {\n    return this._q.push(['logEvent'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  return this.logEventWithTimestamp(eventType, eventProperties, null, opt_callback, opt_error_callback, outOfSession);\n};\n\n/**\n * Log an event with eventType and eventProperties and a custom timestamp\n * @public\n * @param {string} eventType - name of event\n * @param {object} eventProperties - (optional) an object with string keys and values for the event properties.\n * @param {number} timestamp - (optional) the custom timestamp as milliseconds since epoch.\n * @param {Amplitude~eventCallback} opt_callback - (optional) a callback function to run after the event is logged.\n * Note: the server response code and response body from the event upload are passed to the callback function.\n * @param {Amplitude~eventCallback} opt_error_callback - (optional) a callback function to run after the event logging\n * fails. The failure can be from the request being malformed or from a network failure\n * Note: the server response code and response body from the event upload are passed to the callback function.\n * @param {boolean} outOfSession - (optional) if out of the sessioin or not\n * @example amplitudeClient.logEventWithTimestamp('Clicked Homepage Button', {'finished_flow': false, 'clicks': 15}, Date.now());\n */\nAmplitudeClient.prototype.logEventWithTimestamp = function logEvent(eventType, eventProperties, timestamp, opt_callback, opt_error_callback) {\n  var outOfSession = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  if (this._shouldDeferCall()) {\n    return this._q.push(['logEventWithTimestamp'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  if (!this._apiKeySet('logEvent()')) {\n    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, 'No request sent', {\n      reason: 'API key not set'\n    });\n    return -1;\n  }\n  if (!utils.validateInput(eventType, 'eventType', 'string')) {\n    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, 'No request sent', {\n      reason: 'Invalid type for eventType'\n    });\n    return -1;\n  }\n  if (utils.isEmptyString(eventType)) {\n    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, 'No request sent', {\n      reason: 'Missing eventType'\n    });\n    return -1;\n  }\n  if (!utils.validateInput(outOfSession, 'outOfSession', 'boolean')) {\n    _logErrorsWithCallbacks(opt_callback, opt_error_callback, 0, 'No request sent', {\n      reason: 'Invalid outOfSession value'\n    });\n  }\n  return this._logEvent(eventType, eventProperties, null, null, null, null, timestamp, opt_callback, opt_error_callback, outOfSession);\n};\n\n/**\n * Log an event with eventType, eventProperties, and groups. Use this to set event-level groups.\n * Note: the group(s) set only apply for the specific event type being logged and does not persist on the user\n * (unless you explicitly set it with setGroup).\n *\n * See the [advanced topics article](https://developers.amplitude.com/docs/javascript#user-groups) for more information\n * about groups and Count by Distinct on the Amplitude platform.\n * @public\n * @param {string} eventType - name of event\n * @param {object} eventProperties - (optional) an object with string keys and values for the event properties.\n * @param {object} groups - (optional) an object with string groupType: groupName values for the event being logged.\n * groupName can be a string or an array of strings.\n * @param {Amplitude~eventCallback} opt_callback - (optional) a callback function to run after the event is logged.\n * Note: the server response code and response body from the event upload are passed to the callback function.\n * @param {Amplitude~eventCallback} opt_error_callback - (optional) a callback function to run after the event logging\n * fails. The failure can be from the request being malformed or from a network failure\n * Note: the server response code and response body from the event upload are passed to the callback function.\n * @example amplitudeClient.logEventWithGroups('Clicked Button', null, {'orgId': 24});\n */\nAmplitudeClient.prototype.logEventWithGroups = function (eventType, eventProperties, groups, opt_callback, opt_error_callback) {\n  var outOfSession = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  if (this._shouldDeferCall()) {\n    return this._q.push(['logEventWithGroups'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  if (!this._apiKeySet('logEventWithGroups()')) {\n    _logErrorsWithCallbacks(event.callback, event.errorCallback, 0, 'No request sent', {\n      reason: 'API key not set'\n    });\n    return -1;\n  }\n  if (!utils.validateInput(eventType, 'eventType', 'string')) {\n    _logErrorsWithCallbacks(event.callback, event.errorCallback, 0, 'No request sent', {\n      reason: 'Invalid type for eventType'\n    });\n    return -1;\n  }\n  if (!utils.validateInput(outOfSession, 'outOfSession', 'boolean')) {\n    _logErrorsWithCallbacks(event.callback, event.errorCallback, 0, 'No request sent', {\n      reason: 'Invalid outOfSession value'\n    });\n  }\n  return this._logEvent(eventType, eventProperties, null, null, groups, null, null, opt_callback, opt_error_callback, outOfSession);\n};\n\n/**\n * Test that n is a number or a numeric value.\n * @private\n */\nvar _isNumber = function _isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\n/**\n * Handles errors that are sent to both callbacks\n * @private\n */\nvar _logErrorsWithCallbacks = function _logErrorsWithCallbacks(opt_callback, opt_error_callback, status, response, details) {\n  if (type(opt_callback) === 'function') {\n    opt_callback(status, response, details);\n  }\n  if (type(opt_error_callback) === 'function') {\n    opt_error_callback(status, response, details);\n  }\n};\n\n/**\n * Log revenue with Revenue interface. The new revenue interface allows for more revenue fields like\n * revenueType and event properties.\n *\n * See the [Revenue](https://amplitude.github.io/Amplitude-JavaScript/Revenue/)\n * reference page for more information on the Revenue interface and logging revenue.\n * @public\n * @param {Revenue} revenue_obj - the revenue object containing the revenue data being logged.\n * @example var revenue = new amplitude.Revenue().setProductId('productIdentifier').setPrice(10.99);\n * amplitude.logRevenueV2(revenue);\n */\nAmplitudeClient.prototype.logRevenueV2 = function logRevenueV2(revenue_obj) {\n  if (this._shouldDeferCall()) {\n    return this._q.push(['logRevenueV2'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  if (!this._apiKeySet('logRevenueV2()')) {\n    return;\n  }\n\n  // if revenue input is a proxied object created by the async loading snippet, convert it into an revenue object\n  if (type(revenue_obj) === 'object' && Object.prototype.hasOwnProperty.call(revenue_obj, '_q')) {\n    revenue_obj = _convertProxyObjectToRealObject(new Revenue(), revenue_obj);\n  }\n  if (revenue_obj instanceof Revenue) {\n    // only send if revenue is valid\n    if (revenue_obj && revenue_obj._isValidRevenue()) {\n      return this.logEvent(Constants.REVENUE_EVENT, revenue_obj._toJSONObject());\n    }\n  } else {\n    utils.log.error('Invalid revenue input type. Expected Revenue object but saw ' + type(revenue_obj));\n  }\n};\n{\n  /**\n   * Log revenue event with a price, quantity, and product identifier. DEPRECATED - use logRevenueV2\n   * @public\n   * @deprecated\n   * @param {number} price - price of revenue event\n   * @param {number} quantity - (optional) quantity of products in revenue event. If no quantity specified default to 1.\n   * @param {string} product - (optional) product identifier\n   * @example amplitudeClient.logRevenue(3.99, 1, 'product_1234');\n   */\n  AmplitudeClient.prototype.logRevenue = function logRevenue(price, quantity, product) {\n    if (this._shouldDeferCall()) {\n      return this._q.push(['logRevenue'].concat(Array.prototype.slice.call(arguments, 0)));\n    }\n\n    // Test that the parameters are of the right type.\n    if (!this._apiKeySet('logRevenue()') || !_isNumber(price) || quantity !== undefined && !_isNumber(quantity)) {\n      // utils.log('Price and quantity arguments to logRevenue must be numbers');\n      return -1;\n    }\n    return this._logEvent(Constants.REVENUE_EVENT, {}, {\n      productId: product,\n      special: 'revenue_amount',\n      quantity: quantity || 1,\n      price: price\n    }, null, null, null, null, null);\n  };\n}\n\n/**\n * Calls error callback on unsent events\n * @private\n */\nAmplitudeClient.prototype._logErrorsOnEvents = function _logErrorsOnEvents(maxEventId, maxIdentifyId, status, response) {\n  var queues = ['_unsentEvents', '_unsentIdentifys'];\n  for (var j = 0; j < queues.length; j++) {\n    var queue = queues[j];\n    var maxId = queue === '_unsentEvents' ? maxEventId : maxIdentifyId;\n    for (var i = 0; i < this[queue].length || 0; i++) {\n      var unsentEvent = this[queue][i];\n      if (unsentEvent.event.event_id <= maxId) {\n        if (unsentEvent.errorCallback) {\n          unsentEvent.errorCallback(status, response);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Remove events in storage with event ids up to and including maxEventId.\n * @private\n */\nAmplitudeClient.prototype.removeEvents = function removeEvents(maxEventId, maxIdentifyId, status, response) {\n  _removeEvents(this, '_unsentEvents', maxEventId, status, response);\n  _removeEvents(this, '_unsentIdentifys', maxIdentifyId, status, response);\n};\n\n/**\n * Helper function to remove events up to maxId from a single queue.\n * Does a true filter in case events get out of order or old events are removed.\n * @private\n */\nvar _removeEvents = function _removeEvents(scope, eventQueue, maxId, status, response) {\n  if (maxId < 0) {\n    return;\n  }\n  var filteredEvents = [];\n  for (var i = 0; i < scope[eventQueue].length || 0; i++) {\n    var unsentEvent = scope[eventQueue][i];\n    if (unsentEvent.event.event_id > maxId) {\n      filteredEvents.push(unsentEvent);\n    } else {\n      if (unsentEvent.callback) {\n        unsentEvent.callback(status, response);\n      }\n    }\n  }\n  scope[eventQueue] = filteredEvents;\n};\n\n/**\n * Send unsent events. Note: this is called automatically after events are logged if option batchEvents is false.\n * If batchEvents is true, then events are only sent when batch criterias are met.\n * @private\n */\nAmplitudeClient.prototype.sendEvents = function sendEvents() {\n  if (!this._apiKeySet('sendEvents()')) {\n    this.removeEvents(Infinity, Infinity, 0, 'No request sent', {\n      reason: 'API key not set'\n    });\n    return;\n  }\n  if (this.options.optOut) {\n    this.removeEvents(Infinity, Infinity, 0, 'No request sent', {\n      reason: 'Opt out is set to true'\n    });\n    return;\n  }\n\n  // How is it possible to get into this state?\n  if (this._unsentCount() === 0) {\n    return;\n  }\n\n  // We only make one request at a time. sendEvents will be invoked again once\n  // the last request completes.\n  // beacon data is sent synchronously, so don't pause for it\n  if (this.options.transport !== Constants.TRANSPORT_BEACON) {\n    if (this._sending) {\n      return;\n    }\n    this._sending = true;\n  }\n  var protocol = this.options.forceHttps ? 'https' : 'https:' === GlobalScope.location.protocol ? 'https' : 'http';\n  var url = protocol + '://' + this.options.apiEndpoint;\n\n  // fetch events to send\n  var numEvents = Math.min(this._unsentCount(), this.options.uploadBatchSize);\n  var mergedEvents = this._mergeEventsAndIdentifys(numEvents);\n  var maxEventId = mergedEvents.maxEventId;\n  var maxIdentifyId = mergedEvents.maxIdentifyId;\n  var events = JSON.stringify(mergedEvents.eventsToSend.map(function (_ref2) {\n    var event = _ref2.event;\n    return event;\n  }));\n  var uploadTime = new Date().getTime();\n  var data = {\n    client: this.options.apiKey,\n    e: events,\n    v: Constants.API_VERSION,\n    upload_time: uploadTime,\n    checksum: blueimp_md5__WEBPACK_IMPORTED_MODULE_0___default()(Constants.API_VERSION + this.options.apiKey + events + uploadTime)\n  };\n  if (this.options.transport === Constants.TRANSPORT_BEACON && typeof navigator !== 'undefined') {\n    var success = navigator.sendBeacon(url, new URLSearchParams(data));\n    if (success) {\n      this.removeEvents(maxEventId, maxIdentifyId, 200, 'success');\n      if (this.options.saveEvents) {\n        this.saveEvents();\n      }\n    } else {\n      this._logErrorsOnEvents(maxEventId, maxIdentifyId, 0, '');\n    }\n    return;\n  }\n  var scope = this;\n  try {\n    new Request(url, data, this.options.headers).send(function (status, response) {\n      scope._sending = false;\n      try {\n        if (status === 200) {\n          scope.removeEvents(maxEventId, maxIdentifyId, status, response);\n\n          // Update the event cache after the removal of sent events.\n          if (scope.options.saveEvents) {\n            scope.saveEvents();\n          }\n\n          // Send more events if any queued during previous send.\n          scope._sendEventsIfReady();\n\n          // handle payload too large\n        } else {\n          scope._logErrorsOnEvents(maxEventId, maxIdentifyId, status, response);\n          if (status === 413) {\n            // utils.log('request too large');\n            // Can't even get this one massive event through. Drop it, even if it is an identify.\n            if (scope.options.uploadBatchSize === 1) {\n              scope.removeEvents(maxEventId, maxIdentifyId, status, response);\n            }\n\n            // The server complained about the length of the request. Backoff and try again.\n            scope.options.uploadBatchSize = Math.ceil(numEvents / 2);\n            scope.sendEvents();\n          }\n        }\n        // else {\n        //  all the events are still queued, and will be retried when the next\n        //  event is sent In the interest of debugging, it would be nice to have\n        //  something like an event emitter for a better debugging experince\n        //  here.\n        // }\n      } catch (e) {\n        // utils.log.error('failed upload');\n      }\n    });\n  } catch (e) {\n    var status = 0,\n      response = 'Request failed to send';\n    utils.log.error(response);\n    scope._logErrorsOnEvents(maxEventId, maxIdentifyId, status, response);\n    scope.removeEvents(maxEventId, maxIdentifyId, status, response, {\n      reason: e.message\n    });\n  }\n};\n\n/**\n * Merge unsent events and identifys together in sequential order based on their sequence number, for uploading.\n * Identifys given higher priority than Events. Also earlier sequence given priority\n * @private\n */\nAmplitudeClient.prototype._mergeEventsAndIdentifys = function _mergeEventsAndIdentifys(numEvents) {\n  // coalesce events from both queues\n  var eventsToSend = [];\n  var eventIndex = 0;\n  var maxEventId = -1;\n  var identifyIndex = 0;\n  var maxIdentifyId = -1;\n  while (eventsToSend.length < numEvents) {\n    var unsentEvent = void 0;\n    var noIdentifys = identifyIndex >= this._unsentIdentifys.length;\n    var noEvents = eventIndex >= this._unsentEvents.length;\n\n    // case 0: no events or identifys left\n    // note this should not happen, this means we have less events and identifys than expected\n    if (noEvents && noIdentifys) {\n      utils.log.error('Merging Events and Identifys, less events and identifys than expected');\n      break;\n    }\n\n    // case 1: no identifys - grab from events\n    else if (noIdentifys) {\n      unsentEvent = this._unsentEvents[eventIndex++];\n      maxEventId = unsentEvent.event.event_id;\n\n      // case 2: no events - grab from identifys\n    } else if (noEvents) {\n      unsentEvent = this._unsentIdentifys[identifyIndex++];\n      maxIdentifyId = unsentEvent.event.event_id;\n\n      // case 3: need to compare sequence numbers\n    } else {\n      // events logged before v2.5.0 won't have a sequence number, put those first\n      if (!('sequence_number' in this._unsentEvents[eventIndex].event) || this._unsentEvents[eventIndex].event.sequence_number < this._unsentIdentifys[identifyIndex].event.sequence_number) {\n        unsentEvent = this._unsentEvents[eventIndex++];\n        maxEventId = unsentEvent.event.event_id;\n      } else {\n        unsentEvent = this._unsentIdentifys[identifyIndex++];\n        maxIdentifyId = unsentEvent.event.event_id;\n      }\n    }\n    eventsToSend.push(unsentEvent);\n  }\n  return {\n    eventsToSend: eventsToSend,\n    maxEventId: maxEventId,\n    maxIdentifyId: maxIdentifyId\n  };\n};\n{\n  /**\n   * Set global user properties. Note this is deprecated, and we recommend using setUserProperties\n   * @public\n   * @deprecated\n   */\n  AmplitudeClient.prototype.setGlobalUserProperties = function setGlobalUserProperties(userProperties) {\n    this.setUserProperties(userProperties);\n  };\n}\n\n/**\n * Get the current version of Amplitude's Javascript SDK.\n * @public\n * @returns {number} version number\n * @example var amplitudeVersion = amplitude.__VERSION__;\n */\nAmplitudeClient.prototype.__VERSION__ = function getVersion() {\n  return this.options.library.version;\n};\n\n/**\n * Sets the library name and version. Default is `amplitude-js` and the version defined in package.json. Used if you're building another library on top of amplitude-js and want a custom data source value\n * @public\n * @param {string} name - Custom library name\n * @param {string} version - Custom library version\n */\nAmplitudeClient.prototype.setLibrary = function setLibrary(name, version) {\n  if (name !== null && typeof name !== 'undefined') {\n    this.options.library.name = name;\n  }\n  if (version !== null && typeof version !== 'undefined') {\n    this.options.library.version = version;\n  }\n};\n\n/**\n * Determines whether or not to push call to this._q or invoke it\n * @private\n */\nAmplitudeClient.prototype._shouldDeferCall = function _shouldDeferCall() {\n  return this._pendingReadStorage || this._initializationDeferred;\n};\n\n/**\n * Defers Initialization by putting all functions into storage until users\n * have accepted terms for tracking\n * @private\n */\nAmplitudeClient.prototype._deferInitialization = function _deferInitialization() {\n  this._initializationDeferred = true;\n  this._q.push(['init'].concat(Array.prototype.slice.call(arguments, 0)));\n};\n\n/**\n * Enable tracking via logging events and dropping a cookie\n * Intended to be used with the deferInitialization configuration flag\n * This will drop a cookie and reset initialization deferred\n * @public\n */\nAmplitudeClient.prototype.enableTracking = function enableTracking() {\n  // This will call init (which drops the cookie) and will run any pending tasks\n  this._initializationDeferred = false;\n  _saveCookieData(this);\n  this.runQueuedFunctions();\n};\n\n/**\n * Find best server url if choose to enable dynamic configuration.\n */\nAmplitudeClient.prototype._refreshDynamicConfig = function _refreshDynamicConfig() {\n  if (this.options.useDynamicConfig) {\n    instance$1.refresh(this.options.serverZone, this.options.forceHttps, function () {\n      this.options.apiEndpoint = instance$1.ingestionEndpoint;\n    }.bind(this));\n  }\n};\n\n/**\n * Returns the deviceId value.\n * @public\n * @return {string} Id of current device.\n */\nAmplitudeClient.prototype.getDeviceId = function getDeviceId() {\n  return this.options.deviceId;\n};\n\n/**\n * Returns the userId.\n * @public\n * @return {string} Id of current user.\n */\nAmplitudeClient.prototype.getUserId = function getUserId() {\n  return this.options.userId;\n};\n\n/**\n * Set a custom session expiration time.\n * @public\n * @param {number} timeInMillis - session expireation time in milliseconds.\n */\nAmplitudeClient.prototype.setMinTimeBetweenSessionsMillis = function setMinTimeBetweenSessionsMillis(timeInMillis) {\n  if (!utils.validateInput(timeInMillis, 'timeInMillis', 'number')) {\n    return;\n  }\n  if (this._shouldDeferCall()) {\n    return this._q.push(['setMinTimeBetweenSessionsMillis'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  try {\n    this.options.sessionTimeout = timeInMillis;\n  } catch (e) {\n    utils.log.error(e);\n  }\n};\n\n/**\n * Sets minimum number of events to batch together per request if batchEvents is true.\n * @public\n * @param {number} eventUploadThreshold - The number of the event upload threshold. Default value is 30.\n * @example amplitudeClient.setEventUploadThreshold(10);\n */\nAmplitudeClient.prototype.setEventUploadThreshold = function setEventUploadThreshold(eventUploadThreshold) {\n  if (!utils.validateInput(eventUploadThreshold, 'eventUploadThreshold', 'number')) {\n    return;\n  }\n  if (this._shouldDeferCall()) {\n    return this._q.push(['setEventUploadThreshold'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  try {\n    this.options.eventUploadThreshold = eventUploadThreshold;\n  } catch (e) {\n    utils.log.error(e);\n  }\n};\n\n/**\n * Dynamically adjust server URL\n * @public\n * @param {bool} useDynamicConfig - if enable dynamic config or not.\n * @example amplitudeClient.setUseDynamicConfig(true);\n */\nAmplitudeClient.prototype.setUseDynamicConfig = function setUseDynamicConfig(useDynamicConfig) {\n  if (!utils.validateInput(useDynamicConfig, 'useDynamicConfig', 'boolean')) {\n    return;\n  }\n  if (this._shouldDeferCall()) {\n    return this._q.push(['setUseDynamicConfig'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  try {\n    this.options.useDynamicConfig = useDynamicConfig;\n    this._refreshDynamicConfig();\n  } catch (e) {\n    utils.log.error(e);\n  }\n};\n\n/**\n * Sets the server zone, used for server api endpoint and dynamic configuration.\n * @public\n * @param {string} serverZone - the server zone value. AmplitudeServerZone.US or AmplitudeServerZone.EU.\n * @param {bool} serverZoneBasedApi - (optional) update api endpoint with serverZone change or not. For data residency, recommend to enable it unless using own proxy server.\n * @example amplitudeClient.setServerZone(AmplitudeServerZone.EU, true);\n */\nAmplitudeClient.prototype.setServerZone = function setServerZone(serverZone) {\n  var serverZoneBasedApi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (serverZone !== AmplitudeServerZone.EU && serverZone !== AmplitudeServerZone.US || !utils.validateInput(serverZoneBasedApi, 'serverZoneBasedApi', 'boolean')) {\n    return;\n  }\n  if (this._shouldDeferCall()) {\n    return this._q.push(['setServerZone'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  try {\n    this.options.serverZone = serverZone;\n    this.options.serverZoneBasedApi = serverZoneBasedApi;\n    if (serverZoneBasedApi) {\n      this.options.apiEndpoint = getEventLogApi(this.options.serverZone);\n    }\n  } catch (e) {\n    utils.log.error(e);\n  }\n};\n\n/**\n * Sets the server URL for the request.\n * @public\n * @param {string} serverUrl - The value of the server URL.\n * @example amplitudeClient.setServerUrl('api.amplitude.com');\n */\nAmplitudeClient.prototype.setServerUrl = function setServerUrl(serverUrl) {\n  if (!utils.validateInput(serverUrl, 'serverUrl', 'string')) {\n    return;\n  }\n  if (this._shouldDeferCall()) {\n    return this._q.push(['setServerUrl'].concat(Array.prototype.slice.call(arguments, 0)));\n  }\n  try {\n    this.options.apiEndpoint = serverUrl;\n  } catch (e) {\n    utils.log.error(e);\n  }\n};\n\n/**\n * Deprecated legacy API of the Amplitude JS SDK - instance manager.\n *\n * Wraps around the current [AmplitudeClient](https://amplitude.github.io/Amplitude-JavaScript/) which provides more features\n * Function calls directly on amplitude have been deprecated. Please call methods on the default shared instance: amplitude.getInstance() instead.\n *\n * See the [3.0.0 changelog](https://github.com/amplitude/Amplitude-JavaScript/blob/ed405afb5f06d5cf5b72539a5d09179abcf7e1fe/README.md#300-update-and-logging-events-to-multiple-amplitude-apps) for more information about this change.\n * @constructor Amplitude\n * @public\n * @deprecated\n * @example var amplitude = new Amplitude();\n */\nvar Amplitude = function Amplitude() {\n  this.options = _objectSpread2({}, DEFAULT_OPTIONS);\n  this._q = [];\n  this._instances = {}; // mapping of instance names to instances\n};\n\nAmplitude.prototype.Identify = Identify;\nAmplitude.prototype.Revenue = Revenue;\nAmplitude.prototype.getInstance = function getInstance(instance) {\n  instance = utils.isEmptyString(instance) ? Constants.DEFAULT_INSTANCE : instance.toLowerCase();\n  var client = this._instances[instance];\n  if (client === undefined) {\n    client = new AmplitudeClient(instance);\n    this._instances[instance] = client;\n  }\n  return client;\n};\n{\n  /**\n   * Initializes the Amplitude Javascript SDK with your apiKey and any optional configurations.\n   * This is required before any other methods can be called.\n   * @public\n   * @param {string} apiKey - The API key for your app.\n   * @param {string} opt_userId - (optional) An identifier for this user.\n   * @param {object} opt_config - (optional) Configuration options.\n   * See [options.js](https://github.com/amplitude/Amplitude-JavaScript/blob/master/src/options.js#L14) for list of options and default values.\n   * @param {function} opt_callback - (optional) Provide a callback function to run after initialization is complete.\n   * @deprecated Please use amplitude.getInstance().init(apiKey, opt_userId, opt_config, opt_callback);\n   * @example amplitude.init('API_KEY', 'USER_ID', {includeReferrer: true, includeUtm: true}, function() { alert('init complete'); });\n   */\n  Amplitude.prototype.init = function init(apiKey, opt_userId, opt_config, opt_callback) {\n    this.getInstance().init(apiKey, opt_userId, opt_config, function (instance) {\n      // make options such as deviceId available for callback functions\n      this.options = instance.options;\n      if (type(opt_callback) === 'function') {\n        opt_callback(instance);\n      }\n    }.bind(this));\n  };\n\n  /**\n   * Returns true if a new session was created during initialization, otherwise false.\n   * @public\n   * @return {boolean} Whether a new session was created during initialization.\n   * @deprecated Please use amplitude.getInstance().isNewSession();\n   */\n  Amplitude.prototype.isNewSession = function isNewSession() {\n    return this.getInstance().isNewSession();\n  };\n\n  /**\n   * Returns the id of the current session.\n   * @public\n   * @return {number} Id of the current session.\n   * @deprecated Please use amplitude.getInstance().getSessionId();\n   */\n  Amplitude.prototype.getSessionId = function getSessionId() {\n    return this.getInstance().getSessionId();\n  };\n\n  /**\n   * Increments the eventId and returns it.\n   * @private\n   */\n  Amplitude.prototype.nextEventId = function nextEventId() {\n    return this.getInstance().nextEventId();\n  };\n\n  /**\n   * Increments the identifyId and returns it.\n   * @private\n   */\n  Amplitude.prototype.nextIdentifyId = function nextIdentifyId() {\n    return this.getInstance().nextIdentifyId();\n  };\n\n  /**\n   * Increments the sequenceNumber and returns it.\n   * @private\n   */\n  Amplitude.prototype.nextSequenceNumber = function nextSequenceNumber() {\n    return this.getInstance().nextSequenceNumber();\n  };\n\n  /**\n   * Saves unsent events and identifies to localStorage. JSON stringifies event queues before saving.\n   * Note: this is called automatically every time events are logged, unless you explicitly set option saveEvents to false.\n   * @private\n   */\n  Amplitude.prototype.saveEvents = function saveEvents() {\n    this.getInstance().saveEvents();\n  };\n\n  /**\n   * Sets a customer domain for the amplitude cookie. Useful if you want to support cross-subdomain tracking.\n   * @public\n   * @param {string} domain to set.\n   * @deprecated Please use amplitude.getInstance().setDomain(domain);\n   * @example amplitude.setDomain('.amplitude.com');\n   */\n  Amplitude.prototype.setDomain = function setDomain(domain) {\n    this.getInstance().setDomain(domain);\n  };\n\n  /**\n   * Sets an identifier for the current user.\n   * @public\n   * @param {string} userId - identifier to set. Can be null.\n   * @deprecated Please use amplitude.getInstance().setUserId(userId);\n   * @example amplitude.setUserId('joe@gmail.com');\n   */\n  Amplitude.prototype.setUserId = function setUserId(userId) {\n    this.getInstance().setUserId(userId);\n  };\n\n  /**\n   * Add user to a group or groups. You need to specify a groupType and groupName(s).\n   * For example you can group people by their organization.\n   * In that case groupType is \"orgId\" and groupName would be the actual ID(s).\n   * groupName can be a string or an array of strings to indicate a user in multiple gruups.\n   * You can also call setGroup multiple times with different groupTypes to track multiple types of groups (up to 5 per app).\n   * Note: this will also set groupType: groupName as a user property.\n   * See the [advanced topics article](https://developers.amplitude.com/docs/javascript#user-groups) for more information.\n   * @public\n   * @param {string} groupType - the group type (ex: orgId)\n   * @param {string|list} groupName - the name of the group (ex: 15), or a list of names of the groups\n   * @deprecated Please use amplitude.getInstance().setGroup(groupType, groupName);\n   * @example amplitude.setGroup('orgId', 15); // this adds the current user to orgId 15.\n   */\n  Amplitude.prototype.setGroup = function (groupType, groupName) {\n    this.getInstance().setGroup(groupType, groupName);\n  };\n\n  /**\n   * Sets whether to opt current user out of tracking.\n   * @public\n   * @param {boolean} enable - if true then no events will be logged or sent.\n   * @deprecated Please use amplitude.getInstance().setOptOut(enable);\n   * @example: amplitude.setOptOut(true);\n   */\n  Amplitude.prototype.setOptOut = function setOptOut(enable) {\n    this.getInstance().setOptOut(enable);\n  };\n\n  /**\n   * Regenerates a new random deviceId for current user. Note: this is not recommended unless you know what you\n   * are doing. This can be used in conjunction with `setUserId(null)` to anonymize users after they log out.\n   * With a null userId and a completely new deviceId, the current user would appear as a brand new user in dashboard.\n   * This uses src/uuid.js to regenerate the deviceId.\n   * @public\n   * @deprecated Please use amplitude.getInstance().regenerateDeviceId();\n   */\n  Amplitude.prototype.regenerateDeviceId = function regenerateDeviceId() {\n    this.getInstance().regenerateDeviceId();\n  };\n\n  /**\n   * Sets a custom deviceId for current user. Note: this is not recommended unless you know what you are doing\n   * (like if you have your own system for managing deviceIds).\n   *\n   * Make sure the deviceId you set is sufficiently unique\n   * (we recommend something like a UUID - see src/uuid.js for an example of how to generate) to prevent conflicts with other devices in our system.\n   * @public\n   * @param {string} deviceId - custom deviceId for current user.\n   * @deprecated Please use amplitude.getInstance().setDeviceId(deviceId);\n   * @example amplitude.setDeviceId('45f0954f-eb79-4463-ac8a-233a6f45a8f0');\n   */\n  Amplitude.prototype.setDeviceId = function setDeviceId(deviceId) {\n    this.getInstance().setDeviceId(deviceId);\n  };\n\n  /**\n   * Sets user properties for the current user.\n   * @public\n   * @param {object} userProperties - object with string keys and values for the user properties to set.\n   * @param {boolean} opt_replace - Deprecated. In earlier versions of the JS SDK the user properties object was kept in\n   * memory and replace = true would replace the object in memory. Now the properties are no longer stored in memory, so replace is deprecated.\n   * @deprecated Please use amplitude.getInstance().setUserProperties(userProperties);\n   * @example amplitude.setUserProperties({'gender': 'female', 'sign_up_complete': true})\n   */\n  Amplitude.prototype.setUserProperties = function setUserProperties(userProperties) {\n    this.getInstance().setUserProperties(userProperties);\n  };\n\n  /**\n   * Clear all of the user properties for the current user. Note: clearing user properties is irreversible!\n   * @public\n   * @deprecated Please use amplitude.getInstance().clearUserProperties();\n   * @example amplitude.clearUserProperties();\n   */\n  Amplitude.prototype.clearUserProperties = function clearUserProperties() {\n    this.getInstance().clearUserProperties();\n  };\n\n  /**\n   * Send an identify call containing user property operations to Amplitude servers.\n   * See the [Identify](https://amplitude.github.io/Amplitude-JavaScript/Identify/)\n   * reference page for more information on the Identify API and user property operations.\n   * @param {Identify} identify_obj - the Identify object containing the user property operations to send.\n   * @param {Amplitude~eventCallback} opt_callback - (optional) callback function to run when the identify event has been sent.\n   * Note: the server response code and response body from the identify event upload are passed to the callback function.\n   * @deprecated Please use amplitude.getInstance().identify(identify);\n   * @example\n   * var identify = new amplitude.Identify().set('colors', ['rose', 'gold']).add('karma', 1).setOnce('sign_up_date', '2016-03-31');\n   * amplitude.identify(identify);\n   */\n  Amplitude.prototype.identify = function (identify_obj, opt_callback) {\n    this.getInstance().identify(identify_obj, opt_callback);\n  };\n\n  /**\n   * Set a versionName for your application.\n   * @public\n   * @param {string} versionName - The version to set for your application.\n   * @deprecated Please use amplitude.getInstance().setVersionName(versionName);\n   * @example amplitude.setVersionName('1.12.3');\n   */\n  Amplitude.prototype.setVersionName = function setVersionName(versionName) {\n    this.getInstance().setVersionName(versionName);\n  };\n\n  /**\n   * This is the callback for logEvent and identify calls. It gets called after the event/identify is uploaded,\n   * and the server response code and response body from the upload request are passed to the callback function.\n   * @callback Amplitude~eventCallback\n   * @param {number} responseCode - Server response code for the event / identify upload request.\n   * @param {string} responseBody - Server response body for the event / identify upload request.\n   */\n\n  /**\n   * Log an event with eventType and eventProperties\n   * @public\n   * @param {string} eventType - name of event\n   * @param {object} eventProperties - (optional) an object with string keys and values for the event properties.\n   * @param {Amplitude~eventCallback} opt_callback - (optional) a callback function to run after the event is logged.\n   * Note: the server response code and response body from the event upload are passed to the callback function.\n   * @deprecated Please use amplitude.getInstance().logEvent(eventType, eventProperties, opt_callback);\n   * @example amplitude.logEvent('Clicked Homepage Button', {'finished_flow': false, 'clicks': 15});\n   */\n  Amplitude.prototype.logEvent = function logEvent(eventType, eventProperties, opt_callback) {\n    return this.getInstance().logEvent(eventType, eventProperties, opt_callback);\n  };\n\n  /**\n   * Log an event with eventType, eventProperties, and groups. Use this to set event-level groups.\n   *\n   * Note: the group(s) set only apply for the specific event type being logged and does not persist on the user\n   * (unless you explicitly set it with setGroup).\n   *\n   * See the [advanced topics article](https://developers.amplitude.com/docs/javascript#user-groups) for more information\n   * about groups and Count by Distinct on the Amplitude platform.\n   * @public\n   * @param {string} eventType - name of event\n   * @param {object} eventProperties - (optional) an object with string keys and values for the event properties.\n   * @param {object} groups - (optional) an object with string groupType: groupName values for the event being logged.\n   * groupName can be a string or an array of strings.\n   * @param {Amplitude~eventCallback} opt_callback - (optional) a callback function to run after the event is logged.\n   * Note: the server response code and response body from the event upload are passed to the callback function.\n   * @deprecated Please use amplitude.getInstance().logEventWithGroups(eventType, eventProperties, groups, opt_callback);\n   * @example amplitude.logEventWithGroups('Clicked Button', null, {'orgId': 24});\n   */\n  Amplitude.prototype.logEventWithGroups = function (eventType, eventProperties, groups, opt_callback) {\n    return this.getInstance().logEventWithGroups(eventType, eventProperties, groups, opt_callback);\n  };\n\n  /**\n   * Log revenue with Revenue interface. The new revenue interface allows for more revenue fields like\n   * revenueType and event properties.\n   *\n   * See the [Revenue](https://amplitude.github.io/Amplitude-JavaScript/Revenue/)\n   * reference page for more information on the Revenue interface and logging revenue.\n   * @public\n   * @param {Revenue} revenue_obj - the revenue object containing the revenue data being logged.\n   * @deprecated Please use amplitude.getInstance().logRevenueV2(revenue_obj);\n   * @example var revenue = new amplitude.Revenue().setProductId('productIdentifier').setPrice(10.99);\n   * amplitude.logRevenueV2(revenue);\n   */\n  Amplitude.prototype.logRevenueV2 = function logRevenueV2(revenue_obj) {\n    return this.getInstance().logRevenueV2(revenue_obj);\n  };\n\n  /**\n   * Log revenue event with a price, quantity, and product identifier.\n   * @public\n   * @param {number} price - price of revenue event\n   * @param {number} quantity - (optional) quantity of products in revenue event. If no quantity specified default to 1.\n   * @param {string} product - (optional) product identifier\n   * @deprecated Please use amplitude.getInstance().logRevenueV2(revenue_obj);\n   * @example amplitude.logRevenue(3.99, 1, 'product_1234');\n   */\n  Amplitude.prototype.logRevenue = function logRevenue(price, quantity, product) {\n    return this.getInstance().logRevenue(price, quantity, product);\n  };\n\n  /**\n   * Remove events in storage with event ids up to and including maxEventId.\n   * @private\n   */\n  Amplitude.prototype.removeEvents = function removeEvents(maxEventId, maxIdentifyId) {\n    this.getInstance().removeEvents(maxEventId, maxIdentifyId);\n  };\n\n  /**\n   * Send unsent events. Note: this is called automatically after events are logged if option batchEvents is false.\n   * If batchEvents is true, then events are only sent when batch criterias are met.\n   * @private\n   * @param {Amplitude~eventCallback} callback - (optional) callback to run after events are sent.\n   * Note the server response code and response body are passed to the callback as input arguments.\n   */\n  Amplitude.prototype.sendEvents = function sendEvents(callback) {\n    this.getInstance().sendEvents(callback);\n  };\n\n  /**\n   * Set global user properties.\n   * @public\n   * @deprecated Please use amplitudeClient.setUserProperties\n   */\n  Amplitude.prototype.setGlobalUserProperties = function setGlobalUserProperties(userProperties) {\n    this.getInstance().setUserProperties(userProperties);\n  };\n}\n\n/**\n * Get the current version of Amplitude's Javascript SDK.\n * @public\n * @returns {number} version number\n * @example var amplitudeVersion = amplitude.__VERSION__;\n */\nAmplitude.prototype.__VERSION__ = version;\n\n// Entry point\nvar old = typeof GlobalScope !== 'undefined' && GlobalScope.amplitude || {};\nvar newInstance = new Amplitude();\nnewInstance._q = old._q || [];\n\n/**\n * Instantiates Amplitude object and runs all queued function logged by stubbed methods provided by snippets\n * Event queue allows async loading of SDK to not blocking client's app\n */\nfor (var instance in old._iq) {\n  // migrate each instance's queue\n  if (Object.prototype.hasOwnProperty.call(old._iq, instance)) {\n    newInstance.getInstance(instance)._q = old._iq[instance]._q || [];\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/amplitude-js@8.21.9/node_modules/amplitude-js/amplitude.esm.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2Jhc2U2NC1qc0AxLjUuMS9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLGtCQUFrQjtBQUNsQixtQkFBbUI7QUFDbkIscUJBQXFCOztBQUVyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsU0FBUztBQUM1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixTQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDLFVBQVU7QUFDckQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2Jhc2U2NC1qc0AxLjUuMS9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzPzI1YTAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkpKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/blueimp-md5@2.19.0/node_modules/blueimp-md5/js/md5.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/blueimp-md5@2.19.0/node_modules/blueimp-md5/js/md5.js ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("var __WEBPACK_AMD_DEFINE_RESULT__;/*\n * JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n\n/* global define */\n\n/* eslint-disable strict */\n\n;(function ($) {\n  'use strict'\n\n  /**\n   * Add integers, wrapping at 2^32.\n   * This uses 16-bit operations internally to work around bugs in interpreters.\n   *\n   * @param {number} x First integer\n   * @param {number} y Second integer\n   * @returns {number} Sum\n   */\n  function safeAdd(x, y) {\n    var lsw = (x & 0xffff) + (y & 0xffff)\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16)\n    return (msw << 16) | (lsw & 0xffff)\n  }\n\n  /**\n   * Bitwise rotate a 32-bit number to the left.\n   *\n   * @param {number} num 32-bit number\n   * @param {number} cnt Rotation count\n   * @returns {number} Rotated number\n   */\n  function bitRotateLeft(num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt))\n  }\n\n  /**\n   * Basic operation the algorithm uses.\n   *\n   * @param {number} q q\n   * @param {number} a a\n   * @param {number} b b\n   * @param {number} x x\n   * @param {number} s s\n   * @param {number} t t\n   * @returns {number} Result\n   */\n  function md5cmn(q, a, b, x, s, t) {\n    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b)\n  }\n  /**\n   * Basic operation the algorithm uses.\n   *\n   * @param {number} a a\n   * @param {number} b b\n   * @param {number} c c\n   * @param {number} d d\n   * @param {number} x x\n   * @param {number} s s\n   * @param {number} t t\n   * @returns {number} Result\n   */\n  function md5ff(a, b, c, d, x, s, t) {\n    return md5cmn((b & c) | (~b & d), a, b, x, s, t)\n  }\n  /**\n   * Basic operation the algorithm uses.\n   *\n   * @param {number} a a\n   * @param {number} b b\n   * @param {number} c c\n   * @param {number} d d\n   * @param {number} x x\n   * @param {number} s s\n   * @param {number} t t\n   * @returns {number} Result\n   */\n  function md5gg(a, b, c, d, x, s, t) {\n    return md5cmn((b & d) | (c & ~d), a, b, x, s, t)\n  }\n  /**\n   * Basic operation the algorithm uses.\n   *\n   * @param {number} a a\n   * @param {number} b b\n   * @param {number} c c\n   * @param {number} d d\n   * @param {number} x x\n   * @param {number} s s\n   * @param {number} t t\n   * @returns {number} Result\n   */\n  function md5hh(a, b, c, d, x, s, t) {\n    return md5cmn(b ^ c ^ d, a, b, x, s, t)\n  }\n  /**\n   * Basic operation the algorithm uses.\n   *\n   * @param {number} a a\n   * @param {number} b b\n   * @param {number} c c\n   * @param {number} d d\n   * @param {number} x x\n   * @param {number} s s\n   * @param {number} t t\n   * @returns {number} Result\n   */\n  function md5ii(a, b, c, d, x, s, t) {\n    return md5cmn(c ^ (b | ~d), a, b, x, s, t)\n  }\n\n  /**\n   * Calculate the MD5 of an array of little-endian words, and a bit length.\n   *\n   * @param {Array} x Array of little-endian words\n   * @param {number} len Bit length\n   * @returns {Array<number>} MD5 Array\n   */\n  function binlMD5(x, len) {\n    /* append padding */\n    x[len >> 5] |= 0x80 << len % 32\n    x[(((len + 64) >>> 9) << 4) + 14] = len\n\n    var i\n    var olda\n    var oldb\n    var oldc\n    var oldd\n    var a = 1732584193\n    var b = -271733879\n    var c = -1732584194\n    var d = 271733878\n\n    for (i = 0; i < x.length; i += 16) {\n      olda = a\n      oldb = b\n      oldc = c\n      oldd = d\n\n      a = md5ff(a, b, c, d, x[i], 7, -680876936)\n      d = md5ff(d, a, b, c, x[i + 1], 12, -389564586)\n      c = md5ff(c, d, a, b, x[i + 2], 17, 606105819)\n      b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330)\n      a = md5ff(a, b, c, d, x[i + 4], 7, -176418897)\n      d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426)\n      c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341)\n      b = md5ff(b, c, d, a, x[i + 7], 22, -45705983)\n      a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416)\n      d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417)\n      c = md5ff(c, d, a, b, x[i + 10], 17, -42063)\n      b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162)\n      a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682)\n      d = md5ff(d, a, b, c, x[i + 13], 12, -40341101)\n      c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290)\n      b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329)\n\n      a = md5gg(a, b, c, d, x[i + 1], 5, -165796510)\n      d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632)\n      c = md5gg(c, d, a, b, x[i + 11], 14, 643717713)\n      b = md5gg(b, c, d, a, x[i], 20, -373897302)\n      a = md5gg(a, b, c, d, x[i + 5], 5, -701558691)\n      d = md5gg(d, a, b, c, x[i + 10], 9, 38016083)\n      c = md5gg(c, d, a, b, x[i + 15], 14, -660478335)\n      b = md5gg(b, c, d, a, x[i + 4], 20, -405537848)\n      a = md5gg(a, b, c, d, x[i + 9], 5, 568446438)\n      d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690)\n      c = md5gg(c, d, a, b, x[i + 3], 14, -187363961)\n      b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501)\n      a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467)\n      d = md5gg(d, a, b, c, x[i + 2], 9, -51403784)\n      c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473)\n      b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734)\n\n      a = md5hh(a, b, c, d, x[i + 5], 4, -378558)\n      d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463)\n      c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562)\n      b = md5hh(b, c, d, a, x[i + 14], 23, -35309556)\n      a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060)\n      d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353)\n      c = md5hh(c, d, a, b, x[i + 7], 16, -155497632)\n      b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640)\n      a = md5hh(a, b, c, d, x[i + 13], 4, 681279174)\n      d = md5hh(d, a, b, c, x[i], 11, -358537222)\n      c = md5hh(c, d, a, b, x[i + 3], 16, -722521979)\n      b = md5hh(b, c, d, a, x[i + 6], 23, 76029189)\n      a = md5hh(a, b, c, d, x[i + 9], 4, -640364487)\n      d = md5hh(d, a, b, c, x[i + 12], 11, -421815835)\n      c = md5hh(c, d, a, b, x[i + 15], 16, 530742520)\n      b = md5hh(b, c, d, a, x[i + 2], 23, -995338651)\n\n      a = md5ii(a, b, c, d, x[i], 6, -198630844)\n      d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415)\n      c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905)\n      b = md5ii(b, c, d, a, x[i + 5], 21, -57434055)\n      a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571)\n      d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606)\n      c = md5ii(c, d, a, b, x[i + 10], 15, -1051523)\n      b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799)\n      a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359)\n      d = md5ii(d, a, b, c, x[i + 15], 10, -30611744)\n      c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380)\n      b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649)\n      a = md5ii(a, b, c, d, x[i + 4], 6, -145523070)\n      d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379)\n      c = md5ii(c, d, a, b, x[i + 2], 15, 718787259)\n      b = md5ii(b, c, d, a, x[i + 9], 21, -343485551)\n\n      a = safeAdd(a, olda)\n      b = safeAdd(b, oldb)\n      c = safeAdd(c, oldc)\n      d = safeAdd(d, oldd)\n    }\n    return [a, b, c, d]\n  }\n\n  /**\n   * Convert an array of little-endian words to a string\n   *\n   * @param {Array<number>} input MD5 Array\n   * @returns {string} MD5 string\n   */\n  function binl2rstr(input) {\n    var i\n    var output = ''\n    var length32 = input.length * 32\n    for (i = 0; i < length32; i += 8) {\n      output += String.fromCharCode((input[i >> 5] >>> i % 32) & 0xff)\n    }\n    return output\n  }\n\n  /**\n   * Convert a raw string to an array of little-endian words\n   * Characters >255 have their high-byte silently ignored.\n   *\n   * @param {string} input Raw input string\n   * @returns {Array<number>} Array of little-endian words\n   */\n  function rstr2binl(input) {\n    var i\n    var output = []\n    output[(input.length >> 2) - 1] = undefined\n    for (i = 0; i < output.length; i += 1) {\n      output[i] = 0\n    }\n    var length8 = input.length * 8\n    for (i = 0; i < length8; i += 8) {\n      output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << i % 32\n    }\n    return output\n  }\n\n  /**\n   * Calculate the MD5 of a raw string\n   *\n   * @param {string} s Input string\n   * @returns {string} Raw MD5 string\n   */\n  function rstrMD5(s) {\n    return binl2rstr(binlMD5(rstr2binl(s), s.length * 8))\n  }\n\n  /**\n   * Calculates the HMAC-MD5 of a key and some data (raw strings)\n   *\n   * @param {string} key HMAC key\n   * @param {string} data Raw input string\n   * @returns {string} Raw MD5 string\n   */\n  function rstrHMACMD5(key, data) {\n    var i\n    var bkey = rstr2binl(key)\n    var ipad = []\n    var opad = []\n    var hash\n    ipad[15] = opad[15] = undefined\n    if (bkey.length > 16) {\n      bkey = binlMD5(bkey, key.length * 8)\n    }\n    for (i = 0; i < 16; i += 1) {\n      ipad[i] = bkey[i] ^ 0x36363636\n      opad[i] = bkey[i] ^ 0x5c5c5c5c\n    }\n    hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8)\n    return binl2rstr(binlMD5(opad.concat(hash), 512 + 128))\n  }\n\n  /**\n   * Convert a raw string to a hex string\n   *\n   * @param {string} input Raw input string\n   * @returns {string} Hex encoded string\n   */\n  function rstr2hex(input) {\n    var hexTab = '0123456789abcdef'\n    var output = ''\n    var x\n    var i\n    for (i = 0; i < input.length; i += 1) {\n      x = input.charCodeAt(i)\n      output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f)\n    }\n    return output\n  }\n\n  /**\n   * Encode a string as UTF-8\n   *\n   * @param {string} input Input string\n   * @returns {string} UTF8 string\n   */\n  function str2rstrUTF8(input) {\n    return unescape(encodeURIComponent(input))\n  }\n\n  /**\n   * Encodes input string as raw MD5 string\n   *\n   * @param {string} s Input string\n   * @returns {string} Raw MD5 string\n   */\n  function rawMD5(s) {\n    return rstrMD5(str2rstrUTF8(s))\n  }\n  /**\n   * Encodes input string as Hex encoded string\n   *\n   * @param {string} s Input string\n   * @returns {string} Hex encoded string\n   */\n  function hexMD5(s) {\n    return rstr2hex(rawMD5(s))\n  }\n  /**\n   * Calculates the raw HMAC-MD5 for the given key and data\n   *\n   * @param {string} k HMAC key\n   * @param {string} d Input string\n   * @returns {string} Raw MD5 string\n   */\n  function rawHMACMD5(k, d) {\n    return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d))\n  }\n  /**\n   * Calculates the Hex encoded HMAC-MD5 for the given key and data\n   *\n   * @param {string} k HMAC key\n   * @param {string} d Input string\n   * @returns {string} Raw MD5 string\n   */\n  function hexHMACMD5(k, d) {\n    return rstr2hex(rawHMACMD5(k, d))\n  }\n\n  /**\n   * Calculates MD5 value for a given string.\n   * If a key is provided, calculates the HMAC-MD5 value.\n   * Returns a Hex encoded string unless the raw argument is given.\n   *\n   * @param {string} string Input string\n   * @param {string} [key] HMAC key\n   * @param {boolean} [raw] Raw output switch\n   * @returns {string} MD5 output\n   */\n  function md5(string, key, raw) {\n    if (!key) {\n      if (!raw) {\n        return hexMD5(string)\n      }\n      return rawMD5(string)\n    }\n    if (!raw) {\n      return hexHMACMD5(key, string)\n    }\n    return rawHMACMD5(key, string)\n  }\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return md5\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else {}\n})(this)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/blueimp-md5@2.19.0/node_modules/blueimp-md5/js/md5.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nconst base64 = __webpack_require__(/*! base64-js */ \"../../node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\")\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"../../node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\")\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2llZWU3NTRAMS4yLjEvbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFdBQVc7O0FBRXBCO0FBQ0E7QUFDQTtBQUNBLFNBQVMsV0FBVzs7QUFFcEI7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUyxXQUFXOztBQUVwQjtBQUNBO0FBQ0EsU0FBUyxVQUFVOztBQUVuQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaWVlZTc1NEAxLjIuMS9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcz8yYmUzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBpZWVlNzU0LiBCU0QtMy1DbGF1c2UgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/polyfills/process.js":
/*!*******************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/polyfills/process.js ***!
  \*******************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = __webpack_require__.g.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = __webpack_require__.g.process) == null ? void 0 : _global_process1.env) === \"object\" ? __webpack_require__.g.process : __webpack_require__(/*! next/dist/compiled/process */ \"../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/process/browser.js\");\n\n//# sourceMappingURL=process.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTQuMi4xNV9yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV9fcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvcG9seWZpbGxzL3Byb2Nlc3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLHFDQUFxQyxxQkFBTSxpRkFBaUYscUJBQU0sa0VBQWtFLHFCQUFNLFdBQVcsbUJBQU8sQ0FBQyx3S0FBNEI7O0FBRXpQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4yLjE1X3JlYWN0LWRvbUAxOC4zLjFfcmVhY3RAMTguMy4xX19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC9wb2x5ZmlsbHMvcHJvY2Vzcy5qcz80NmQ0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9nbG9iYWxfcHJvY2VzcywgX2dsb2JhbF9wcm9jZXNzMTtcbm1vZHVsZS5leHBvcnRzID0gKChfZ2xvYmFsX3Byb2Nlc3MgPSBnbG9iYWwucHJvY2VzcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9nbG9iYWxfcHJvY2Vzcy5lbnYpICYmIHR5cGVvZiAoKF9nbG9iYWxfcHJvY2VzczEgPSBnbG9iYWwucHJvY2VzcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9nbG9iYWxfcHJvY2VzczEuZW52KSA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbC5wcm9jZXNzIDogcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9wcm9jZXNzXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9jZXNzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/polyfills/process.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[1]!../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[2]!../../packages/codesandbox-theme-docs/dist/style.css":
/*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[1]!../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[2]!../../packages/codesandbox-theme-docs/dist/style.css ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_pnpm_next_14_2_15_react_dom_18_3_1_react_18_3_1_react_18_3_1_node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \"../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\");\n/* harmony import */ var _node_modules_pnpm_next_14_2_15_react_dom_18_3_1_react_18_3_1_react_18_3_1_node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_pnpm_next_14_2_15_react_dom_18_3_1_react_18_3_1_react_18_3_1_node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_pnpm_next_14_2_15_react_dom_18_3_1_react_18_3_1_react_18_3_1_node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"*,:before,:after{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::-ms-backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::-webkit-backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }*,:before,:after{box-sizing:border-box;border:0 solid #e5e7eb}:before,:after{--tw-content:\\\"\\\"}html{-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;font-feature-settings:normal;font-variation-settings:normal;-webkit-tap-highlight-color:transparent;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Noto Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;line-height:1.5}:host{-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;font-feature-settings:normal;font-variation-settings:normal;-webkit-tap-highlight-color:transparent;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Noto Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;line-height:1.5}body{line-height:inherit;margin:0}hr{color:inherit;border-top-width:1px;height:0}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-feature-settings:normal;font-variation-settings:normal;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em}small{font-size:80%}sub,sup{vertical-align:baseline;font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-feature-settings:inherit;font-variation-settings:inherit;font-family:inherit;font-size:100%;font-weight:inherit;line-height:inherit;letter-spacing:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}button{-webkit-appearance:button;background-color:transparent;background-image:none}input:where([type=button]){-webkit-appearance:button;background-color:transparent;background-image:none}input:where([type=reset]){-webkit-appearance:button;background-color:transparent;background-image:none}input:where([type=submit]){-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button{height:auto}::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dl,dd,h1,h2,h3,h4,h5,h6,hr,figure,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}ol,ul,menu{margin:0;padding:0;list-style:none}dialog{padding:0}textarea{resize:vertical}input::placeholder{opacity:1;color:#9ca3af}textarea::placeholder{opacity:1;color:#9ca3af}button,[role=button]{cursor:pointer}:disabled{cursor:default}img,svg,video,canvas,audio,iframe,embed,object{vertical-align:middle;display:block}img,video{max-width:100%;height:auto}[hidden]{display:none}.nx-sr-only{clip:rect(0,0,0,0);white-space:nowrap;border-width:0;width:1px;height:1px;margin:-1px;padding:0;position:absolute;overflow:hidden}.nx-pointer-events-none{pointer-events:none}.nx-fixed{position:fixed}.nx-absolute{position:absolute}.nx-relative{position:relative}.nx-sticky{position:-webkit-sticky;position:sticky}.nx-inset-0{top:0;bottom:0;left:0;right:0}.nx-inset-x-0{left:0;right:0}.nx-inset-y-0{top:0;bottom:0}.nx-bottom-0{bottom:0}.nx-right-0{right:0}.nx-top-0{top:0}.nx-top-\\\\[8em\\\\]{top:8em}.nx-top-full{top:100%}.nx-z-10{z-index:10}.nx-z-20{z-index:20}.nx-z-\\\\[-1\\\\]{z-index:-1}.nx-z-\\\\[1\\\\]{z-index:1}.nx-order-last{order:9999}.-nx-m-2{margin:-.5rem}.-nx-mx-6{margin-left:-1.5rem;margin-right:-1.5rem}.nx-mx-2{margin-left:.5rem;margin-right:.5rem}.nx-mx-2\\\\.5{margin-left:.625rem;margin-right:.625rem}.nx-mx-4{margin-left:1rem;margin-right:1rem}.nx-mx-auto{margin-left:auto;margin-right:auto}.nx-my-1\\\\.5{margin-top:.375rem;margin-bottom:.375rem}.nx-my-2{margin-top:.5rem;margin-bottom:.5rem}.nx-my-4{margin-top:1rem;margin-bottom:1rem}.nx-my-8{margin-top:2rem;margin-bottom:2rem}.-nx-mb-0\\\\.5{margin-bottom:-.125rem}.-nx-ml-2{margin-left:-.5rem}.-nx-mr-2{margin-right:-.5rem}.-nx-mt-20{margin-top:-5rem}.nx-mb-2{margin-bottom:.5rem}.nx-mb-4{margin-bottom:1rem}.nx-mb-8{margin-bottom:2rem}.nx-ml-2{margin-left:.5rem}.nx-mr-2{margin-right:.5rem}.nx-mt-1{margin-top:.25rem}.nx-mt-10{margin-top:2.5rem}.nx-mt-12{margin-top:3rem}.nx-mt-16{margin-top:4rem}.nx-mt-2{margin-top:.5rem}.nx-mt-2\\\\.5{margin-top:.625rem}.nx-mt-4{margin-top:1rem}.nx-mt-5{margin-top:1.25rem}.nx-mt-6{margin-top:1.5rem}.nx-mt-8{margin-top:2rem}.nx-block{display:block}.nx-inline-block{display:inline-block}.nx-inline{display:inline}.nx-flex{display:flex}.nx-hidden{display:none}.nx-h-0{height:0}.nx-h-4{height:1rem}.nx-h-5{height:1.25rem}.nx-h-7{height:1.75rem}.nx-h-\\\\[18px\\\\]{height:18px}.nx-h-\\\\[var\\\\(--nextra-banner-height\\\\)\\\\]{height:var(--nextra-banner-height)}.nx-h-\\\\[var\\\\(--nextra-navbar-height\\\\)\\\\]{height:var(--nextra-navbar-height)}.nx-h-full{height:100%}.nx-max-h-64{max-height:16rem}.nx-max-h-\\\\[calc\\\\(100vh-var\\\\(--nextra-navbar-height\\\\)-env\\\\(safe-area-inset-bottom\\\\)\\\\)\\\\]{max-height:calc(100vh - var(--nextra-navbar-height) - env(safe-area-inset-bottom))}.nx-max-h-\\\\[min\\\\(calc\\\\(50vh-11rem-env\\\\(safe-area-inset-bottom\\\\)\\\\)\\\\,400px\\\\)\\\\]{max-height:min(calc(50vh - 11rem - env(safe-area-inset-bottom)),400px)}.nx-min-h-\\\\[100px\\\\]{min-height:100px}.nx-min-h-\\\\[calc\\\\(100vh-4rem\\\\)\\\\]{min-height:calc(100vh - 4rem)}.nx-w-3\\\\.5{width:.875rem}.nx-w-4{width:1rem}.nx-w-5{width:1.25rem}.nx-w-64{width:16rem}.nx-w-full{width:100%}.nx-w-max{width:max-content}.nx-w-screen{width:100vw}.nx-min-w-0{min-width:0}.nx-min-w-\\\\[18px\\\\]{min-width:18px}.nx-min-w-\\\\[24px\\\\]{min-width:24px}.nx-min-w-full{min-width:100%}.nx-max-w-4xl{max-width:56rem}.nx-max-w-\\\\[50\\\\%\\\\]{max-width:50%}.nx-max-w-\\\\[90rem\\\\]{max-width:90rem}.nx-max-w-\\\\[min\\\\(calc\\\\(100vw-2rem\\\\)\\\\,calc\\\\(100\\\\%\\\\+20rem\\\\)\\\\)\\\\]{max-width:min(100vw - 2rem,100% + 20rem)}.nx-max-w-full{max-width:100%}.nx-shrink-0{flex-shrink:0}.nx-grow{flex-grow:1}.nx-origin-center{transform-origin:50%}.nx-rotate-90{--tw-rotate:90deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.nx-transform-gpu{transform:translate3d(var(--tw-translate-x),var(--tw-translate-y),0)rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}@keyframes nx-spin{to{transform:rotate(360deg)}}.nx-animate-spin{animation:1s linear infinite nx-spin}.nx-cursor-pointer{cursor:pointer}.nx-select-none{-webkit-user-select:none;-moz-user-select:none;user-select:none}.nx-scroll-m-12{scroll-margin:3rem}.nx-scroll-my-6{scroll-margin-top:1.5rem;scroll-margin-bottom:1.5rem}.nx-scroll-py-6{scroll-padding-top:1.5rem;scroll-padding-bottom:1.5rem}.nx-list-decimal{list-style-type:decimal}.nx-list-disc{list-style-type:disc}.nx-list-none{list-style-type:none}.nx-appearance-none{-webkit-appearance:none;-moz-appearance:none;appearance:none}.nx-flex-col{flex-direction:column}.nx-items-start{align-items:flex-start}.nx-items-center{align-items:center}.nx-justify-end{justify-content:flex-end}.nx-justify-center{justify-content:center}.nx-justify-between{justify-content:space-between}.nx-gap-1{gap:.25rem}.nx-gap-2{gap:.5rem}.nx-overflow-auto{overflow:auto}.nx-overflow-hidden{overflow:hidden}.nx-overflow-x-auto{overflow-x:auto}.nx-overflow-y-auto{overflow-y:auto}.nx-overflow-x-hidden{overflow-x:hidden}.nx-overflow-y-hidden{overflow-y:hidden}.nx-overscroll-contain{overscroll-behavior:contain}.nx-overscroll-x-contain{overscroll-behavior-x:contain}.nx-truncate{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.nx-text-ellipsis{text-overflow:ellipsis}.nx-whitespace-nowrap{white-space:nowrap}.nx-break-words{overflow-wrap:break-word}.nx-rounded{border-radius:.25rem}.nx-rounded-lg{border-radius:.5rem}.nx-rounded-md{border-radius:.375rem}.nx-rounded-sm{border-radius:.125rem}.nx-rounded-xl{border-radius:.75rem}.nx-rounded-t{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.nx-border{border-width:1px}.nx-border-b{border-bottom-width:1px}.nx-border-b-2{border-bottom-width:2px}.nx-border-t{border-top-width:1px}.nx-border-black\\\\/10{border-color:rgba(0,0,0,.1)}.nx-border-black\\\\/5{border-color:rgba(0,0,0,.05)}.nx-border-blue-200{--tw-border-opacity:1;border-color:rgba(191,219,254,var(--tw-border-opacity))}.nx-border-gray-200{--tw-border-opacity:1;border-color:rgba(229,231,235,var(--tw-border-opacity))}.nx-border-gray-300{--tw-border-opacity:1;border-color:rgba(209,213,219,var(--tw-border-opacity))}.nx-border-orange-100{--tw-border-opacity:1;border-color:rgba(255,237,213,var(--tw-border-opacity))}.nx-border-primary-500{--tw-border-opacity:1;border-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-border-opacity))}.nx-border-red-200{--tw-border-opacity:1;border-color:rgba(254,202,202,var(--tw-border-opacity))}.nx-border-transparent{border-color:transparent}.nx-border-yellow-100{--tw-border-opacity:1;border-color:rgba(254,249,195,var(--tw-border-opacity))}.nx-bg-black\\\\/5{background-color:rgba(0,0,0,.05)}.nx-bg-black\\\\/80{background-color:rgba(0,0,0,.8)}.nx-bg-black\\\\/\\\\[\\\\.03\\\\]{background-color:rgba(0,0,0,.03)}.nx-bg-blue-100{--tw-bg-opacity:1;background-color:rgba(219,234,254,var(--tw-bg-opacity))}.nx-bg-gray-100{--tw-bg-opacity:1;background-color:rgba(243,244,246,var(--tw-bg-opacity))}.nx-bg-gray-200{--tw-bg-opacity:1;background-color:rgba(229,231,235,var(--tw-bg-opacity))}.nx-bg-neutral-900{--tw-bg-opacity:1;background-color:rgba(23,23,23,var(--tw-bg-opacity))}.nx-bg-orange-50{--tw-bg-opacity:1;background-color:rgba(255,247,237,var(--tw-bg-opacity))}.nx-bg-primary-50{--tw-bg-opacity:1;background-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-bg-opacity))}.nx-bg-primary-500\\\\/10{background-color:hsl(var(--nextra-primary-hue)100% 75%/.1)}.nx-bg-red-100{--tw-bg-opacity:1;background-color:rgba(254,226,226,var(--tw-bg-opacity))}.nx-bg-transparent{background-color:transparent}.nx-bg-white{--tw-bg-opacity:1;background-color:rgba(255,255,255,var(--tw-bg-opacity))}.nx-bg-yellow-50{--tw-bg-opacity:1;background-color:rgba(254,252,232,var(--tw-bg-opacity))}.nx-p-0{padding:0}.nx-p-0\\\\.5{padding:.125rem}.nx-p-1{padding:.25rem}.nx-p-2{padding:.5rem}.nx-p-4{padding:1rem}.nx-p-8{padding:2rem}.nx-px-1{padding-left:.25rem;padding-right:.25rem}.nx-px-1\\\\.5{padding-left:.375rem;padding-right:.375rem}.nx-px-2{padding-left:.5rem;padding-right:.5rem}.nx-px-2\\\\.5{padding-left:.625rem;padding-right:.625rem}.nx-px-3{padding-left:.75rem;padding-right:.75rem}.nx-px-4{padding-left:1rem;padding-right:1rem}.nx-px-6{padding-left:1.5rem;padding-right:1.5rem}.nx-px-\\\\[\\\\.25em\\\\]{padding-left:.25em;padding-right:.25em}.nx-py-0\\\\.5{padding-top:.125rem;padding-bottom:.125rem}.nx-py-1{padding-top:.25rem;padding-bottom:.25rem}.nx-py-1\\\\.5{padding-top:.375rem;padding-bottom:.375rem}.nx-py-12{padding-top:3rem;padding-bottom:3rem}.nx-py-2{padding-top:.5rem;padding-bottom:.5rem}.nx-py-2\\\\.5{padding-top:.625rem;padding-bottom:.625rem}.nx-py-4{padding-top:1rem;padding-bottom:1rem}.nx-pb-1{padding-bottom:.25rem}.nx-pb-1\\\\.5{padding-bottom:.375rem}.nx-pb-4{padding-bottom:1rem}.nx-pb-8{padding-bottom:2rem}.nx-pb-\\\\[env\\\\(safe-area-inset-bottom\\\\)\\\\]{padding-bottom:env(safe-area-inset-bottom)}.nx-pb-px{padding-bottom:1px}.nx-pl-\\\\[max\\\\(env\\\\(safe-area-inset-left\\\\)\\\\,1\\\\.5rem\\\\)\\\\]{padding-left:max(env(safe-area-inset-left),1.5rem)}.nx-pl-\\\\[max\\\\(env\\\\(safe-area-inset-left\\\\)\\\\,2\\\\.5rem\\\\)\\\\]{padding-left:max(env(safe-area-inset-left),2.5rem)}.nx-pr-4{padding-right:1rem}.nx-pr-\\\\[calc\\\\(env\\\\(safe-area-inset-right\\\\)-1\\\\.5rem\\\\)\\\\]{padding-right:calc(env(safe-area-inset-right) - 1.5rem)}.nx-pr-\\\\[max\\\\(env\\\\(safe-area-inset-right\\\\)\\\\,1\\\\.5rem\\\\)\\\\]{padding-right:max(env(safe-area-inset-right),1.5rem)}.nx-pr-\\\\[max\\\\(env\\\\(safe-area-inset-right\\\\)\\\\,2\\\\.5rem\\\\)\\\\]{padding-right:max(env(safe-area-inset-right),2.5rem)}.nx-pt-10{padding-top:2.5rem}.nx-pt-4{padding-top:1rem}.nx-pt-6{padding-top:1.5rem}.nx-pt-8{padding-top:2rem}.nx-text-left{text-align:left}.nx-text-center{text-align:center}.nx-font-mono{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace}.nx-text-2xl{font-size:1.5rem}.nx-text-3xl{font-size:1.875rem}.nx-text-4xl{font-size:2.25rem}.nx-text-\\\\[\\\\.85em\\\\]{font-size:.85em}.nx-text-\\\\[10px\\\\]{font-size:10px}.nx-text-base{font-size:1rem}.nx-text-lg{font-size:1.125rem}.nx-text-sm{font-size:.875rem}.nx-text-xl{font-size:1.25rem}.nx-text-xs{font-size:.75rem}.nx-font-bold{font-weight:700}.nx-font-extrabold{font-weight:800}.nx-font-medium{font-weight:500}.nx-font-normal{font-weight:400}.nx-font-semibold{font-weight:600}.nx-uppercase{text-transform:uppercase}.nx-capitalize{text-transform:capitalize}.nx-italic{font-style:italic}.nx-leading-5{line-height:1.25rem}.nx-leading-7{line-height:1.75rem}.nx-leading-\\\\[1\\\\.35rem\\\\]{line-height:1.35rem}.nx-leading-tight{line-height:1.25}.nx-tracking-tight{letter-spacing:-.015em}.nx-text-blue-900{--tw-text-opacity:1;color:rgba(30,58,138,var(--tw-text-opacity))}.nx-text-current{color:currentColor}.nx-text-gray-100{--tw-text-opacity:1;color:rgba(243,244,246,var(--tw-text-opacity))}.nx-text-gray-400{--tw-text-opacity:1;color:rgba(156,163,175,var(--tw-text-opacity))}.nx-text-gray-500{--tw-text-opacity:1;color:rgba(107,114,128,var(--tw-text-opacity))}.nx-text-gray-600{--tw-text-opacity:1;color:rgba(75,85,99,var(--tw-text-opacity))}.nx-text-gray-700{--tw-text-opacity:1;color:rgba(55,65,81,var(--tw-text-opacity))}.nx-text-gray-800{--tw-text-opacity:1;color:rgba(31,41,55,var(--tw-text-opacity))}.nx-text-gray-900{--tw-text-opacity:1;color:rgba(17,24,39,var(--tw-text-opacity))}.nx-text-orange-800{--tw-text-opacity:1;color:rgba(154,52,18,var(--tw-text-opacity))}.nx-text-primary-500{--tw-text-opacity:1;color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-text-opacity))}.nx-text-red-900{--tw-text-opacity:1;color:rgba(127,29,29,var(--tw-text-opacity))}.nx-text-slate-50{--tw-text-opacity:1;color:rgba(248,250,252,var(--tw-text-opacity))}.nx-text-yellow-900{--tw-text-opacity:1;color:rgba(113,63,18,var(--tw-text-opacity))}.nx-underline{-webkit-text-decoration-line:underline;text-decoration-line:underline}.nx-decoration-from-font{text-decoration-thickness:from-font}.nx-subpixel-antialiased{-webkit-font-smoothing:auto;-moz-osx-font-smoothing:auto}.nx-opacity-0{opacity:0}.nx-opacity-100{opacity:1}.nx-opacity-80{opacity:.8}.nx-shadow{--tw-shadow:0 1px 3px 0 rgba(0,0,0,.1),0 1px 2px -1px rgba(0,0,0,.1);--tw-shadow-colored:0 1px 3px 0 var(--tw-shadow-color),0 1px 2px -1px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-shadow-\\\\[0_-12px_16px_\\\\#fff\\\\]{--tw-shadow:0 -12px 16px #fff;--tw-shadow-colored:0 -12px 16px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-shadow-\\\\[0_-12px_16px_white\\\\]{--tw-shadow:0 -12px 16px white;--tw-shadow-colored:0 -12px 16px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-shadow-\\\\[0_2px_14px_6px_\\\\#fff\\\\]{--tw-shadow:0 2px 14px 6px #fff;--tw-shadow-colored:0 2px 14px 6px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-shadow-\\\\[0_2px_4px_rgba\\\\(0\\\\,0\\\\,0\\\\,\\\\.02\\\\)\\\\,0_-1px_0_rgba\\\\(0\\\\,0\\\\,0\\\\,\\\\.06\\\\)_inset\\\\]{--tw-shadow:0 2px 4px rgba(0,0,0,.02),0 -1px 0 rgba(0,0,0,.06) inset;--tw-shadow-colored:0 2px 4px var(--tw-shadow-color),inset 0 -1px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-shadow-lg{--tw-shadow:0 10px 15px -3px rgba(0,0,0,.1),0 4px 6px -4px rgba(0,0,0,.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color),0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-shadow-sm{--tw-shadow:0 1px 2px 0 rgba(0,0,0,.05);--tw-shadow-colored:0 1px 2px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-shadow-xl{--tw-shadow:0 20px 25px -5px rgba(0,0,0,.1),0 8px 10px -6px rgba(0,0,0,.1);--tw-shadow-colored:0 20px 25px -5px var(--tw-shadow-color),0 8px 10px -6px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-transition-all{transition-property:all;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1)}.nx-transition-colors{transition-property:color,background-color,border-color,fill,stroke,-webkit-text-decoration-color;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke;transition-property:color,background-color,border-color,text-decoration-color,fill,stroke,-webkit-text-decoration-color;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1)}.nx-transition-opacity{transition-property:opacity;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1)}.nx-transition-transform{transition-property:transform;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1)}.nx-duration-100{transition-duration:.1s}.nx-duration-300{transition-duration:.3s}.nx-duration-500{transition-duration:.5s}.nx-ease-in-out{transition-timing-function:cubic-bezier(.4,0,.2,1)}.\\\\[-webkit-tap-highlight-color\\\\:transparent\\\\]{-webkit-tap-highlight-color:transparent}.\\\\[-webkit-touch-callout\\\\:none\\\\]{-webkit-touch-callout:none}.\\\\[hyphens\\\\:auto\\\\]{-webkit-hyphens:auto;hyphens:auto}.\\\\[text-underline-position\\\\:under\\\\]{text-underline-position:under}.\\\\[transform\\\\:translate3d\\\\(0\\\\,-100\\\\%\\\\,0\\\\)\\\\]{transform:translateY(-100%)}.\\\\[transform\\\\:translate3d\\\\(0\\\\,0\\\\,0\\\\)\\\\]{transform:translate(0,0)}.\\\\[transition\\\\:background-color_1\\\\.5s_ease\\\\]{transition:background-color 1.5s}.\\\\[word-break\\\\:break-word\\\\]{word-break:break-word}:root{--shiki-color-text:#414141;--shiki-color-background:transparent;--shiki-token-constant:#1976d2;--shiki-token-string:#22863a;--shiki-token-comment:#aaa;--shiki-token-keyword:#d32f2f;--shiki-token-parameter:#ff9800;--shiki-token-function:#6f42c1;--shiki-token-string-expression:#22863a;--shiki-token-punctuation:#212121;--shiki-token-link:#22863a;--nextra-shiki-deleted:red;--nextra-shiki-inserted:red}.dark{--shiki-color-text:#d1d1d1;--shiki-token-constant:#79b8ff;--shiki-token-string:#ffab70;--shiki-token-comment:#6b737c;--shiki-token-keyword:#f97583;--shiki-token-parameter:#ff9800;--shiki-token-function:#b392f0;--shiki-token-string-expression:#4bb74a;--shiki-token-punctuation:#bbb;--shiki-token-link:#ffab70}.subheading-anchor{opacity:0;transition-property:opacity;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1)}.subheading-anchor:where([dir=ltr],[dir=ltr] *){margin-left:.25rem}.subheading-anchor:where([dir=rtl],[dir=rtl] *){margin-right:.25rem}span:target+.subheading-anchor,:hover>.subheading-anchor,.subheading-anchor:focus{opacity:1}span+.subheading-anchor,:hover>.subheading-anchor{-webkit-text-decoration-line:none!important;text-decoration-line:none!important}.subheading-anchor:after{--tw-content:\\\"#\\\";content:var(--tw-content);--tw-text-opacity:1;color:rgba(209,213,219,var(--tw-text-opacity));padding-left:.25rem;padding-right:.25rem}.subheading-anchor:is(html[class~=dark] *):after{--tw-text-opacity:1;color:rgba(64,64,64,var(--tw-text-opacity))}span:target+.subheading-anchor:after{--tw-text-opacity:1;color:rgba(156,163,175,var(--tw-text-opacity))}span:target+.subheading-anchor:is(html[class~=dark] *):after{--tw-text-opacity:1;color:rgba(115,115,115,var(--tw-text-opacity))}.nextra-hamburger svg g{transform-origin:50%;transition:transform .2s cubic-bezier(.25,1,.5,1)}.nextra-hamburger svg path{opacity:1;transition:transform .2s cubic-bezier(.25,1,.5,1) .2s,opacity .2s .2s}.nextra-hamburger svg.open path{transition:transform .2s cubic-bezier(.25,1,.5,1),opacity 0s .2s}.nextra-hamburger svg.open g{transition:transform .2s cubic-bezier(.25,1,.5,1) .2s}.nextra-hamburger svg.open>path{opacity:0}.nextra-hamburger svg.open>g:first-of-type{--tw-rotate:45deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.nextra-hamburger svg.open>g:first-of-type path{transform:translateY(6px)}.nextra-hamburger svg.open>g:nth-of-type(2){--tw-rotate:-45deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.nextra-hamburger svg.open>g:nth-of-type(2) path{transform:translateY(-6px)}.nextra-scrollbar{scrollbar-width:thin;scrollbar-color:rgba(115,115,115,.4) transparent;scrollbar-gutter:stable}.nextra-scrollbar::-webkit-scrollbar{width:.375rem;height:.375rem}.nextra-scrollbar::-webkit-scrollbar-track{background-color:transparent}.nextra-scrollbar::-webkit-scrollbar-thumb{border-radius:20px}.nextra-scrollbar:hover::-webkit-scrollbar-thumb{--tw-shadow:var(--tw-shadow-colored);--tw-shadow-colored:inset 0 0 0 5px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow);--tw-shadow-color:rgba(115,115,115,.2)}.nextra-scrollbar:hover::-webkit-scrollbar-thumb:hover{--tw-shadow-color:rgba(115,115,115,.4);--tw-shadow:var(--tw-shadow-colored)}@media (max-width:767px){.nextra-container .nextra-scrollbar{scrollbar-gutter:auto}}.no-scrollbar{scrollbar-width:none;-ms-overflow-style:none}.no-scrollbar::-webkit-scrollbar{display:none}article.nextra-body-typesetting-article{font-feature-settings:\\\"rlig\\\" 1,\\\"calt\\\" 1;font-size:17px}article.nextra-body-typesetting-article h1{text-align:center;margin-top:1.5rem;margin-bottom:1rem;font-size:2.5rem}article.nextra-body-typesetting-article h2{border-style:none}article.nextra-body-typesetting-article a{-webkit-text-decoration-line:none;text-decoration-line:none}article.nextra-body-typesetting-article a:hover{-webkit-text-decoration-line:underline;text-decoration-line:underline}article.nextra-body-typesetting-article p{line-height:2rem}article.nextra-body-typesetting-article code{border-style:none}article.nextra-body-typesetting-article code:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(64,64,64,var(--tw-bg-opacity))}article.nextra-body-typesetting-article pre code:is(html[class~=dark] *){background-color:transparent}article.nextra-body-typesetting-article .subheading-anchor+a{-webkit-text-decoration-line:none;text-decoration-line:none}article.nextra-body-typesetting-article .subheading-anchor+a:after{content:var(--tw-content);display:none}article.nextra-body-typesetting-article .subheading-anchor+a:hover{-webkit-text-decoration-line:none;text-decoration-line:none}html{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;font-feature-settings:\\\"rlig\\\" 1,\\\"calt\\\" 1,\\\"ss01\\\" 1,\\\"ss06\\\" 1;-webkit-tap-highlight-color:transparent;font-size:1rem}body{scroll-behavior:smooth;--tw-bg-opacity:1;background-color:rgba(255,255,255,var(--tw-bg-opacity));width:100%}body:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(17,17,17,var(--tw-bg-opacity));--tw-text-opacity:1;color:rgba(243,244,246,var(--tw-text-opacity))}a,summary,button,input,[tabindex]:not([tabindex=\\\"-1\\\"]){outline-offset:2px;outline:2px solid transparent}a:focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset)0 0 0 var(--tw-ring-offset-width)var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent);--tw-ring-opacity:1;--tw-ring-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-ring-opacity));--tw-ring-offset-width:1px;--tw-ring-offset-color:hsl(var(--nextra-primary-hue)100% 75%)}summary:focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset)0 0 0 var(--tw-ring-offset-width)var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent);--tw-ring-opacity:1;--tw-ring-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-ring-opacity));--tw-ring-offset-width:1px;--tw-ring-offset-color:hsl(var(--nextra-primary-hue)100% 75%)}button:focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset)0 0 0 var(--tw-ring-offset-width)var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent);--tw-ring-opacity:1;--tw-ring-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-ring-opacity));--tw-ring-offset-width:1px;--tw-ring-offset-color:hsl(var(--nextra-primary-hue)100% 75%)}input:focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset)0 0 0 var(--tw-ring-offset-width)var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent);--tw-ring-opacity:1;--tw-ring-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-ring-opacity));--tw-ring-offset-width:1px;--tw-ring-offset-color:hsl(var(--nextra-primary-hue)100% 75%)}[tabindex]:not([tabindex=\\\"-1\\\"]):focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset)0 0 0 var(--tw-ring-offset-width)var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent);--tw-ring-opacity:1;--tw-ring-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-ring-opacity));--tw-ring-offset-width:1px;--tw-ring-offset-color:hsl(var(--nextra-primary-hue)100% 75%)}a,summary{border-radius:.25rem}@media (max-width:767px){.nextra-sidebar-container{z-index:15;overscroll-behavior:contain;--tw-bg-opacity:1;background-color:rgba(255,255,255,var(--tw-bg-opacity));padding-top:calc(var(--nextra-navbar-height));width:100%;position:fixed;top:0;bottom:0}.nextra-sidebar-container:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(17,17,17,var(--tw-bg-opacity))}.nextra-sidebar-container{will-change:transform,opacity;contain:layout style;-webkit-backface-visibility:hidden;backface-visibility:hidden;transition:transform .8s cubic-bezier(.52,.16,.04,1)}.nextra-banner-container~div .nextra-sidebar-container{padding-top:6.5rem}.nextra-banner-container~div.nextra-nav-container{top:2.5rem}@media (min-width:768px){.nextra-banner-container~div.nextra-nav-container{top:0}}.nextra-banner-hidden .nextra-banner-container~div .nextra-sidebar-container{padding-top:4rem}.nextra-banner-hidden .nextra-nav-container{top:0!important}.nextra-search .excerpt{text-overflow:ellipsis;line-clamp:1;-webkit-line-clamp:1;-webkit-box-orient:vertical;display:-webkit-box;overflow:hidden}}@media (prefers-reduced-motion:reduce) and (max-width:767px){article:before,.nextra-sidebar-container,.nextra-sidebar-container.open,body.resizing .nextra-sidebar-container{transition-property:none}}article details>summary::-webkit-details-marker{display:none}article details>summary:before{vertical-align:-4px;background-image:url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' class='h-5 w-5' viewBox='0 0 20 20' fill='currentColor'%3E%3Cpath fill-rule='evenodd' d='M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z' clip-rule='evenodd' /%3E%3C/svg%3E\\\");width:1.2em;height:1.2em}@media (min-width:768px){.nextra-toc>.div,.nextra-sidebar-container{-webkit-mask-image:linear-gradient(transparent,#000 20px),linear-gradient(270deg,#000 10px,transparent 10px);mask-image:linear-gradient(transparent,#000 20px),linear-gradient(270deg,#000 10px,transparent 10px)}}@supports ((-webkit-backdrop-filter: blur(1px)) or (backdrop-filter: blur(1px))){.nextra-search ul{--tw-backdrop-blur:blur(16px);-webkit-backdrop-filter:var(--tw-backdrop-blur)var(--tw-backdrop-brightness)var(--tw-backdrop-contrast)var(--tw-backdrop-grayscale)var(--tw-backdrop-hue-rotate)var(--tw-backdrop-invert)var(--tw-backdrop-opacity)var(--tw-backdrop-saturate)var(--tw-backdrop-sepia);backdrop-filter:var(--tw-backdrop-blur)var(--tw-backdrop-brightness)var(--tw-backdrop-contrast)var(--tw-backdrop-grayscale)var(--tw-backdrop-hue-rotate)var(--tw-backdrop-invert)var(--tw-backdrop-opacity)var(--tw-backdrop-saturate)var(--tw-backdrop-sepia);background-color:rgba(255,255,255,.7)}.nextra-search ul:is(html[class~=dark] *){background-color:rgba(17,17,17,.8)}.nextra-nav-container-blur{--tw-backdrop-blur:blur(12px);-webkit-backdrop-filter:var(--tw-backdrop-blur)var(--tw-backdrop-brightness)var(--tw-backdrop-contrast)var(--tw-backdrop-grayscale)var(--tw-backdrop-hue-rotate)var(--tw-backdrop-invert)var(--tw-backdrop-opacity)var(--tw-backdrop-saturate)var(--tw-backdrop-sepia);backdrop-filter:var(--tw-backdrop-blur)var(--tw-backdrop-brightness)var(--tw-backdrop-contrast)var(--tw-backdrop-grayscale)var(--tw-backdrop-hue-rotate)var(--tw-backdrop-invert)var(--tw-backdrop-opacity)var(--tw-backdrop-saturate)var(--tw-backdrop-sepia);background-color:rgba(255,255,255,.85)}.nextra-nav-container-blur:is(html[class~=dark] *){background-color:rgba(17,17,17,.8)!important}}input[type=search]::-webkit-search-decoration{-webkit-appearance:none}input[type=search]::-webkit-search-cancel-button{-webkit-appearance:none}input[type=search]::-webkit-search-results-button{-webkit-appearance:none}input[type=search]::-webkit-search-results-decoration{-webkit-appearance:none}.contains-task-list{margin-left:0;list-style-type:none}.contains-task-list input[type=checkbox]{margin-right:.25rem}.nextra-banner-hidden .nextra-banner-container{display:none}:root{--docs-accent-color:#9580ff;--docs-accent-color-opacity:rgba(149,128,255,.376);--docs-accent-color-link:#9580ff;--docs-light-bg:rgba(229,229,229,.376);--docs-dark-bg:rgba(42,42,42,.565);--nextra-navbar-height:4rem}@media (min-width:640px){:root{--nextra-navbar-height:7rem}.nextra-sidebar-container>div{margin-top:10px;padding-top:0}.nextra-nav-container nav{height:var(--nextra-navbar-height)}aside{height:calc(100vh - var(--nextra-navbar-height));top:calc(var(--nextra-navbar-height) + 4px)!important}}html[class~=dark]{--nextra-primary-hue:250;--nextra-primary-hue-saturation:100%;--nextra-primary-hue-lightness:75%}html,body,kbd{-webkit-font-smoothing:\\\"antialiased\\\";font-family:Inter,Helvetica Neue,Helvetica,Arial,\\\"sans-serif\\\"}html{font-size:17px}.nextra-nav-container nav{box-sizing:border-box;padding:1rem 2.5rem}.nextra-toc{padding-right:1rem}@media (max-width:640px){.nextra-nav-container{padding:0}.nextra-nav-container nav{padding:1rem 2rem}aside{height:100%;top:0}}html[class~=dark] .dark\\\\:text-gray-400,html[class~=dark] .text-gray-500{color:#999!important}html[class~=dark] .dark\\\\:bg-dark{background-color:#0e0e0e}html[class~=light] body{color:#0e0e0e}html[class~=dark] body{color:#c5c5c5}html[class~=dark] p strong,html[class~=dark] h1,html[class~=dark] h2,html[class~=dark] h3,html[class~=dark] h4{color:#fff}p a,p li a{text-underline-offset:.01em;text-decoration:underline;text-decoration-thickness:1px;-webkit-text-decoration-color:var(--docs-accent-color-opacity);text-decoration-color:var(--docs-accent-color-opacity)}p a:hover,p li a:hover{-webkit-text-decoration-color:var(--docs-accent-color-link);text-decoration-color:var(--docs-accent-color-link)}.nextra-nav-container{border-top:4px solid var(--docs-accent-color)}.nextra-nav-container nav{justify-content:space-between}.nextra-nav-container nav>a{flex-shrink:0;width:15.3rem;margin:0!important}@media (max-width:650px){.nextra-nav-container nav>a{flex-shrink:1;width:auto}}.nextra-nav-container .cbs-menu-container{justify-content:space-between;width:100%;max-width:59rem;display:flex}.nextra-nav-container .cbs-menu-container .cbs-menu{gap:.4rem;display:flex}.nextra-nav-container .cbs-menu-container .cbs-menu a{font-size:.9rem;font-weight:500}.nextra-nav-container .nextra-nav-container-blur{border:none;box-shadow:none!important}html[class~=dark] .nextra-nav-container .nextra-nav-container-blur{background-color:#0e0e0e}.logo{margin-top:6px}.centerNav{margin-top:4px;font-weight:500}.centerNav input{font-weight:500}.nextra-nav-container+div,.nextra-nav-container nav{max-width:100%}.centerNav a:first-child{padding-left:4px}@media (max-width:640px){.logo{flex-shrink:1}.rightMenuWrap{justify-content:flex-end}}html[class~=dark] .nextra-search input,html[class~=dark] .nextra-search input:focus{background-color:#0d0d0d;border-color:#252525}html[class~=dark] .nextra-search input::placeholder{color:rgba(229,229,229,.376)}html[class~=dark] .nextra-search input::placeholder{color:rgba(229,229,229,.376)}.nextra-sidebar-container-menu{border:none}@media (min-width:768px){.nextra-sidebar-container{padding-left:1rem}}.nextra-toc-meta,.nextra-sidebar-container-menu{box-shadow:none!important}.nextra-sidebar-container .nextra-scrollbar+div{border-width:0;height:4rem}.nextra-toc ul li a,.nextra-sidebar-container ul li.active>a,.nextra-sidebar-container ul li.active>a:hover{font-weight:400}html[class~=light] .nextra-sidebar-container ul li a{color:#0e0e0e}html[class~=light] .nextra-sidebar-container ul li a:hover,html[class~=light] .nextra-sidebar-container ul li.active>a:hover{background-color:var(--docs-light-bg)}html[class~=dark] .nextra-sidebar-container ul li a:hover,html[class~=dark] .nextra-sidebar-container ul li.active>a:hover{background-color:var(--docs-dark-bg)}html[class~=dark] .folderAsHeader .nextra-sidebar-container ul li a{color:#c5c5c5;font-size:1.05rem}html[class~=dark] .folderAsHeader .nextra-sidebar-container ul li ul li a{color:#999;font-size:.875rem}html[class~=dark] .folderAsHeader .nextra-sidebar-container ul li.active>a,html[class~=dark] .nextra-toc ul li a[aria-selected=true],html[class~=light] .folderAsHeader .nextra-sidebar-container ul li.active>a,html[class~=light] .nextra-toc ul li a[aria-selected=true]{color:var(--docs-accent-color);background-color:transparent}html[class~=dark] .nextra-sidebar-container ul li.active>a:hover,html[class~=dark] .nextra-toc ul li a[aria-selected=true]:hover,html[class~=light] .nx-text-primary-500{color:var(--docs-accent-color)}html[class~=light] .nx-border-primary-500{border-color:var(--docs-accent-color)}@media (max-width:640px){html[class~=dark] .folderAsHeader .nextra-sidebar-container ul li.active>a{color:currentColor;text-align:left}.folderAsHeader .nextra-sidebar-container ul ul li a{justify-content:normal}}.folderAsHeader .nextra-sidebar-container ul ul{margin:.3rem 0 1.2rem;padding-left:0}.folderAsHeader .nextra-sidebar-container ul div{padding-left:0}.folderAsHeader .nextra-sidebar-container ul ul:before{content:none}.folderAsHeader .nextra-sidebar-container ul li a{font-size:16px}.folderAsHeader .nextra-sidebar-container a svg{opacity:0;transition:opacity .1s}.folderAsHeader .nextra-sidebar-container a:hover svg{opacity:1}svg:hover{background:0 0!important}.folderAsHeader .nextra-sidebar-container ul>li>a,.folderAsHeader .nextra-sidebar-container ul>li>a:hover{cursor:default;font-weight:600;line-height:1.3}.folderAsHeader .nextra-sidebar-container ul>li li a,.folderAsHeader .nextra-sidebar-container ul>li li a:hover{cursor:pointer;font-weight:400}.folderAsHeader .nextra-sidebar-container ul li ul li a{font-size:14px}.wip{opacity:.5;display:flex;position:relative}.wip:after{content:\\\"WIP\\\";opacity:.6;border-radius:2px;padding:2px;font-size:9px;line-height:13px;position:absolute;top:50%;right:0;transform:translateY(-35%)}main div.mt-12{display:none}.nextra-breadcrumb{pointer-events:none;display:none}.nextra-navigation-links{border:none;margin-top:6rem;padding-bottom:4rem}html[class~=dark] article p a,html[class~=dark] article li a,html[class~=dark] .dark\\\\:hover\\\\:text-primary-500:hover,html[class~=light] article p a,html[class~=light] article li a,html[class~=light] .dark\\\\:hover\\\\:text-primary-500:hover{color:var(--docs-accent-color-link)!important}p kbd{border-radius:4px;padding:6px 6px 7px;font-size:13px;font-weight:700;line-height:14px}html[class~=light] p kbd{color:#4b5563;background:rgba(75,85,99,.12);box-shadow:inset 0 -2px rgba(75,85,99,.24)}html[class~=dark] p kbd{color:#c5c5c5;background:#2a2a2a;box-shadow:inset 0 -2px rgba(255,255,255,.12)}html[class~=light] p code{background-color:var(--docs-light-bg);border:1px solid #e5e7eb}html[class~=dark] p code{background-color:var(--docs-dark-bg);color:#c5c5c5;border:1px solid #373737}.nextra-callout{box-sizing:border-box;border-radius:6px;align-items:flex-start;padding:16px;display:flex}.nextra-callout .pr-2{padding-right:1rem}html[class~=light] .nextra-callout{color:rgba(65,65,65,.9);background-color:var(--docs-light-bg);border:none!important}html[class~=dark] .nextra-callout{background:var(--docs-dark-bg)!important;color:#999!important;border:none!important}html[class~=dark] .nextra-callout h4{color:#fff}html[class~=light] .nextra-callout h4{color:#000}.ctaContainer{gap:1.3rem;margin:2rem 0;display:flex}@media (max-width:920px){.ctaContainer{flex-direction:column}}.cbs article h1{letter-spacing:-.05em;margin-top:0;font-size:3.5rem;font-weight:700;line-height:100%}@media (max-width:640px){.cbs article h1{font-size:3rem}}.cbs article h2{letter-spacing:-.025em;border:none;font-size:2rem;font-weight:700;line-height:120%}.cbs article h2 .nx-absolute,.cbs article h3 .nx-absolute{margin-top:-7rem}.cbs article h1:first-of-type{margin-top:-.16em}.cbs article h2{margin-top:2em}.cbs article h2+p:not(:first-child),.cbs article h3+p:not(:first-child){margin-top:.6rem}.cbs article h3{margin-top:1.5em}.cbs article img{border-radius:4px}.cbs article .subheading-anchor{margin-top:-110px}.nx-sandpack-fluid-layout{--sp-layout-height:auto}.placeholder\\\\:nx-text-gray-400::placeholder{--tw-text-opacity:1;color:rgba(156,163,175,var(--tw-text-opacity))}.placeholder\\\\:nx-text-gray-400::placeholder{--tw-text-opacity:1;color:rgba(156,163,175,var(--tw-text-opacity))}.before\\\\:nx-absolute:before{content:var(--tw-content);position:absolute}.before\\\\:nx-inset-y-1\\\\.5:before{content:var(--tw-content);top:.375rem;bottom:.375rem}.before\\\\:nx-mr-1:before{content:var(--tw-content);margin-right:.25rem}.before\\\\:nx-inline-block:before{content:var(--tw-content);display:inline-block}.before\\\\:nx-w-px:before{content:var(--tw-content);width:1px}.before\\\\:nx-bg-gray-200:before{content:var(--tw-content);--tw-bg-opacity:1;background-color:rgba(229,231,235,var(--tw-bg-opacity))}.before\\\\:nx-opacity-25:before{content:var(--tw-content);opacity:.25}.before\\\\:nx-transition-transform:before{content:var(--tw-content);transition-property:transform;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1)}.before\\\\:nx-content-\\\\[\\\\\\\"\\\\\\\"\\\\]:before{--tw-content:\\\"\\\";content:var(--tw-content)}.before\\\\:nx-content-\\\\[\\\\\\\"\\\\#\\\\\\\"\\\\]:before{--tw-content:\\\"#\\\";content:var(--tw-content)}.before\\\\:nx-content-\\\\[\\\\'\\\\'\\\\]:before{--tw-content:\\\"\\\";content:var(--tw-content)}.first\\\\:nx-mt-0:first-child{margin-top:0}.hover\\\\:nx-border-gray-200:hover{--tw-border-opacity:1;border-color:rgba(229,231,235,var(--tw-border-opacity))}.hover\\\\:nx-bg-gray-100:hover{--tw-bg-opacity:1;background-color:rgba(243,244,246,var(--tw-bg-opacity))}.hover\\\\:nx-bg-gray-800\\\\/5:hover{background-color:rgba(31,41,55,.05)}.hover\\\\:nx-text-black:hover{--tw-text-opacity:1;color:rgba(0,0,0,var(--tw-text-opacity))}.hover\\\\:nx-text-gray-800:hover{--tw-text-opacity:1;color:rgba(31,41,55,var(--tw-text-opacity))}.hover\\\\:nx-text-gray-900:hover{--tw-text-opacity:1;color:rgba(17,24,39,var(--tw-text-opacity))}.hover\\\\:nx-text-primary-500:hover{--tw-text-opacity:1;color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-text-opacity))}.hover\\\\:nx-opacity-100:hover{opacity:1}.hover\\\\:nx-opacity-70:hover{opacity:.7}.hover\\\\:nx-opacity-75:hover{opacity:.75}.focus\\\\:nx-bg-white:focus{--tw-bg-opacity:1;background-color:rgba(255,255,255,var(--tw-bg-opacity))}.active\\\\:nx-bg-gray-400\\\\/20:active{background-color:rgba(156,163,175,.2)}@media (prefers-reduced-motion:reduce){.motion-reduce\\\\:nx-transition-none{transition-property:none}}@media (prefers-contrast:more){.contrast-more\\\\:nx-border{border-width:1px}.contrast-more\\\\:nx-border-t{border-top-width:1px}.contrast-more\\\\:nx-border-current{border-color:currentColor}.contrast-more\\\\:nx-border-gray-600{--tw-border-opacity:1;border-color:rgba(75,85,99,var(--tw-border-opacity))}.contrast-more\\\\:nx-border-gray-900{--tw-border-opacity:1;border-color:rgba(17,24,39,var(--tw-border-opacity))}.contrast-more\\\\:nx-border-neutral-400{--tw-border-opacity:1;border-color:rgba(163,163,163,var(--tw-border-opacity))}.contrast-more\\\\:nx-border-primary-500{--tw-border-opacity:1;border-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-border-opacity))}.contrast-more\\\\:nx-border-transparent{border-color:transparent}.contrast-more\\\\:nx-font-bold{font-weight:700}.contrast-more\\\\:\\\\!nx-text-primary-500{--tw-text-opacity:1!important;color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-text-opacity))!important}.contrast-more\\\\:nx-text-current{color:currentColor}.contrast-more\\\\:nx-text-gray-700{--tw-text-opacity:1;color:rgba(55,65,81,var(--tw-text-opacity))}.contrast-more\\\\:nx-text-gray-800{--tw-text-opacity:1;color:rgba(31,41,55,var(--tw-text-opacity))}.contrast-more\\\\:nx-text-gray-900{--tw-text-opacity:1;color:rgba(17,24,39,var(--tw-text-opacity))}.contrast-more\\\\:nx-underline{-webkit-text-decoration-line:underline;text-decoration-line:underline}.contrast-more\\\\:nx-shadow-\\\\[0_0_0_1px_\\\\#000\\\\]{--tw-shadow:0 0 0 1px #000;--tw-shadow-colored:0 0 0 1px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.contrast-more\\\\:nx-shadow-none{--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.contrast-more\\\\:hover\\\\:nx-border-gray-900:hover{--tw-border-opacity:1;border-color:rgba(17,24,39,var(--tw-border-opacity))}}.dark\\\\:nx-border-blue-200\\\\/30:is(html[class~=dark] *){border-color:rgba(191,219,254,.3)}.dark\\\\:nx-border-gray-100\\\\/20:is(html[class~=dark] *){border-color:rgba(243,244,246,.2)}.dark\\\\:nx-border-gray-700:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(55,65,81,var(--tw-border-opacity))}.dark\\\\:nx-border-gray-900:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(17,24,39,var(--tw-border-opacity))}.dark\\\\:nx-border-neutral-800:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(38,38,38,var(--tw-border-opacity))}.dark\\\\:nx-border-orange-400\\\\/30:is(html[class~=dark] *){border-color:rgba(251,146,60,.3)}.dark\\\\:nx-border-primary-100\\\\/10:is(html[class~=dark] *){border-color:hsl(var(--nextra-primary-hue)100% 75%/.1)}.dark\\\\:nx-border-red-200\\\\/30:is(html[class~=dark] *){border-color:rgba(254,202,202,.3)}.dark\\\\:nx-border-white\\\\/10:is(html[class~=dark] *){border-color:rgba(255,255,255,.1)}.dark\\\\:nx-border-white\\\\/20:is(html[class~=dark] *){border-color:rgba(255,255,255,.2)}.dark\\\\:nx-bg-black\\\\/60:is(html[class~=dark] *){background-color:rgba(0,0,0,.6)}.dark\\\\:nx-bg-blue-900\\\\/30:is(html[class~=dark] *){background-color:rgba(30,58,138,.3)}.dark\\\\:nx-bg-dark:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(17,17,17,var(--tw-bg-opacity))}.dark\\\\:nx-bg-dark\\\\/50:is(html[class~=dark] *){background-color:rgba(17,17,17,.5)}.dark\\\\:nx-bg-gray-50\\\\/10:is(html[class~=dark] *){background-color:rgba(249,250,251,.1)}.dark\\\\:nx-bg-neutral-800:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(38,38,38,var(--tw-bg-opacity))}.dark\\\\:nx-bg-neutral-900:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(23,23,23,var(--tw-bg-opacity))}.dark\\\\:nx-bg-orange-400\\\\/20:is(html[class~=dark] *){background-color:rgba(251,146,60,.2)}.dark\\\\:nx-bg-primary-100\\\\/10:is(html[class~=dark] *){background-color:hsl(var(--nextra-primary-hue)100% 75%/.1)}.dark\\\\:nx-bg-primary-500\\\\/10:is(html[class~=dark] *){background-color:hsl(var(--nextra-primary-hue)100% 75%/.1)}.dark\\\\:nx-bg-red-900\\\\/30:is(html[class~=dark] *){background-color:rgba(127,29,29,.3)}.dark\\\\:nx-bg-white\\\\/10:is(html[class~=dark] *){background-color:rgba(255,255,255,.1)}.dark\\\\:nx-bg-yellow-700\\\\/30:is(html[class~=dark] *){background-color:rgba(161,98,7,.3)}.dark\\\\:nx-bg-\\\\[linear-gradient\\\\(1deg\\\\,\\\\#383838\\\\,\\\\#212121\\\\)\\\\]:is(html[class~=dark] *){background-image:linear-gradient(1deg,#383838,#212121)}.dark\\\\:nx-text-blue-200:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(191,219,254,var(--tw-text-opacity))}.dark\\\\:nx-text-gray-100:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(243,244,246,var(--tw-text-opacity))}.dark\\\\:nx-text-gray-200:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(229,231,235,var(--tw-text-opacity))}.dark\\\\:nx-text-gray-300:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(209,213,219,var(--tw-text-opacity))}.dark\\\\:nx-text-gray-400:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(156,163,175,var(--tw-text-opacity))}.dark\\\\:nx-text-gray-50:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(249,250,251,var(--tw-text-opacity))}.dark\\\\:nx-text-neutral-500:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(115,115,115,var(--tw-text-opacity))}.dark\\\\:nx-text-neutral-600:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(82,82,82,var(--tw-text-opacity))}.dark\\\\:nx-text-orange-300:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(253,186,116,var(--tw-text-opacity))}.dark\\\\:nx-text-red-200:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(254,202,202,var(--tw-text-opacity))}.dark\\\\:nx-text-white:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity))}.dark\\\\:nx-text-yellow-200:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(254,240,138,var(--tw-text-opacity))}.dark\\\\:nx-shadow-\\\\[0_-12px_16px_\\\\#111\\\\]:is(html[class~=dark] *){--tw-shadow:0 -12px 16px #111;--tw-shadow-colored:0 -12px 16px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.dark\\\\:nx-shadow-\\\\[0_-1px_0_rgba\\\\(255\\\\,255\\\\,255\\\\,\\\\.1\\\\)_inset\\\\]:is(html[class~=dark] *){--tw-shadow:0 -1px 0 rgba(255,255,255,.1) inset;--tw-shadow-colored:inset 0 -1px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.dark\\\\:nx-shadow-\\\\[0_2px_14px_6px_\\\\#111\\\\]:is(html[class~=dark] *){--tw-shadow:0 2px 14px 6px #111;--tw-shadow-colored:0 2px 14px 6px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.dark\\\\:placeholder\\\\:nx-text-gray-500:is(html[class~=dark] *)::placeholder{--tw-text-opacity:1;color:rgba(107,114,128,var(--tw-text-opacity))}.dark\\\\:before\\\\:nx-bg-neutral-800:is(html[class~=dark] *):before{content:var(--tw-content);--tw-bg-opacity:1;background-color:rgba(38,38,38,var(--tw-bg-opacity))}.dark\\\\:before\\\\:nx-invert:is(html[class~=dark] *):before{content:var(--tw-content);--tw-invert:invert(100%);filter:var(--tw-blur)var(--tw-brightness)var(--tw-contrast)var(--tw-grayscale)var(--tw-hue-rotate)var(--tw-invert)var(--tw-saturate)var(--tw-sepia)var(--tw-drop-shadow)}.dark\\\\:hover\\\\:nx-border-neutral-800:hover:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(38,38,38,var(--tw-border-opacity))}.dark\\\\:hover\\\\:nx-bg-gray-100\\\\/5:hover:is(html[class~=dark] *){background-color:rgba(243,244,246,.05)}.dark\\\\:hover\\\\:nx-bg-neutral-800:hover:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(38,38,38,var(--tw-bg-opacity))}.dark\\\\:hover\\\\:nx-bg-primary-100\\\\/5:hover:is(html[class~=dark] *){background-color:hsl(var(--nextra-primary-hue)100% 75%/.05)}.dark\\\\:hover\\\\:nx-text-gray-100:hover:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(243,244,246,var(--tw-text-opacity))}.dark\\\\:hover\\\\:nx-text-gray-200:hover:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(229,231,235,var(--tw-text-opacity))}.dark\\\\:hover\\\\:nx-text-gray-300:hover:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(209,213,219,var(--tw-text-opacity))}.dark\\\\:hover\\\\:nx-text-gray-50:hover:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(249,250,251,var(--tw-text-opacity))}.dark\\\\:hover\\\\:nx-text-white:hover:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity))}.dark\\\\:focus\\\\:nx-bg-dark:focus:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(17,17,17,var(--tw-bg-opacity))}@media (prefers-contrast:more){.contrast-more\\\\:dark\\\\:nx-border-current:is(html[class~=dark] *){border-color:currentColor}.contrast-more\\\\:dark\\\\:nx-border-gray-50:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(249,250,251,var(--tw-border-opacity))}.contrast-more\\\\:dark\\\\:nx-border-neutral-400:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(163,163,163,var(--tw-border-opacity))}.contrast-more\\\\:dark\\\\:nx-border-primary-500:is(html[class~=dark] *){--tw-border-opacity:1;border-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-border-opacity))}.dark\\\\:contrast-more\\\\:nx-border-neutral-400:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(163,163,163,var(--tw-border-opacity))}.contrast-more\\\\:dark\\\\:nx-text-current:is(html[class~=dark] *){color:currentColor}.contrast-more\\\\:dark\\\\:nx-text-gray-100:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(243,244,246,var(--tw-text-opacity))}.contrast-more\\\\:dark\\\\:nx-text-gray-300:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(209,213,219,var(--tw-text-opacity))}.contrast-more\\\\:dark\\\\:nx-text-gray-50:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(249,250,251,var(--tw-text-opacity))}.contrast-more\\\\:dark\\\\:nx-shadow-\\\\[0_0_0_1px_\\\\#fff\\\\]:is(html[class~=dark] *){--tw-shadow:0 0 0 1px #fff;--tw-shadow-colored:0 0 0 1px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.contrast-more\\\\:dark\\\\:nx-shadow-none:is(html[class~=dark] *){--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.dark\\\\:contrast-more\\\\:nx-shadow-none:is(html[class~=dark] *){--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.contrast-more\\\\:dark\\\\:hover\\\\:nx-border-gray-50:hover:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(249,250,251,var(--tw-border-opacity))}}@media (min-width:640px){.sm\\\\:nx-flex{display:flex}}@media (min-width:768px){.md\\\\:nx-sticky{position:-webkit-sticky;position:sticky}.md\\\\:nx-top-16{top:4rem}.md\\\\:-nx-mx-8{margin-left:-2rem;margin-right:-2rem}.md\\\\:nx-inline-block{display:inline-block}.md\\\\:nx-inline{display:inline}.md\\\\:nx-flex{display:flex}.md\\\\:nx-inline-flex{display:inline-flex}.md\\\\:nx-hidden{display:none}.md\\\\:nx-h-\\\\[calc\\\\(100vh-var\\\\(--nextra-navbar-height\\\\)-3\\\\.75rem\\\\)\\\\]{height:calc(100vh - var(--nextra-navbar-height) - 3.75rem)}.md\\\\:nx-max-h-\\\\[min\\\\(calc\\\\(100vh-5rem-env\\\\(safe-area-inset-bottom\\\\)\\\\)\\\\,400px\\\\)\\\\]{max-height:min(calc(100vh - 5rem - env(safe-area-inset-bottom)),400px)}.md\\\\:nx-w-64{width:16rem}.md\\\\:nx-shrink-0{flex-shrink:0}.md\\\\:nx-transform-none{transform:none}.md\\\\:nx-justify-start{justify-content:flex-start}.md\\\\:nx-self-start{align-self:flex-start}.md\\\\:nx-overflow-auto{overflow:auto}.md\\\\:nx-px-8{padding-left:2rem;padding-right:2rem}.md\\\\:nx-pt-12{padding-top:3rem}.md\\\\:nx-text-lg{font-size:1.125rem}.md\\\\:nx-text-sm{font-size:.875rem}}@media (min-width:1280px){.xl\\\\:nx-block{display:block}}@media (min-width:1536px){.\\\\32 xl\\\\:-nx-mx-24{margin-left:-6rem;margin-right:-6rem}}.ltr\\\\:nx-right-0:where([dir=ltr],[dir=ltr] *){right:0}.ltr\\\\:nx-right-1\\\\.5:where([dir=ltr],[dir=ltr] *){right:.375rem}.ltr\\\\:nx-right-3:where([dir=ltr],[dir=ltr] *){right:.75rem}.ltr\\\\:-nx-mr-4:where([dir=ltr],[dir=ltr] *){margin-right:-1rem}.ltr\\\\:nx-ml-1:where([dir=ltr],[dir=ltr] *){margin-left:.25rem}.ltr\\\\:nx-ml-12:where([dir=ltr],[dir=ltr] *){margin-left:3rem}.ltr\\\\:nx-ml-16:where([dir=ltr],[dir=ltr] *){margin-left:4rem}.ltr\\\\:nx-ml-3:where([dir=ltr],[dir=ltr] *){margin-left:.75rem}.ltr\\\\:nx-ml-4:where([dir=ltr],[dir=ltr] *){margin-left:1rem}.ltr\\\\:nx-ml-6:where([dir=ltr],[dir=ltr] *){margin-left:1.5rem}.ltr\\\\:nx-ml-8:where([dir=ltr],[dir=ltr] *){margin-left:2rem}.ltr\\\\:nx-ml-auto:where([dir=ltr],[dir=ltr] *){margin-left:auto}.ltr\\\\:nx-mr-auto:where([dir=ltr],[dir=ltr] *){margin-right:auto}.ltr\\\\:nx-rotate-180:where([dir=ltr],[dir=ltr] *){--tw-rotate:180deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.ltr\\\\:nx-rotate-90:where([dir=ltr],[dir=ltr] *){--tw-rotate:90deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.ltr\\\\:nx-border-l-2:where([dir=ltr],[dir=ltr] *){border-left-width:2px}.ltr\\\\:nx-pl-3:where([dir=ltr],[dir=ltr] *){padding-left:.75rem}.ltr\\\\:nx-pl-4:where([dir=ltr],[dir=ltr] *){padding-left:1rem}.ltr\\\\:nx-pl-6:where([dir=ltr],[dir=ltr] *){padding-left:1.5rem}.ltr\\\\:nx-pr-0:where([dir=ltr],[dir=ltr] *){padding-right:0}.ltr\\\\:nx-pr-2:where([dir=ltr],[dir=ltr] *){padding-right:.5rem}.ltr\\\\:nx-pr-4:where([dir=ltr],[dir=ltr] *){padding-right:1rem}.ltr\\\\:nx-pr-9:where([dir=ltr],[dir=ltr] *){padding-right:2.25rem}.ltr\\\\:nx-text-right:where([dir=ltr],[dir=ltr] *){text-align:right}.ltr\\\\:before\\\\:nx-left-0:where([dir=ltr],[dir=ltr] *):before{content:var(--tw-content);left:0}@media (min-width:768px){.ltr\\\\:md\\\\:nx-left-auto:where([dir=ltr],[dir=ltr] *){left:auto}}@media (min-width:1280px){.ltr\\\\:xl\\\\:nx-ml-\\\\[calc\\\\(50\\\\%-50vw\\\\+16rem\\\\)\\\\]:where([dir=ltr],[dir=ltr] *){margin-left:calc(50% - 50vw + 16rem)}.ltr\\\\:xl\\\\:nx-mr-\\\\[calc\\\\(50\\\\%-50vw\\\\)\\\\]:where([dir=ltr],[dir=ltr] *){margin-right:calc(50% - 50vw)}}.rtl\\\\:nx-left-0:where([dir=rtl],[dir=rtl] *){left:0}.rtl\\\\:nx-left-1\\\\.5:where([dir=rtl],[dir=rtl] *){left:.375rem}.rtl\\\\:nx-left-3:where([dir=rtl],[dir=rtl] *){left:.75rem}.rtl\\\\:-nx-ml-4:where([dir=rtl],[dir=rtl] *){margin-left:-1rem}.rtl\\\\:nx-ml-auto:where([dir=rtl],[dir=rtl] *){margin-left:auto}.rtl\\\\:nx-mr-1:where([dir=rtl],[dir=rtl] *){margin-right:.25rem}.rtl\\\\:nx-mr-12:where([dir=rtl],[dir=rtl] *){margin-right:3rem}.rtl\\\\:nx-mr-16:where([dir=rtl],[dir=rtl] *){margin-right:4rem}.rtl\\\\:nx-mr-3:where([dir=rtl],[dir=rtl] *){margin-right:.75rem}.rtl\\\\:nx-mr-4:where([dir=rtl],[dir=rtl] *){margin-right:1rem}.rtl\\\\:nx-mr-6:where([dir=rtl],[dir=rtl] *){margin-right:1.5rem}.rtl\\\\:nx-mr-8:where([dir=rtl],[dir=rtl] *){margin-right:2rem}.rtl\\\\:nx-mr-auto:where([dir=rtl],[dir=rtl] *){margin-right:auto}.rtl\\\\:-nx-rotate-180:where([dir=rtl],[dir=rtl] *){--tw-rotate:-180deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.rtl\\\\:nx-rotate-180:where([dir=rtl],[dir=rtl] *){--tw-rotate:180deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.rtl\\\\:nx-rotate-\\\\[-270deg\\\\]:where([dir=rtl],[dir=rtl] *){--tw-rotate:-270deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.rtl\\\\:nx-border-r-2:where([dir=rtl],[dir=rtl] *){border-right-width:2px}.rtl\\\\:nx-pl-0:where([dir=rtl],[dir=rtl] *){padding-left:0}.rtl\\\\:nx-pl-2:where([dir=rtl],[dir=rtl] *){padding-left:.5rem}.rtl\\\\:nx-pl-4:where([dir=rtl],[dir=rtl] *){padding-left:1rem}.rtl\\\\:nx-pl-9:where([dir=rtl],[dir=rtl] *){padding-left:2.25rem}.rtl\\\\:nx-pr-3:where([dir=rtl],[dir=rtl] *){padding-right:.75rem}.rtl\\\\:nx-pr-4:where([dir=rtl],[dir=rtl] *){padding-right:1rem}.rtl\\\\:nx-pr-6:where([dir=rtl],[dir=rtl] *){padding-right:1.5rem}.rtl\\\\:nx-text-left:where([dir=rtl],[dir=rtl] *){text-align:left}.rtl\\\\:before\\\\:nx-right-0:where([dir=rtl],[dir=rtl] *):before{content:var(--tw-content);right:0}.rtl\\\\:before\\\\:nx-rotate-180:where([dir=rtl],[dir=rtl] *):before{content:var(--tw-content);--tw-rotate:180deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}@media (min-width:768px){.rtl\\\\:md\\\\:nx-right-auto:where([dir=rtl],[dir=rtl] *){right:auto}}@media (min-width:1280px){.rtl\\\\:xl\\\\:nx-ml-\\\\[calc\\\\(50\\\\%-50vw\\\\)\\\\]:where([dir=rtl],[dir=rtl] *){margin-left:calc(50% - 50vw)}.rtl\\\\:xl\\\\:nx-mr-\\\\[calc\\\\(50\\\\%-50vw\\\\+16rem\\\\)\\\\]:where([dir=rtl],[dir=rtl] *){margin-right:calc(50% - 50vw + 16rem)}}[data-expanded]>.\\\\[\\\\[data-expanded\\\\]\\\\>\\\\&\\\\]\\\\:before\\\\:nx-rotate-90:before{content:var(--tw-content);--tw-rotate:90deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}body.nextra-banner-hidden .\\\\[body\\\\.nextra-banner-hidden_\\\\&\\\\]\\\\:nx-hidden{display:none}\", \"\",{\"version\":3,\"sources\":[\"webpack://../../packages/codesandbox-theme-docs/dist/style.css\"],\"names\":[],\"mappings\":\"AAAA,iBAAiB,uBAAuB,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,CAAC,cAAc,CAAC,cAAc,CAAC,YAAY,CAAC,YAAY,CAAC,iBAAiB,CAAC,qCAAqC,CAAC,6BAA6B,CAAC,4BAA4B,CAAC,2BAA2B,CAAC,cAAc,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,2BAA2B,CAAC,mCAAmC,CAAC,uCAAuC,CAAC,gCAAgC,CAAC,2BAA2B,CAAC,mCAAmC,CAAC,WAAW,CAAC,iBAAiB,CAAC,eAAe,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,aAAa,CAAC,eAAe,CAAC,YAAY,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,0BAA0B,CAAC,wBAAwB,CAAC,yBAAyB,CAAC,0BAA0B,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,eAAe,uBAAuB,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,CAAC,cAAc,CAAC,cAAc,CAAC,YAAY,CAAC,YAAY,CAAC,iBAAiB,CAAC,qCAAqC,CAAC,6BAA6B,CAAC,4BAA4B,CAAC,2BAA2B,CAAC,cAAc,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,2BAA2B,CAAC,mCAAmC,CAAC,uCAAuC,CAAC,gCAAgC,CAAC,2BAA2B,CAAC,mCAAmC,CAAC,WAAW,CAAC,iBAAiB,CAAC,eAAe,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,aAAa,CAAC,eAAe,CAAC,YAAY,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,0BAA0B,CAAC,wBAAwB,CAAC,yBAAyB,CAAC,0BAA0B,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,mBAAW,uBAAuB,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,CAAC,cAAc,CAAC,cAAc,CAAC,YAAY,CAAC,YAAY,CAAC,iBAAiB,CAAC,qCAAqC,CAAC,6BAA6B,CAAC,4BAA4B,CAAC,2BAA2B,CAAC,cAAc,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,2BAA2B,CAAC,mCAAmC,CAAC,uCAAuC,CAAC,gCAAgC,CAAC,2BAA2B,CAAC,mCAAmC,CAAC,WAAW,CAAC,iBAAiB,CAAC,eAAe,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,aAAa,CAAC,eAAe,CAAC,YAAY,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,0BAA0B,CAAC,wBAAwB,CAAC,yBAAyB,CAAC,0BAA0B,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,oBAAoB,CAA9mC,WAAW,uBAAuB,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,CAAC,cAAc,CAAC,cAAc,CAAC,YAAY,CAAC,YAAY,CAAC,iBAAiB,CAAC,qCAAqC,CAAC,6BAA6B,CAAC,4BAA4B,CAAC,2BAA2B,CAAC,cAAc,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,2BAA2B,CAAC,mCAAmC,CAAC,uCAAuC,CAAC,gCAAgC,CAAC,2BAA2B,CAAC,mCAAmC,CAAC,WAAW,CAAC,iBAAiB,CAAC,eAAe,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,aAAa,CAAC,eAAe,CAAC,YAAY,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,0BAA0B,CAAC,wBAAwB,CAAC,yBAAyB,CAAC,0BAA0B,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,iBAAiB,qBAAqB,CAAC,sBAAsB,CAAC,eAAe,eAAe,CAAC,KAAK,6BAA6B,CAAC,eAAU,CAAV,UAAU,CAAC,4BAA4B,CAAC,8BAA8B,CAAC,uCAAuC,CAAC,2MAA2M,CAAC,eAAe,CAAC,MAAM,6BAA6B,CAAC,eAAU,CAAV,UAAU,CAAC,4BAA4B,CAAC,8BAA8B,CAAC,uCAAuC,CAAC,2MAA2M,CAAC,eAAe,CAAC,KAAK,mBAAmB,CAAC,QAAQ,CAAC,GAAG,aAAa,CAAC,oBAAoB,CAAC,QAAQ,CAAC,oBAAoB,wCAAwC,CAAC,gCAAgC,CAAC,kBAAkB,iBAAiB,CAAC,mBAAmB,CAAC,EAAE,aAAa,CAAC,+BAA+B,CAAC,uBAAuB,CAAC,SAAS,kBAAkB,CAAC,kBAAkB,4BAA4B,CAAC,8BAA8B,CAAC,mGAAmG,CAAC,aAAa,CAAC,MAAM,aAAa,CAAC,QAAQ,uBAAuB,CAAC,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,IAAI,aAAa,CAAC,IAAI,SAAS,CAAC,MAAM,aAAa,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,sCAAsC,6BAA6B,CAAC,+BAA+B,CAAC,mBAAmB,CAAC,cAAc,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,sBAAsB,CAAC,aAAa,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,mBAAmB,CAAC,OAAO,yBAAyB,CAAC,4BAA4B,CAAC,qBAAqB,CAAC,2BAA2B,yBAAyB,CAAC,4BAA4B,CAAC,qBAAqB,CAAC,0BAA0B,yBAAyB,CAAC,4BAA4B,CAAC,qBAAqB,CAAC,2BAA2B,yBAAyB,CAAC,4BAA4B,CAAC,qBAAqB,CAAC,gBAAgB,YAAY,CAAC,iBAAiB,eAAe,CAAC,SAAS,uBAAuB,CAAC,4BAA4B,WAAW,CAAC,4BAA4B,WAAW,CAAC,cAAc,4BAA4B,CAAC,mBAAmB,CAAC,4BAA4B,uBAAuB,CAAC,6BAA6B,yBAAyB,CAAC,YAAY,CAAC,QAAQ,iBAAiB,CAAC,mDAAmD,QAAQ,CAAC,SAAS,QAAQ,CAAC,SAAS,CAAC,OAAO,SAAS,CAAC,WAAW,QAAQ,CAAC,SAAS,CAAC,eAAe,CAAC,OAAO,SAAS,CAAC,SAAS,eAAe,CAAyJ,mBAAmB,SAAS,CAAC,aAAa,CAAyD,sBAAsB,SAAS,CAAC,aAAa,CAAC,qBAAqB,cAAc,CAAC,UAAU,cAAc,CAAC,+CAA+C,qBAAqB,CAAC,aAAa,CAAC,UAAU,cAAc,CAAC,WAAW,CAAC,SAAS,YAAY,CAAC,YAAY,kBAAkB,CAAC,kBAAkB,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,iBAAiB,CAAC,eAAe,CAAC,wBAAwB,mBAAmB,CAAC,UAAU,cAAc,CAAC,aAAa,iBAAiB,CAAC,aAAa,iBAAiB,CAAC,WAAW,uBAAc,CAAd,eAAe,CAAC,YAAY,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,MAAM,CAAC,OAAO,CAAC,cAAc,KAAK,CAAC,QAAQ,CAAC,aAAa,QAAQ,CAAC,YAAY,OAAO,CAAC,UAAU,KAAK,CAAC,gBAAgB,OAAO,CAAC,aAAa,QAAQ,CAAC,SAAS,UAAU,CAAC,SAAS,UAAU,CAAC,aAAa,UAAU,CAAC,YAAY,SAAS,CAAC,eAAe,UAAU,CAAC,SAAS,aAAa,CAAC,UAAU,mBAAmB,CAAC,oBAAoB,CAAC,SAAS,iBAAiB,CAAC,kBAAkB,CAAC,YAAY,mBAAmB,CAAC,oBAAoB,CAAC,SAAS,gBAAgB,CAAC,iBAAiB,CAAC,YAAY,gBAAgB,CAAC,iBAAiB,CAAC,YAAY,kBAAkB,CAAC,qBAAqB,CAAC,SAAS,gBAAgB,CAAC,mBAAmB,CAAC,SAAS,eAAe,CAAC,kBAAkB,CAAC,SAAS,eAAe,CAAC,kBAAkB,CAAC,aAAa,sBAAsB,CAAC,UAAU,kBAAkB,CAAC,UAAU,mBAAmB,CAAC,WAAW,gBAAgB,CAAC,SAAS,mBAAmB,CAAC,SAAS,kBAAkB,CAAC,SAAS,kBAAkB,CAAC,SAAS,iBAAiB,CAAC,SAAS,kBAAkB,CAAC,SAAS,iBAAiB,CAAC,UAAU,iBAAiB,CAAC,UAAU,eAAe,CAAC,UAAU,eAAe,CAAC,SAAS,gBAAgB,CAAC,YAAY,kBAAkB,CAAC,SAAS,eAAe,CAAC,SAAS,kBAAkB,CAAC,SAAS,iBAAiB,CAAC,SAAS,eAAe,CAAC,UAAU,aAAa,CAAC,iBAAiB,oBAAoB,CAAC,WAAW,cAAc,CAAC,SAAS,YAAY,CAAC,WAAW,YAAY,CAAC,QAAQ,QAAQ,CAAC,QAAQ,WAAW,CAAC,QAAQ,cAAc,CAAC,QAAQ,cAAc,CAAC,eAAe,WAAW,CAAC,wCAAwC,kCAAkC,CAAC,wCAAwC,kCAAkC,CAAC,WAAW,WAAW,CAAC,aAAa,gBAAgB,CAAC,wFAAwF,kFAAkF,CAAC,6EAA6E,sEAAsE,CAAC,oBAAoB,gBAAgB,CAAC,iCAAiC,6BAA6B,CAAC,WAAW,aAAa,CAAC,QAAQ,UAAU,CAAC,QAAQ,aAAa,CAAC,SAAS,WAAW,CAAC,WAAW,UAAU,CAAC,UAAiC,iBAAiB,CAAC,aAAa,WAAW,CAAC,YAAY,WAAW,CAAC,mBAAmB,cAAc,CAAC,mBAAmB,cAAc,CAAC,eAAe,cAAc,CAAC,cAAc,eAAe,CAAC,mBAAmB,aAAa,CAAC,oBAAoB,eAAe,CAAC,8DAA8D,wCAAwC,CAAC,eAAe,cAAc,CAAC,aAAa,aAAa,CAAC,SAAS,WAAW,CAAC,kBAAkB,oBAAoB,CAAC,cAAc,iBAAiB,CAAC,wLAAwL,CAAC,kBAAkB,4LAA4L,CAAC,mBAAmB,GAAG,wBAAwB,CAAC,CAAC,iBAAiB,oCAAoC,CAAC,mBAAmB,cAAc,CAAC,gBAAgB,wBAAwB,CAAsB,qBAAe,CAAf,gBAAgB,CAAC,gBAAgB,kBAAkB,CAAC,gBAAgB,wBAAwB,CAAC,2BAA2B,CAAC,gBAAgB,yBAAyB,CAAC,4BAA4B,CAAC,iBAAiB,uBAAuB,CAAC,cAAc,oBAAoB,CAAC,cAAc,oBAAoB,CAAC,oBAAwC,uBAAc,CAAd,oBAAc,CAAd,eAAe,CAAC,aAAa,qBAAqB,CAAC,gBAAgB,sBAAsB,CAAC,iBAAiB,kBAAkB,CAAC,gBAAgB,wBAAwB,CAAC,mBAAmB,sBAAsB,CAAC,oBAAoB,6BAA6B,CAAC,UAAU,UAAU,CAAC,UAAU,SAAS,CAAC,kBAAkB,aAAa,CAAC,oBAAoB,eAAe,CAAC,oBAAoB,eAAe,CAAC,oBAAoB,eAAe,CAAC,sBAAsB,iBAAiB,CAAC,sBAAsB,iBAAiB,CAAC,uBAAuB,2BAA2B,CAAC,yBAAyB,6BAA6B,CAAC,aAAa,sBAAsB,CAAC,kBAAkB,CAAC,eAAe,CAAC,kBAAkB,sBAAsB,CAAC,sBAAsB,kBAAkB,CAAC,gBAAgB,wBAAwB,CAAC,YAAY,oBAAoB,CAAC,eAAe,mBAAmB,CAAC,eAAe,qBAAqB,CAAC,eAAe,qBAAqB,CAAC,eAAe,oBAAoB,CAAC,cAAc,6BAA6B,CAAC,8BAA8B,CAAC,WAAW,gBAAgB,CAAC,aAAa,uBAAuB,CAAC,eAAe,uBAAuB,CAAC,aAAa,oBAAoB,CAAC,qBAAqB,2BAA2B,CAAC,oBAAoB,4BAA4B,CAAC,oBAAoB,qBAAqB,CAAC,uDAAuD,CAAC,oBAAoB,qBAAqB,CAAC,uDAAuD,CAAC,oBAAoB,qBAAqB,CAAC,uDAAuD,CAAC,sBAAsB,qBAAqB,CAAC,uDAAuD,CAAC,uBAAuB,qBAAqB,CAAC,4EAA4E,CAAC,mBAAmB,qBAAqB,CAAC,uDAAuD,CAAC,uBAAuB,wBAAwB,CAAC,sBAAsB,qBAAqB,CAAC,uDAAuD,CAAC,gBAAgB,gCAAgC,CAAC,iBAAiB,+BAA+B,CAAC,uBAAuB,gCAAgC,CAAC,gBAAgB,iBAAiB,CAAC,uDAAuD,CAAC,gBAAgB,iBAAiB,CAAC,uDAAuD,CAAC,gBAAgB,iBAAiB,CAAC,uDAAuD,CAAC,mBAAmB,iBAAiB,CAAC,oDAAoD,CAAC,iBAAiB,iBAAiB,CAAC,uDAAuD,CAAC,kBAAkB,iBAAiB,CAAC,4EAA4E,CAAC,uBAAuB,0DAA0D,CAAC,eAAe,iBAAiB,CAAC,uDAAuD,CAAC,mBAAmB,4BAA4B,CAAC,aAAa,iBAAiB,CAAC,uDAAuD,CAAC,iBAAiB,iBAAiB,CAAC,uDAAuD,CAAC,QAAQ,SAAS,CAAC,WAAW,eAAe,CAAC,QAAQ,cAAc,CAAC,QAAQ,aAAa,CAAC,QAAQ,YAAY,CAAC,QAAQ,YAAY,CAAC,SAAS,mBAAmB,CAAC,oBAAoB,CAAC,YAAY,oBAAoB,CAAC,qBAAqB,CAAC,SAAS,kBAAkB,CAAC,mBAAmB,CAAC,YAAY,oBAAoB,CAAC,qBAAqB,CAAC,SAAS,mBAAmB,CAAC,oBAAoB,CAAC,SAAS,iBAAiB,CAAC,kBAAkB,CAAC,SAAS,mBAAmB,CAAC,oBAAoB,CAAC,kBAAkB,kBAAkB,CAAC,mBAAmB,CAAC,YAAY,mBAAmB,CAAC,sBAAsB,CAAC,SAAS,kBAAkB,CAAC,qBAAqB,CAAC,YAAY,mBAAmB,CAAC,sBAAsB,CAAC,UAAU,gBAAgB,CAAC,mBAAmB,CAAC,SAAS,iBAAiB,CAAC,oBAAoB,CAAC,YAAY,mBAAmB,CAAC,sBAAsB,CAAC,SAAS,gBAAgB,CAAC,mBAAmB,CAAC,SAAS,qBAAqB,CAAC,YAAY,sBAAsB,CAAC,SAAS,mBAAmB,CAAC,SAAS,mBAAmB,CAAC,yCAAyC,0CAA0C,CAAC,UAAU,kBAAkB,CAAC,uDAAuD,kDAAkD,CAAC,uDAAuD,kDAAkD,CAAC,SAAS,kBAAkB,CAAC,wDAAwD,uDAAuD,CAAC,wDAAwD,oDAAoD,CAAC,wDAAwD,oDAAoD,CAAC,UAAU,kBAAkB,CAAC,SAAS,gBAAgB,CAAC,SAAS,kBAAkB,CAAC,SAAS,gBAAgB,CAAC,cAAc,eAAe,CAAC,gBAAgB,iBAAiB,CAAC,cAAc,mGAAmG,CAAC,aAAa,gBAAgB,CAAC,aAAa,kBAAkB,CAAC,aAAa,iBAAiB,CAAC,oBAAoB,eAAe,CAAC,kBAAkB,cAAc,CAAC,cAAc,cAAc,CAAC,YAAY,kBAAkB,CAAC,YAAY,iBAAiB,CAAC,YAAY,iBAAiB,CAAC,YAAY,gBAAgB,CAAC,cAAc,eAAe,CAAC,mBAAmB,eAAe,CAAC,gBAAgB,eAAe,CAAC,gBAAgB,eAAe,CAAC,kBAAkB,eAAe,CAAC,cAAc,wBAAwB,CAAC,eAAe,yBAAyB,CAAC,WAAW,iBAAiB,CAAC,cAAc,mBAAmB,CAAC,cAAc,mBAAmB,CAAC,yBAAyB,mBAAmB,CAAC,kBAAkB,gBAAgB,CAAC,mBAAmB,sBAAsB,CAAC,kBAAkB,mBAAmB,CAAC,4CAA4C,CAAC,iBAAiB,kBAAkB,CAAC,kBAAkB,mBAAmB,CAAC,8CAA8C,CAAC,kBAAkB,mBAAmB,CAAC,8CAA8C,CAAC,kBAAkB,mBAAmB,CAAC,8CAA8C,CAAC,kBAAkB,mBAAmB,CAAC,2CAA2C,CAAC,kBAAkB,mBAAmB,CAAC,2CAA2C,CAAC,kBAAkB,mBAAmB,CAAC,2CAA2C,CAAC,kBAAkB,mBAAmB,CAAC,2CAA2C,CAAC,oBAAoB,mBAAmB,CAAC,4CAA4C,CAAC,qBAAqB,mBAAmB,CAAC,mEAAmE,CAAC,iBAAiB,mBAAmB,CAAC,4CAA4C,CAAC,kBAAkB,mBAAmB,CAAC,8CAA8C,CAAC,oBAAoB,mBAAmB,CAAC,4CAA4C,CAAC,cAAc,sCAA6B,CAA7B,8BAA8B,CAAC,yBAAyB,mCAAmC,CAAC,yBAAyB,2BAA2B,CAAC,4BAA4B,CAAC,cAAc,SAAS,CAAC,gBAAgB,SAAS,CAAC,eAAe,UAAU,CAAC,WAAW,oEAAoE,CAAC,4FAA4F,CAAC,8GAA8G,CAAC,kCAAkC,6BAA6B,CAAC,uDAAuD,CAAC,8GAA8G,CAAC,kCAAkC,8BAA8B,CAAC,uDAAuD,CAAC,8GAA8G,CAAC,oCAAoC,+BAA+B,CAAC,yDAAyD,CAAC,8GAA8G,CAAC,qFAAqF,oEAAoE,CAAC,0FAA0F,CAAC,8GAA8G,CAAC,cAAc,yEAAyE,CAAC,iGAAiG,CAAC,8GAA8G,CAAC,cAAc,uCAAuC,CAAC,sDAAsD,CAAC,8GAA8G,CAAC,cAAc,0EAA0E,CAAC,kGAAkG,CAAC,8GAA8G,CAAC,mBAAmB,uBAAuB,CAAC,wBAAwB,CAAC,kDAAkD,CAAC,sBAAsB,iGAAyF,CAAzF,yFAAyF,CAAzF,uHAAyF,CAAC,wBAAwB,CAAC,kDAAkD,CAAC,uBAAuB,2BAA2B,CAAC,wBAAwB,CAAC,kDAAkD,CAAC,yBAAyB,6BAA6B,CAAC,wBAAwB,CAAC,kDAAkD,CAAC,iBAAiB,uBAAuB,CAAC,iBAAiB,uBAAuB,CAAC,iBAAiB,uBAAuB,CAAC,gBAAgB,kDAAkD,CAAC,8CAA8C,uCAAuC,CAAC,iCAAiC,0BAA0B,CAAC,mBAAmB,oBAAoB,CAAkB,YAAY,CAAC,oCAAoC,6BAA6B,CAAC,4CAA4C,2BAA2B,CAAC,uCAAuC,wBAAwB,CAAC,6CAA6C,gCAAgC,CAAC,4BAA4B,qBAAqB,CAAC,MAAM,0BAA0B,CAAC,oCAAoC,CAAC,8BAA8B,CAAC,4BAA4B,CAAC,0BAA0B,CAAC,6BAA6B,CAAC,+BAA+B,CAAC,8BAA8B,CAAC,uCAAuC,CAAC,iCAAiC,CAAC,0BAA0B,CAAC,0BAA0B,CAAC,2BAA2B,CAAC,MAAM,0BAA0B,CAAC,8BAA8B,CAAC,4BAA4B,CAAC,6BAA6B,CAAC,6BAA6B,CAAC,+BAA+B,CAAC,8BAA8B,CAAC,uCAAuC,CAAC,8BAA8B,CAAC,0BAA0B,CAAC,mBAAmB,SAAS,CAAC,2BAA2B,CAAC,wBAAwB,CAAC,kDAAkD,CAAC,gDAAgD,kBAAkB,CAAC,gDAAgD,mBAAmB,CAAC,kFAAkF,SAAS,CAAC,kDAAkD,2CAAkC,CAAlC,mCAAmC,CAAC,yBAAyB,gBAAgB,CAAC,yBAAyB,CAAC,mBAAmB,CAAC,8CAA8C,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,iDAAiD,mBAAmB,CAAC,2CAA2C,CAAC,qCAAqC,mBAAmB,CAAC,8CAA8C,CAAC,6DAA6D,mBAAmB,CAAC,8CAA8C,CAAC,wBAAwB,oBAAoB,CAAC,iDAAiD,CAAC,2BAA2B,SAAS,CAAC,qEAAqE,CAAC,gCAAgC,gEAAgE,CAAC,6BAA6B,qDAAqD,CAAC,gCAAgC,SAAS,CAAC,2CAA2C,iBAAiB,CAAC,wLAAwL,CAAC,gDAAgD,yBAAyB,CAAC,4CAA4C,kBAAkB,CAAC,wLAAwL,CAAC,iDAAiD,0BAA0B,CAAC,kBAAkB,oBAAoB,CAAC,gDAAgD,CAAC,uBAAuB,CAAC,qCAAqC,aAAa,CAAC,cAAc,CAAC,2CAA2C,4BAA4B,CAAC,2CAA2C,kBAAkB,CAAC,iDAAiD,oCAAoC,CAAC,0DAA0D,CAAC,8GAA8G,CAAC,sCAAsC,CAAC,uDAAuD,sCAAsC,CAAC,oCAAoC,CAAC,yBAAyB,oCAAoC,qBAAqB,CAAC,CAAC,cAAc,oBAAoB,CAAC,uBAAuB,CAAC,iCAAiC,YAAY,CAAC,wCAAwC,uCAAuC,CAAC,cAAc,CAAC,2CAA2C,iBAAiB,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,2CAA2C,iBAAiB,CAAC,0CAA0C,iCAAwB,CAAxB,yBAAyB,CAAC,gDAAgD,sCAA6B,CAA7B,8BAA8B,CAAC,0CAA0C,gBAAgB,CAAC,6CAA6C,iBAAiB,CAAC,qEAAqE,iBAAiB,CAAC,oDAAoD,CAAC,yEAAyE,4BAA4B,CAAC,6DAA6D,iCAAwB,CAAxB,yBAAyB,CAAC,mEAAmE,yBAAyB,CAAC,YAAY,CAAC,mEAAmE,iCAAwB,CAAxB,yBAAyB,CAAC,KAAK,kCAAkC,CAAC,iCAAiC,CAAC,yDAAyD,CAAC,uCAAuC,CAAC,cAAc,CAAC,KAAK,sBAAsB,CAAC,iBAAiB,CAAC,uDAAuD,CAAC,UAAU,CAAC,6BAA6B,iBAAiB,CAAC,oDAAoD,CAAC,mBAAmB,CAAC,8CAA8C,CAAC,uDAAuD,kBAAkB,CAAC,6BAA6B,CAAC,gBAAgB,wGAAwG,CAAC,sGAAsG,CAAC,8FAA8F,CAAC,mBAAmB,CAAC,6EAA6E,CAAC,0BAA0B,CAAC,6DAA6D,CAAC,sBAAsB,wGAAwG,CAAC,sGAAsG,CAAC,8FAA8F,CAAC,mBAAmB,CAAC,6EAA6E,CAAC,0BAA0B,CAAC,6DAA6D,CAAC,qBAAqB,wGAAwG,CAAC,sGAAsG,CAAC,8FAA8F,CAAC,mBAAmB,CAAC,6EAA6E,CAAC,0BAA0B,CAAC,6DAA6D,CAAC,oBAAoB,wGAAwG,CAAC,sGAAsG,CAAC,8FAA8F,CAAC,mBAAmB,CAAC,6EAA6E,CAAC,0BAA0B,CAAC,6DAA6D,CAAC,8CAA8C,wGAAwG,CAAC,sGAAsG,CAAC,8FAA8F,CAAC,mBAAmB,CAAC,6EAA6E,CAAC,0BAA0B,CAAC,6DAA6D,CAAC,UAAU,oBAAoB,CAAC,yBAAyB,0BAA0B,UAAU,CAAC,2BAA2B,CAAC,iBAAiB,CAAC,uDAAuD,CAAC,6CAA6C,CAAC,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC,kDAAkD,iBAAiB,CAAC,oDAAoD,CAAC,0BAA0B,6BAA6B,CAAC,oBAAoB,CAAC,kCAA0B,CAA1B,0BAA0B,CAAC,oDAAoD,CAAC,uDAAuD,kBAAkB,CAAC,kDAAkD,UAAU,CAAC,yBAAyB,kDAAkD,KAAK,CAAC,CAAC,6EAA6E,gBAAgB,CAAC,4CAA4C,eAAe,CAAC,wBAAwB,sBAAsB,CAAC,YAAY,CAAC,oBAAoB,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC,6DAA6D,gHAAgH,wBAAwB,CAAC,CAAC,gDAAgD,YAAY,CAAC,+BAA+B,mBAAmB,CAAC,oUAAoU,CAAC,WAAW,CAAC,YAAY,CAAC,yBAAyB,2CAA2C,4GAA4G,CAAC,oGAAoG,CAAC,CAAC,iFAA+E,kBAAkB,6BAA6B,CAAC,sQAAsQ,CAAC,8PAA8P,CAAC,qCAAqC,CAAC,0CAA0C,kCAAkC,CAAC,2BAA2B,6BAA6B,CAAC,sQAAsQ,CAAC,8PAA8P,CAAC,sCAAsC,CAAC,mDAAmD,4CAA4C,CAAC,CAAC,8CAA8C,uBAAuB,CAAC,iDAAiD,uBAAuB,CAAC,kDAAkD,uBAAuB,CAAC,sDAAsD,uBAAuB,CAAC,oBAAoB,aAAa,CAAC,oBAAoB,CAAC,yCAAyC,mBAAmB,CAAC,+CAA+C,YAAY,CAAC,MAAM,2BAA2B,CAAC,kDAAkD,CAAC,gCAAgC,CAAC,sCAAsC,CAAC,kCAAkC,CAAC,2BAA2B,CAAC,yBAAyB,MAAM,2BAA2B,CAAC,8BAA8B,eAAe,CAAC,aAAa,CAAC,0BAA0B,kCAAkC,CAAC,MAAM,gDAAgD,CAAC,qDAAqD,CAAC,CAAC,kBAAkB,wBAAwB,CAAC,oCAAoC,CAAC,kCAAkC,CAAC,cAAc,oCAAoC,CAAC,6DAA6D,CAAC,KAAK,cAAc,CAAC,0BAA0B,qBAAqB,CAAC,mBAAmB,CAAC,YAAY,kBAAkB,CAAC,yBAAyB,sBAAsB,SAAS,CAAC,0BAA0B,iBAAiB,CAAC,MAAM,WAAW,CAAC,KAAK,CAAC,CAAC,wEAAwE,oBAAoB,CAAC,iCAAiC,wBAAwB,CAAC,wBAAwB,aAAa,CAAC,uBAAuB,aAAa,CAAC,+GAA+G,UAAU,CAAC,WAAW,2BAA2B,CAAC,yBAAyB,CAAC,6BAA6B,CAAC,8DAA8D,CAAC,sDAAsD,CAAC,uBAAuB,2DAA2D,CAAC,mDAAmD,CAAC,sBAAsB,6CAA6C,CAAC,0BAA0B,6BAA6B,CAAC,4BAA4B,aAAa,CAAC,aAAa,CAAC,kBAAkB,CAAC,yBAAyB,4BAA4B,aAAa,CAAC,UAAU,CAAC,CAAC,0CAA0C,6BAA6B,CAAC,UAAU,CAAC,eAAe,CAAC,YAAY,CAAC,oDAAoD,SAAS,CAAC,YAAY,CAAC,sDAAsD,eAAe,CAAC,eAAe,CAAC,iDAAiD,WAAW,CAAC,yBAAyB,CAAC,mEAAmE,wBAAwB,CAAC,MAAM,cAAc,CAAC,WAAW,cAAc,CAAC,eAAe,CAAC,iBAAiB,eAAe,CAAC,oDAAoD,cAAc,CAAC,yBAAyB,gBAAgB,CAAC,yBAAyB,MAAM,aAAa,CAAC,eAAe,wBAAwB,CAAC,CAAC,oFAAoF,wBAAwB,CAAC,oBAAoB,CAAC,oDAAoD,4BAA4B,CAAC,oDAAoD,4BAA4B,CAAC,+BAA+B,WAAW,CAAC,yBAAyB,0BAA0B,iBAAiB,CAAC,CAAC,gDAAgD,yBAAyB,CAAC,gDAAgD,cAAc,CAAC,WAAW,CAAC,4GAA4G,eAAe,CAAC,qDAAqD,aAAa,CAAC,6HAA6H,qCAAqC,CAAC,2HAA2H,oCAAoC,CAAC,oEAAoE,aAAa,CAAC,iBAAiB,CAAC,0EAA0E,UAAU,CAAC,iBAAiB,CAAC,4QAA4Q,8BAA8B,CAAC,4BAA4B,CAAC,yKAAyK,8BAA8B,CAAC,0CAA0C,qCAAqC,CAAC,yBAAyB,2EAA2E,kBAAkB,CAAC,eAAe,CAAC,qDAAqD,sBAAsB,CAAC,CAAC,gDAAgD,qBAAqB,CAAC,cAAc,CAAC,iDAAiD,cAAc,CAAC,uDAAuD,YAAY,CAAC,kDAAkD,cAAc,CAAC,gDAAgD,SAAS,CAAC,sBAAsB,CAAC,sDAAsD,SAAS,CAAC,UAAU,wBAAwB,CAAC,0GAA0G,cAAc,CAAC,eAAe,CAAC,eAAe,CAAC,gHAAgH,cAAc,CAAC,eAAe,CAAC,wDAAwD,cAAc,CAAC,KAAK,UAAU,CAAC,YAAY,CAAC,iBAAiB,CAAC,WAAW,aAAa,CAAC,UAAU,CAAC,iBAAiB,CAAC,WAAW,CAAC,aAAa,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,eAAe,YAAY,CAAC,mBAAmB,mBAAmB,CAAC,YAAY,CAAC,yBAAyB,WAAW,CAAC,eAAe,CAAC,mBAAmB,CAAC,2OAA2O,6CAA6C,CAAC,MAAM,iBAAiB,CAAC,mBAAmB,CAAC,cAAc,CAAC,eAAe,CAAC,gBAAgB,CAAC,yBAAyB,aAAa,CAAC,6BAA6B,CAAC,0CAA0C,CAAC,wBAAwB,aAAa,CAAC,kBAAkB,CAAC,6CAA6C,CAAC,0BAA0B,qCAAqC,CAAC,wBAAwB,CAAC,yBAAyB,oCAAoC,CAAC,aAAa,CAAC,wBAAwB,CAAC,gBAAgB,qBAAqB,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,YAAY,CAAC,YAAY,CAAC,sBAAsB,kBAAkB,CAAC,mCAAmC,uBAAuB,CAAC,qCAAqC,CAAC,qBAAqB,CAAC,kCAAkC,wCAAwC,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,qCAAqC,UAAU,CAAC,sCAAsC,UAAU,CAAC,cAAc,UAAU,CAAC,aAAa,CAAC,YAAY,CAAC,yBAAyB,cAAc,qBAAqB,CAAC,CAAC,gBAAgB,qBAAqB,CAAC,YAAY,CAAC,gBAAgB,CAAC,eAAe,CAAC,gBAAgB,CAAC,yBAAyB,gBAAgB,cAAc,CAAC,CAAC,gBAAgB,sBAAsB,CAAC,WAAW,CAAC,cAAc,CAAC,eAAe,CAAC,gBAAgB,CAAC,0DAA0D,gBAAgB,CAAC,8BAA8B,iBAAiB,CAAC,gBAAgB,cAAc,CAAC,wEAAwE,gBAAgB,CAAC,gBAAgB,gBAAgB,CAAC,iBAAiB,iBAAiB,CAAC,gCAAgC,iBAAiB,CAAC,0BAA0B,uBAAuB,CAAC,4CAA4C,mBAAmB,CAAC,8CAA8C,CAAC,4CAA4C,mBAAmB,CAAC,8CAA8C,CAAC,4BAA4B,yBAAyB,CAAC,iBAAiB,CAAC,gCAAgC,yBAAyB,CAAC,WAAW,CAAC,cAAc,CAAC,wBAAwB,yBAAyB,CAAC,mBAAmB,CAAC,gCAAgC,yBAAyB,CAAC,oBAAoB,CAAC,wBAAwB,yBAAyB,CAAC,SAAS,CAAC,+BAA+B,yBAAyB,CAAC,iBAAiB,CAAC,uDAAuD,CAAC,8BAA8B,yBAAyB,CAAC,WAAW,CAAC,wCAAwC,yBAAyB,CAAC,6BAA6B,CAAC,wBAAwB,CAAC,kDAAkD,CAAC,oCAAoC,eAAe,CAAC,yBAAyB,CAAC,sCAAsC,gBAAgB,CAAC,yBAAyB,CAAC,oCAAoC,eAAe,CAAC,yBAAyB,CAAC,4BAA4B,YAAY,CAAC,iCAAiC,qBAAqB,CAAC,uDAAuD,CAAC,6BAA6B,iBAAiB,CAAC,uDAAuD,CAAC,gCAAgC,mCAAmC,CAAC,4BAA4B,mBAAmB,CAAC,wCAAwC,CAAC,+BAA+B,mBAAmB,CAAC,2CAA2C,CAAC,+BAA+B,mBAAmB,CAAC,2CAA2C,CAAC,kCAAkC,mBAAmB,CAAC,mEAAmE,CAAC,6BAA6B,SAAS,CAAC,4BAA4B,UAAU,CAAC,4BAA4B,WAAW,CAAC,0BAA0B,iBAAiB,CAAC,uDAAuD,CAAC,mCAAmC,qCAAqC,CAAC,uCAAuC,mCAAmC,wBAAwB,CAAC,CAAC,+BAA+B,0BAA0B,gBAAgB,CAAC,4BAA4B,oBAAoB,CAAC,kCAAkC,yBAAyB,CAAC,mCAAmC,qBAAqB,CAAC,oDAAoD,CAAC,mCAAmC,qBAAqB,CAAC,oDAAoD,CAAC,sCAAsC,qBAAqB,CAAC,uDAAuD,CAAC,sCAAsC,qBAAqB,CAAC,4EAA4E,CAAC,sCAAsC,wBAAwB,CAAC,6BAA6B,eAAe,CAAC,sCAAsC,6BAA6B,CAAC,6EAA6E,CAAC,gCAAgC,kBAAkB,CAAC,iCAAiC,mBAAmB,CAAC,2CAA2C,CAAC,iCAAiC,mBAAmB,CAAC,2CAA2C,CAAC,iCAAiC,mBAAmB,CAAC,2CAA2C,CAAC,6BAA6B,sCAA6B,CAA7B,8BAA8B,CAAC,8CAA8C,0BAA0B,CAAC,oDAAoD,CAAC,8GAA8G,CAAC,+BAA+B,2BAA2B,CAAC,mCAAmC,CAAC,8GAA8G,CAAC,gDAAgD,qBAAqB,CAAC,oDAAoD,CAAC,CAAC,sDAAsD,iCAAiC,CAAC,sDAAsD,iCAAiC,CAAC,kDAAkD,qBAAqB,CAAC,oDAAoD,CAAC,kDAAkD,qBAAqB,CAAC,oDAAoD,CAAC,qDAAqD,qBAAqB,CAAC,oDAAoD,CAAC,wDAAwD,gCAAgC,CAAC,yDAAyD,sDAAsD,CAAC,qDAAqD,iCAAiC,CAAC,mDAAmD,iCAAiC,CAAC,mDAAmD,iCAAiC,CAAC,+CAA+C,+BAA+B,CAAC,kDAAkD,mCAAmC,CAAC,0CAA0C,iBAAiB,CAAC,oDAAoD,CAAC,8CAA8C,kCAAkC,CAAC,iDAAiD,qCAAqC,CAAC,iDAAiD,iBAAiB,CAAC,oDAAoD,CAAC,iDAAiD,iBAAiB,CAAC,oDAAoD,CAAC,oDAAoD,oCAAoC,CAAC,qDAAqD,0DAA0D,CAAC,qDAAqD,0DAA0D,CAAC,iDAAiD,mCAAmC,CAAC,+CAA+C,qCAAqC,CAAC,oDAAoD,kCAAkC,CAAC,qFAAqF,sDAAsD,CAAC,gDAAgD,mBAAmB,CAAC,8CAA8C,CAAC,gDAAgD,mBAAmB,CAAC,8CAA8C,CAAC,gDAAgD,mBAAmB,CAAC,8CAA8C,CAAC,gDAAgD,mBAAmB,CAAC,8CAA8C,CAAC,gDAAgD,mBAAmB,CAAC,8CAA8C,CAAC,+CAA+C,mBAAmB,CAAC,8CAA8C,CAAC,mDAAmD,mBAAmB,CAAC,8CAA8C,CAAC,mDAAmD,mBAAmB,CAAC,2CAA2C,CAAC,kDAAkD,mBAAmB,CAAC,8CAA8C,CAAC,+CAA+C,mBAAmB,CAAC,8CAA8C,CAAC,6CAA6C,mBAAmB,CAAC,8CAA8C,CAAC,kDAAkD,mBAAmB,CAAC,8CAA8C,CAAC,gEAAgE,6BAA6B,CAAC,uDAAuD,CAAC,8GAA8G,CAAC,uFAAuF,+CAA+C,CAAC,yDAAyD,CAAC,8GAA8G,CAAC,kEAAkE,+BAA+B,CAAC,yDAAyD,CAAC,8GAA8G,CAA0S,0EAA0E,mBAAmB,CAAC,8CAA8C,CAAC,gEAAgE,yBAAyB,CAAC,iBAAiB,CAAC,oDAAoD,CAAC,wDAAwD,yBAAyB,CAAC,wBAAwB,CAAC,wKAAwK,CAAC,kEAAkE,qBAAqB,CAAC,oDAAoD,CAAC,8DAA8D,sCAAsC,CAAC,8DAA8D,iBAAiB,CAAC,oDAAoD,CAAC,iEAAiE,2DAA2D,CAAC,6DAA6D,mBAAmB,CAAC,8CAA8C,CAAC,6DAA6D,mBAAmB,CAAC,8CAA8C,CAAC,6DAA6D,mBAAmB,CAAC,8CAA8C,CAAC,4DAA4D,mBAAmB,CAAC,8CAA8C,CAAC,0DAA0D,mBAAmB,CAAC,8CAA8C,CAAC,uDAAuD,iBAAiB,CAAC,oDAAoD,CAAC,+BAA+B,gEAAgE,yBAAyB,CAAC,gEAAgE,qBAAqB,CAAC,uDAAuD,CAAC,oEAAoE,qBAAqB,CAAC,uDAAuD,CAAC,oEAAoE,qBAAqB,CAAC,4EAA4E,CAAC,oEAAoE,qBAAqB,CAAC,uDAAuD,CAAC,8DAA8D,kBAAkB,CAAC,+DAA+D,mBAAmB,CAAC,8CAA8C,CAAC,+DAA+D,mBAAmB,CAAC,8CAA8C,CAAC,8DAA8D,mBAAmB,CAAC,8CAA8C,CAAC,4EAA4E,0BAA0B,CAAC,oDAAoD,CAAC,8GAA8G,CAAC,6DAA6D,2BAA2B,CAAC,mCAAmC,CAAC,8GAA8G,CAAC,6DAA6D,2BAA2B,CAAC,mCAAmC,CAAC,8GAA8G,CAAC,6EAA6E,qBAAqB,CAAC,uDAAuD,CAAC,CAAC,yBAAyB,aAAa,YAAY,CAAC,CAAC,yBAAyB,eAAe,uBAAc,CAAd,eAAe,CAAC,eAAe,QAAQ,CAAC,cAAc,iBAAiB,CAAC,kBAAkB,CAAC,qBAAqB,oBAAoB,CAAC,eAAe,cAAc,CAAC,aAAa,YAAY,CAAC,oBAAoB,mBAAmB,CAAC,eAAe,YAAY,CAAC,mEAAmE,0DAA0D,CAAC,iFAAiF,sEAAsE,CAAC,aAAa,WAAW,CAAC,iBAAiB,aAAa,CAAC,uBAAuB,cAAc,CAAC,sBAAsB,0BAA0B,CAAC,mBAAmB,qBAAqB,CAAC,sBAAsB,aAAa,CAAC,aAAa,iBAAiB,CAAC,kBAAkB,CAAC,cAAc,gBAAgB,CAAC,gBAAgB,kBAAkB,CAAC,gBAAgB,iBAAiB,CAAC,CAAC,0BAA0B,cAAc,aAAa,CAAC,CAAC,0BAA0B,mBAAmB,iBAAiB,CAAC,kBAAkB,CAAC,CAAC,8CAA8C,OAAO,CAAC,iDAAiD,aAAa,CAAC,8CAA8C,YAAY,CAAC,4CAA4C,kBAAkB,CAAC,2CAA2C,kBAAkB,CAAC,4CAA4C,gBAAgB,CAAC,4CAA4C,gBAAgB,CAAC,2CAA2C,kBAAkB,CAAC,2CAA2C,gBAAgB,CAAC,2CAA2C,kBAAkB,CAAC,2CAA2C,gBAAgB,CAAC,8CAA8C,gBAAgB,CAAC,8CAA8C,iBAAiB,CAAC,iDAAiD,kBAAkB,CAAC,wLAAwL,CAAC,gDAAgD,iBAAiB,CAAC,wLAAwL,CAAC,iDAAiD,qBAAqB,CAAC,2CAA2C,mBAAmB,CAAC,2CAA2C,iBAAiB,CAAC,2CAA2C,mBAAmB,CAAC,2CAA2C,eAAe,CAAC,2CAA2C,mBAAmB,CAAC,2CAA2C,kBAAkB,CAAC,2CAA2C,qBAAqB,CAAC,iDAAiD,gBAAgB,CAAC,4DAA4D,yBAAyB,CAAC,MAAM,CAAC,yBAAyB,oDAAoD,SAAS,CAAC,CAAC,0BAA0B,0EAA0E,oCAAoC,CAAC,mEAAmE,6BAA6B,CAAC,CAAC,6CAA6C,MAAM,CAAC,gDAAgD,YAAY,CAAC,6CAA6C,WAAW,CAAC,4CAA4C,iBAAiB,CAAC,8CAA8C,gBAAgB,CAAC,2CAA2C,mBAAmB,CAAC,4CAA4C,iBAAiB,CAAC,4CAA4C,iBAAiB,CAAC,2CAA2C,mBAAmB,CAAC,2CAA2C,iBAAiB,CAAC,2CAA2C,mBAAmB,CAAC,2CAA2C,iBAAiB,CAAC,8CAA8C,iBAAiB,CAAC,kDAAkD,mBAAmB,CAAC,wLAAwL,CAAC,iDAAiD,kBAAkB,CAAC,wLAAwL,CAAC,yDAAyD,mBAAmB,CAAC,wLAAwL,CAAC,iDAAiD,sBAAsB,CAAC,2CAA2C,cAAc,CAAC,2CAA2C,kBAAkB,CAAC,2CAA2C,iBAAiB,CAAC,2CAA2C,oBAAoB,CAAC,2CAA2C,oBAAoB,CAAC,2CAA2C,kBAAkB,CAAC,2CAA2C,oBAAoB,CAAC,gDAAgD,eAAe,CAAC,6DAA6D,yBAAyB,CAAC,OAAO,CAAC,gEAAgE,yBAAyB,CAAC,kBAAkB,CAAC,wLAAwL,CAAC,yBAAyB,qDAAqD,UAAU,CAAC,CAAC,0BAA0B,mEAAmE,4BAA4B,CAAC,0EAA0E,qCAAqC,CAAC,CAAC,wEAAwE,yBAAyB,CAAC,iBAAiB,CAAC,wLAAwL,CAAC,wEAAwE,YAAY\",\"sourcesContent\":[\"*,:before,:after{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::-ms-backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 transparent;--tw-ring-shadow:0 0 transparent;--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: ;--tw-contain-size: ;--tw-contain-layout: ;--tw-contain-paint: ;--tw-contain-style: }*,:before,:after{box-sizing:border-box;border:0 solid #e5e7eb}:before,:after{--tw-content:\\\"\\\"}html{-webkit-text-size-adjust:100%;tab-size:4;font-feature-settings:normal;font-variation-settings:normal;-webkit-tap-highlight-color:transparent;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Noto Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;line-height:1.5}:host{-webkit-text-size-adjust:100%;tab-size:4;font-feature-settings:normal;font-variation-settings:normal;-webkit-tap-highlight-color:transparent;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Noto Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;line-height:1.5}body{line-height:inherit;margin:0}hr{color:inherit;border-top-width:1px;height:0}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-feature-settings:normal;font-variation-settings:normal;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em}small{font-size:80%}sub,sup{vertical-align:baseline;font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-feature-settings:inherit;font-variation-settings:inherit;font-family:inherit;font-size:100%;font-weight:inherit;line-height:inherit;letter-spacing:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}button{-webkit-appearance:button;background-color:transparent;background-image:none}input:where([type=button]){-webkit-appearance:button;background-color:transparent;background-image:none}input:where([type=reset]){-webkit-appearance:button;background-color:transparent;background-image:none}input:where([type=submit]){-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button{height:auto}::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dl,dd,h1,h2,h3,h4,h5,h6,hr,figure,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}ol,ul,menu{margin:0;padding:0;list-style:none}dialog{padding:0}textarea{resize:vertical}input::-moz-placeholder{opacity:1;color:#9ca3af}textarea::-moz-placeholder{opacity:1;color:#9ca3af}input::-ms-input-placeholder{opacity:1;color:#9ca3af}input::placeholder{opacity:1;color:#9ca3af}textarea::-ms-input-placeholder{opacity:1;color:#9ca3af}textarea::placeholder{opacity:1;color:#9ca3af}button,[role=button]{cursor:pointer}:disabled{cursor:default}img,svg,video,canvas,audio,iframe,embed,object{vertical-align:middle;display:block}img,video{max-width:100%;height:auto}[hidden]{display:none}.nx-sr-only{clip:rect(0,0,0,0);white-space:nowrap;border-width:0;width:1px;height:1px;margin:-1px;padding:0;position:absolute;overflow:hidden}.nx-pointer-events-none{pointer-events:none}.nx-fixed{position:fixed}.nx-absolute{position:absolute}.nx-relative{position:relative}.nx-sticky{position:sticky}.nx-inset-0{top:0;bottom:0;left:0;right:0}.nx-inset-x-0{left:0;right:0}.nx-inset-y-0{top:0;bottom:0}.nx-bottom-0{bottom:0}.nx-right-0{right:0}.nx-top-0{top:0}.nx-top-\\\\[8em\\\\]{top:8em}.nx-top-full{top:100%}.nx-z-10{z-index:10}.nx-z-20{z-index:20}.nx-z-\\\\[-1\\\\]{z-index:-1}.nx-z-\\\\[1\\\\]{z-index:1}.nx-order-last{order:9999}.-nx-m-2{margin:-.5rem}.-nx-mx-6{margin-left:-1.5rem;margin-right:-1.5rem}.nx-mx-2{margin-left:.5rem;margin-right:.5rem}.nx-mx-2\\\\.5{margin-left:.625rem;margin-right:.625rem}.nx-mx-4{margin-left:1rem;margin-right:1rem}.nx-mx-auto{margin-left:auto;margin-right:auto}.nx-my-1\\\\.5{margin-top:.375rem;margin-bottom:.375rem}.nx-my-2{margin-top:.5rem;margin-bottom:.5rem}.nx-my-4{margin-top:1rem;margin-bottom:1rem}.nx-my-8{margin-top:2rem;margin-bottom:2rem}.-nx-mb-0\\\\.5{margin-bottom:-.125rem}.-nx-ml-2{margin-left:-.5rem}.-nx-mr-2{margin-right:-.5rem}.-nx-mt-20{margin-top:-5rem}.nx-mb-2{margin-bottom:.5rem}.nx-mb-4{margin-bottom:1rem}.nx-mb-8{margin-bottom:2rem}.nx-ml-2{margin-left:.5rem}.nx-mr-2{margin-right:.5rem}.nx-mt-1{margin-top:.25rem}.nx-mt-10{margin-top:2.5rem}.nx-mt-12{margin-top:3rem}.nx-mt-16{margin-top:4rem}.nx-mt-2{margin-top:.5rem}.nx-mt-2\\\\.5{margin-top:.625rem}.nx-mt-4{margin-top:1rem}.nx-mt-5{margin-top:1.25rem}.nx-mt-6{margin-top:1.5rem}.nx-mt-8{margin-top:2rem}.nx-block{display:block}.nx-inline-block{display:inline-block}.nx-inline{display:inline}.nx-flex{display:flex}.nx-hidden{display:none}.nx-h-0{height:0}.nx-h-4{height:1rem}.nx-h-5{height:1.25rem}.nx-h-7{height:1.75rem}.nx-h-\\\\[18px\\\\]{height:18px}.nx-h-\\\\[var\\\\(--nextra-banner-height\\\\)\\\\]{height:var(--nextra-banner-height)}.nx-h-\\\\[var\\\\(--nextra-navbar-height\\\\)\\\\]{height:var(--nextra-navbar-height)}.nx-h-full{height:100%}.nx-max-h-64{max-height:16rem}.nx-max-h-\\\\[calc\\\\(100vh-var\\\\(--nextra-navbar-height\\\\)-env\\\\(safe-area-inset-bottom\\\\)\\\\)\\\\]{max-height:calc(100vh - var(--nextra-navbar-height) - env(safe-area-inset-bottom))}.nx-max-h-\\\\[min\\\\(calc\\\\(50vh-11rem-env\\\\(safe-area-inset-bottom\\\\)\\\\)\\\\,400px\\\\)\\\\]{max-height:min(calc(50vh - 11rem - env(safe-area-inset-bottom)),400px)}.nx-min-h-\\\\[100px\\\\]{min-height:100px}.nx-min-h-\\\\[calc\\\\(100vh-4rem\\\\)\\\\]{min-height:calc(100vh - 4rem)}.nx-w-3\\\\.5{width:.875rem}.nx-w-4{width:1rem}.nx-w-5{width:1.25rem}.nx-w-64{width:16rem}.nx-w-full{width:100%}.nx-w-max{width:-moz-max-content;width:max-content}.nx-w-screen{width:100vw}.nx-min-w-0{min-width:0}.nx-min-w-\\\\[18px\\\\]{min-width:18px}.nx-min-w-\\\\[24px\\\\]{min-width:24px}.nx-min-w-full{min-width:100%}.nx-max-w-4xl{max-width:56rem}.nx-max-w-\\\\[50\\\\%\\\\]{max-width:50%}.nx-max-w-\\\\[90rem\\\\]{max-width:90rem}.nx-max-w-\\\\[min\\\\(calc\\\\(100vw-2rem\\\\)\\\\,calc\\\\(100\\\\%\\\\+20rem\\\\)\\\\)\\\\]{max-width:min(100vw - 2rem,100% + 20rem)}.nx-max-w-full{max-width:100%}.nx-shrink-0{flex-shrink:0}.nx-grow{flex-grow:1}.nx-origin-center{transform-origin:50%}.nx-rotate-90{--tw-rotate:90deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.nx-transform-gpu{transform:translate3d(var(--tw-translate-x),var(--tw-translate-y),0)rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}@keyframes nx-spin{to{transform:rotate(360deg)}}.nx-animate-spin{animation:1s linear infinite nx-spin}.nx-cursor-pointer{cursor:pointer}.nx-select-none{-webkit-user-select:none;-ms-user-select:none;user-select:none}.nx-scroll-m-12{scroll-margin:3rem}.nx-scroll-my-6{scroll-margin-top:1.5rem;scroll-margin-bottom:1.5rem}.nx-scroll-py-6{scroll-padding-top:1.5rem;scroll-padding-bottom:1.5rem}.nx-list-decimal{list-style-type:decimal}.nx-list-disc{list-style-type:disc}.nx-list-none{list-style-type:none}.nx-appearance-none{-ms-appearance:none;appearance:none}.nx-flex-col{flex-direction:column}.nx-items-start{align-items:flex-start}.nx-items-center{align-items:center}.nx-justify-end{justify-content:flex-end}.nx-justify-center{justify-content:center}.nx-justify-between{justify-content:space-between}.nx-gap-1{gap:.25rem}.nx-gap-2{gap:.5rem}.nx-overflow-auto{overflow:auto}.nx-overflow-hidden{overflow:hidden}.nx-overflow-x-auto{overflow-x:auto}.nx-overflow-y-auto{overflow-y:auto}.nx-overflow-x-hidden{overflow-x:hidden}.nx-overflow-y-hidden{overflow-y:hidden}.nx-overscroll-contain{overscroll-behavior:contain}.nx-overscroll-x-contain{overscroll-behavior-x:contain}.nx-truncate{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.nx-text-ellipsis{text-overflow:ellipsis}.nx-whitespace-nowrap{white-space:nowrap}.nx-break-words{overflow-wrap:break-word}.nx-rounded{border-radius:.25rem}.nx-rounded-lg{border-radius:.5rem}.nx-rounded-md{border-radius:.375rem}.nx-rounded-sm{border-radius:.125rem}.nx-rounded-xl{border-radius:.75rem}.nx-rounded-t{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.nx-border{border-width:1px}.nx-border-b{border-bottom-width:1px}.nx-border-b-2{border-bottom-width:2px}.nx-border-t{border-top-width:1px}.nx-border-black\\\\/10{border-color:rgba(0,0,0,.1)}.nx-border-black\\\\/5{border-color:rgba(0,0,0,.05)}.nx-border-blue-200{--tw-border-opacity:1;border-color:rgba(191,219,254,var(--tw-border-opacity))}.nx-border-gray-200{--tw-border-opacity:1;border-color:rgba(229,231,235,var(--tw-border-opacity))}.nx-border-gray-300{--tw-border-opacity:1;border-color:rgba(209,213,219,var(--tw-border-opacity))}.nx-border-orange-100{--tw-border-opacity:1;border-color:rgba(255,237,213,var(--tw-border-opacity))}.nx-border-primary-500{--tw-border-opacity:1;border-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-border-opacity))}.nx-border-red-200{--tw-border-opacity:1;border-color:rgba(254,202,202,var(--tw-border-opacity))}.nx-border-transparent{border-color:transparent}.nx-border-yellow-100{--tw-border-opacity:1;border-color:rgba(254,249,195,var(--tw-border-opacity))}.nx-bg-black\\\\/5{background-color:rgba(0,0,0,.05)}.nx-bg-black\\\\/80{background-color:rgba(0,0,0,.8)}.nx-bg-black\\\\/\\\\[\\\\.03\\\\]{background-color:rgba(0,0,0,.03)}.nx-bg-blue-100{--tw-bg-opacity:1;background-color:rgba(219,234,254,var(--tw-bg-opacity))}.nx-bg-gray-100{--tw-bg-opacity:1;background-color:rgba(243,244,246,var(--tw-bg-opacity))}.nx-bg-gray-200{--tw-bg-opacity:1;background-color:rgba(229,231,235,var(--tw-bg-opacity))}.nx-bg-neutral-900{--tw-bg-opacity:1;background-color:rgba(23,23,23,var(--tw-bg-opacity))}.nx-bg-orange-50{--tw-bg-opacity:1;background-color:rgba(255,247,237,var(--tw-bg-opacity))}.nx-bg-primary-50{--tw-bg-opacity:1;background-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-bg-opacity))}.nx-bg-primary-500\\\\/10{background-color:hsl(var(--nextra-primary-hue)100% 75%/.1)}.nx-bg-red-100{--tw-bg-opacity:1;background-color:rgba(254,226,226,var(--tw-bg-opacity))}.nx-bg-transparent{background-color:transparent}.nx-bg-white{--tw-bg-opacity:1;background-color:rgba(255,255,255,var(--tw-bg-opacity))}.nx-bg-yellow-50{--tw-bg-opacity:1;background-color:rgba(254,252,232,var(--tw-bg-opacity))}.nx-p-0{padding:0}.nx-p-0\\\\.5{padding:.125rem}.nx-p-1{padding:.25rem}.nx-p-2{padding:.5rem}.nx-p-4{padding:1rem}.nx-p-8{padding:2rem}.nx-px-1{padding-left:.25rem;padding-right:.25rem}.nx-px-1\\\\.5{padding-left:.375rem;padding-right:.375rem}.nx-px-2{padding-left:.5rem;padding-right:.5rem}.nx-px-2\\\\.5{padding-left:.625rem;padding-right:.625rem}.nx-px-3{padding-left:.75rem;padding-right:.75rem}.nx-px-4{padding-left:1rem;padding-right:1rem}.nx-px-6{padding-left:1.5rem;padding-right:1.5rem}.nx-px-\\\\[\\\\.25em\\\\]{padding-left:.25em;padding-right:.25em}.nx-py-0\\\\.5{padding-top:.125rem;padding-bottom:.125rem}.nx-py-1{padding-top:.25rem;padding-bottom:.25rem}.nx-py-1\\\\.5{padding-top:.375rem;padding-bottom:.375rem}.nx-py-12{padding-top:3rem;padding-bottom:3rem}.nx-py-2{padding-top:.5rem;padding-bottom:.5rem}.nx-py-2\\\\.5{padding-top:.625rem;padding-bottom:.625rem}.nx-py-4{padding-top:1rem;padding-bottom:1rem}.nx-pb-1{padding-bottom:.25rem}.nx-pb-1\\\\.5{padding-bottom:.375rem}.nx-pb-4{padding-bottom:1rem}.nx-pb-8{padding-bottom:2rem}.nx-pb-\\\\[env\\\\(safe-area-inset-bottom\\\\)\\\\]{padding-bottom:env(safe-area-inset-bottom)}.nx-pb-px{padding-bottom:1px}.nx-pl-\\\\[max\\\\(env\\\\(safe-area-inset-left\\\\)\\\\,1\\\\.5rem\\\\)\\\\]{padding-left:max(env(safe-area-inset-left),1.5rem)}.nx-pl-\\\\[max\\\\(env\\\\(safe-area-inset-left\\\\)\\\\,2\\\\.5rem\\\\)\\\\]{padding-left:max(env(safe-area-inset-left),2.5rem)}.nx-pr-4{padding-right:1rem}.nx-pr-\\\\[calc\\\\(env\\\\(safe-area-inset-right\\\\)-1\\\\.5rem\\\\)\\\\]{padding-right:calc(env(safe-area-inset-right) - 1.5rem)}.nx-pr-\\\\[max\\\\(env\\\\(safe-area-inset-right\\\\)\\\\,1\\\\.5rem\\\\)\\\\]{padding-right:max(env(safe-area-inset-right),1.5rem)}.nx-pr-\\\\[max\\\\(env\\\\(safe-area-inset-right\\\\)\\\\,2\\\\.5rem\\\\)\\\\]{padding-right:max(env(safe-area-inset-right),2.5rem)}.nx-pt-10{padding-top:2.5rem}.nx-pt-4{padding-top:1rem}.nx-pt-6{padding-top:1.5rem}.nx-pt-8{padding-top:2rem}.nx-text-left{text-align:left}.nx-text-center{text-align:center}.nx-font-mono{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace}.nx-text-2xl{font-size:1.5rem}.nx-text-3xl{font-size:1.875rem}.nx-text-4xl{font-size:2.25rem}.nx-text-\\\\[\\\\.85em\\\\]{font-size:.85em}.nx-text-\\\\[10px\\\\]{font-size:10px}.nx-text-base{font-size:1rem}.nx-text-lg{font-size:1.125rem}.nx-text-sm{font-size:.875rem}.nx-text-xl{font-size:1.25rem}.nx-text-xs{font-size:.75rem}.nx-font-bold{font-weight:700}.nx-font-extrabold{font-weight:800}.nx-font-medium{font-weight:500}.nx-font-normal{font-weight:400}.nx-font-semibold{font-weight:600}.nx-uppercase{text-transform:uppercase}.nx-capitalize{text-transform:capitalize}.nx-italic{font-style:italic}.nx-leading-5{line-height:1.25rem}.nx-leading-7{line-height:1.75rem}.nx-leading-\\\\[1\\\\.35rem\\\\]{line-height:1.35rem}.nx-leading-tight{line-height:1.25}.nx-tracking-tight{letter-spacing:-.015em}.nx-text-blue-900{--tw-text-opacity:1;color:rgba(30,58,138,var(--tw-text-opacity))}.nx-text-current{color:currentColor}.nx-text-gray-100{--tw-text-opacity:1;color:rgba(243,244,246,var(--tw-text-opacity))}.nx-text-gray-400{--tw-text-opacity:1;color:rgba(156,163,175,var(--tw-text-opacity))}.nx-text-gray-500{--tw-text-opacity:1;color:rgba(107,114,128,var(--tw-text-opacity))}.nx-text-gray-600{--tw-text-opacity:1;color:rgba(75,85,99,var(--tw-text-opacity))}.nx-text-gray-700{--tw-text-opacity:1;color:rgba(55,65,81,var(--tw-text-opacity))}.nx-text-gray-800{--tw-text-opacity:1;color:rgba(31,41,55,var(--tw-text-opacity))}.nx-text-gray-900{--tw-text-opacity:1;color:rgba(17,24,39,var(--tw-text-opacity))}.nx-text-orange-800{--tw-text-opacity:1;color:rgba(154,52,18,var(--tw-text-opacity))}.nx-text-primary-500{--tw-text-opacity:1;color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-text-opacity))}.nx-text-red-900{--tw-text-opacity:1;color:rgba(127,29,29,var(--tw-text-opacity))}.nx-text-slate-50{--tw-text-opacity:1;color:rgba(248,250,252,var(--tw-text-opacity))}.nx-text-yellow-900{--tw-text-opacity:1;color:rgba(113,63,18,var(--tw-text-opacity))}.nx-underline{text-decoration-line:underline}.nx-decoration-from-font{text-decoration-thickness:from-font}.nx-subpixel-antialiased{-webkit-font-smoothing:auto;-moz-osx-font-smoothing:auto}.nx-opacity-0{opacity:0}.nx-opacity-100{opacity:1}.nx-opacity-80{opacity:.8}.nx-shadow{--tw-shadow:0 1px 3px 0 rgba(0,0,0,.1),0 1px 2px -1px rgba(0,0,0,.1);--tw-shadow-colored:0 1px 3px 0 var(--tw-shadow-color),0 1px 2px -1px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-shadow-\\\\[0_-12px_16px_\\\\#fff\\\\]{--tw-shadow:0 -12px 16px #fff;--tw-shadow-colored:0 -12px 16px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-shadow-\\\\[0_-12px_16px_white\\\\]{--tw-shadow:0 -12px 16px white;--tw-shadow-colored:0 -12px 16px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-shadow-\\\\[0_2px_14px_6px_\\\\#fff\\\\]{--tw-shadow:0 2px 14px 6px #fff;--tw-shadow-colored:0 2px 14px 6px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-shadow-\\\\[0_2px_4px_rgba\\\\(0\\\\,0\\\\,0\\\\,\\\\.02\\\\)\\\\,0_-1px_0_rgba\\\\(0\\\\,0\\\\,0\\\\,\\\\.06\\\\)_inset\\\\]{--tw-shadow:0 2px 4px rgba(0,0,0,.02),0 -1px 0 rgba(0,0,0,.06) inset;--tw-shadow-colored:0 2px 4px var(--tw-shadow-color),inset 0 -1px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-shadow-lg{--tw-shadow:0 10px 15px -3px rgba(0,0,0,.1),0 4px 6px -4px rgba(0,0,0,.1);--tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color),0 4px 6px -4px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-shadow-sm{--tw-shadow:0 1px 2px 0 rgba(0,0,0,.05);--tw-shadow-colored:0 1px 2px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-shadow-xl{--tw-shadow:0 20px 25px -5px rgba(0,0,0,.1),0 8px 10px -6px rgba(0,0,0,.1);--tw-shadow-colored:0 20px 25px -5px var(--tw-shadow-color),0 8px 10px -6px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.nx-transition-all{transition-property:all;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1)}.nx-transition-colors{transition-property:color,background-color,border-color,text-decoration-color,fill,stroke;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1)}.nx-transition-opacity{transition-property:opacity;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1)}.nx-transition-transform{transition-property:transform;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1)}.nx-duration-100{transition-duration:.1s}.nx-duration-300{transition-duration:.3s}.nx-duration-500{transition-duration:.5s}.nx-ease-in-out{transition-timing-function:cubic-bezier(.4,0,.2,1)}.\\\\[-webkit-tap-highlight-color\\\\:transparent\\\\]{-webkit-tap-highlight-color:transparent}.\\\\[-webkit-touch-callout\\\\:none\\\\]{-webkit-touch-callout:none}.\\\\[hyphens\\\\:auto\\\\]{-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto}.\\\\[text-underline-position\\\\:under\\\\]{text-underline-position:under}.\\\\[transform\\\\:translate3d\\\\(0\\\\,-100\\\\%\\\\,0\\\\)\\\\]{transform:translateY(-100%)}.\\\\[transform\\\\:translate3d\\\\(0\\\\,0\\\\,0\\\\)\\\\]{transform:translate(0,0)}.\\\\[transition\\\\:background-color_1\\\\.5s_ease\\\\]{transition:background-color 1.5s}.\\\\[word-break\\\\:break-word\\\\]{word-break:break-word}:root{--shiki-color-text:#414141;--shiki-color-background:transparent;--shiki-token-constant:#1976d2;--shiki-token-string:#22863a;--shiki-token-comment:#aaa;--shiki-token-keyword:#d32f2f;--shiki-token-parameter:#ff9800;--shiki-token-function:#6f42c1;--shiki-token-string-expression:#22863a;--shiki-token-punctuation:#212121;--shiki-token-link:#22863a;--nextra-shiki-deleted:red;--nextra-shiki-inserted:red}.dark{--shiki-color-text:#d1d1d1;--shiki-token-constant:#79b8ff;--shiki-token-string:#ffab70;--shiki-token-comment:#6b737c;--shiki-token-keyword:#f97583;--shiki-token-parameter:#ff9800;--shiki-token-function:#b392f0;--shiki-token-string-expression:#4bb74a;--shiki-token-punctuation:#bbb;--shiki-token-link:#ffab70}.subheading-anchor{opacity:0;transition-property:opacity;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1)}.subheading-anchor:where([dir=ltr],[dir=ltr] *){margin-left:.25rem}.subheading-anchor:where([dir=rtl],[dir=rtl] *){margin-right:.25rem}span:target+.subheading-anchor,:hover>.subheading-anchor,.subheading-anchor:focus{opacity:1}span+.subheading-anchor,:hover>.subheading-anchor{text-decoration-line:none!important}.subheading-anchor:after{--tw-content:\\\"#\\\";content:var(--tw-content);--tw-text-opacity:1;color:rgba(209,213,219,var(--tw-text-opacity));padding-left:.25rem;padding-right:.25rem}.subheading-anchor:is(html[class~=dark] *):after{--tw-text-opacity:1;color:rgba(64,64,64,var(--tw-text-opacity))}span:target+.subheading-anchor:after{--tw-text-opacity:1;color:rgba(156,163,175,var(--tw-text-opacity))}span:target+.subheading-anchor:is(html[class~=dark] *):after{--tw-text-opacity:1;color:rgba(115,115,115,var(--tw-text-opacity))}.nextra-hamburger svg g{transform-origin:50%;transition:transform .2s cubic-bezier(.25,1,.5,1)}.nextra-hamburger svg path{opacity:1;transition:transform .2s cubic-bezier(.25,1,.5,1) .2s,opacity .2s .2s}.nextra-hamburger svg.open path{transition:transform .2s cubic-bezier(.25,1,.5,1),opacity 0s .2s}.nextra-hamburger svg.open g{transition:transform .2s cubic-bezier(.25,1,.5,1) .2s}.nextra-hamburger svg.open>path{opacity:0}.nextra-hamburger svg.open>g:first-of-type{--tw-rotate:45deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.nextra-hamburger svg.open>g:first-of-type path{transform:translateY(6px)}.nextra-hamburger svg.open>g:nth-of-type(2){--tw-rotate:-45deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.nextra-hamburger svg.open>g:nth-of-type(2) path{transform:translateY(-6px)}.nextra-scrollbar{scrollbar-width:thin;scrollbar-color:rgba(115,115,115,.4) transparent;scrollbar-gutter:stable}.nextra-scrollbar::-webkit-scrollbar{width:.375rem;height:.375rem}.nextra-scrollbar::-webkit-scrollbar-track{background-color:transparent}.nextra-scrollbar::-webkit-scrollbar-thumb{border-radius:20px}.nextra-scrollbar:hover::-webkit-scrollbar-thumb{--tw-shadow:var(--tw-shadow-colored);--tw-shadow-colored:inset 0 0 0 5px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow);--tw-shadow-color:rgba(115,115,115,.2)}.nextra-scrollbar:hover::-webkit-scrollbar-thumb:hover{--tw-shadow-color:rgba(115,115,115,.4);--tw-shadow:var(--tw-shadow-colored)}@media (max-width:767px){.nextra-container .nextra-scrollbar{scrollbar-gutter:auto}}.no-scrollbar{scrollbar-width:none;-ms-overflow-style:none}.no-scrollbar::-webkit-scrollbar{display:none}article.nextra-body-typesetting-article{font-feature-settings:\\\"rlig\\\" 1,\\\"calt\\\" 1;font-size:17px}article.nextra-body-typesetting-article h1{text-align:center;margin-top:1.5rem;margin-bottom:1rem;font-size:2.5rem}article.nextra-body-typesetting-article h2{border-style:none}article.nextra-body-typesetting-article a{text-decoration-line:none}article.nextra-body-typesetting-article a:hover{text-decoration-line:underline}article.nextra-body-typesetting-article p{line-height:2rem}article.nextra-body-typesetting-article code{border-style:none}article.nextra-body-typesetting-article code:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(64,64,64,var(--tw-bg-opacity))}article.nextra-body-typesetting-article pre code:is(html[class~=dark] *){background-color:transparent}article.nextra-body-typesetting-article .subheading-anchor+a{text-decoration-line:none}article.nextra-body-typesetting-article .subheading-anchor+a:after{content:var(--tw-content);display:none}article.nextra-body-typesetting-article .subheading-anchor+a:hover{text-decoration-line:none}html{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;font-feature-settings:\\\"rlig\\\" 1,\\\"calt\\\" 1,\\\"ss01\\\" 1,\\\"ss06\\\" 1;-webkit-tap-highlight-color:transparent;font-size:1rem}body{scroll-behavior:smooth;--tw-bg-opacity:1;background-color:rgba(255,255,255,var(--tw-bg-opacity));width:100%}body:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(17,17,17,var(--tw-bg-opacity));--tw-text-opacity:1;color:rgba(243,244,246,var(--tw-text-opacity))}a,summary,button,input,[tabindex]:not([tabindex=\\\"-1\\\"]){outline-offset:2px;outline:2px solid transparent}a:focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset)0 0 0 var(--tw-ring-offset-width)var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent);--tw-ring-opacity:1;--tw-ring-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-ring-opacity));--tw-ring-offset-width:1px;--tw-ring-offset-color:hsl(var(--nextra-primary-hue)100% 75%)}summary:focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset)0 0 0 var(--tw-ring-offset-width)var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent);--tw-ring-opacity:1;--tw-ring-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-ring-opacity));--tw-ring-offset-width:1px;--tw-ring-offset-color:hsl(var(--nextra-primary-hue)100% 75%)}button:focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset)0 0 0 var(--tw-ring-offset-width)var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent);--tw-ring-opacity:1;--tw-ring-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-ring-opacity));--tw-ring-offset-width:1px;--tw-ring-offset-color:hsl(var(--nextra-primary-hue)100% 75%)}input:focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset)0 0 0 var(--tw-ring-offset-width)var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent);--tw-ring-opacity:1;--tw-ring-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-ring-opacity));--tw-ring-offset-width:1px;--tw-ring-offset-color:hsl(var(--nextra-primary-hue)100% 75%)}[tabindex]:not([tabindex=\\\"-1\\\"]):focus-visible{--tw-ring-offset-shadow:var(--tw-ring-inset)0 0 0 var(--tw-ring-offset-width)var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 transparent);--tw-ring-opacity:1;--tw-ring-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-ring-opacity));--tw-ring-offset-width:1px;--tw-ring-offset-color:hsl(var(--nextra-primary-hue)100% 75%)}a,summary{border-radius:.25rem}@media (max-width:767px){.nextra-sidebar-container{z-index:15;overscroll-behavior:contain;--tw-bg-opacity:1;background-color:rgba(255,255,255,var(--tw-bg-opacity));padding-top:calc(var(--nextra-navbar-height));width:100%;position:fixed;top:0;bottom:0}.nextra-sidebar-container:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(17,17,17,var(--tw-bg-opacity))}.nextra-sidebar-container{will-change:transform,opacity;contain:layout style;backface-visibility:hidden;transition:transform .8s cubic-bezier(.52,.16,.04,1)}.nextra-banner-container~div .nextra-sidebar-container{padding-top:6.5rem}.nextra-banner-container~div.nextra-nav-container{top:2.5rem}@media (min-width:768px){.nextra-banner-container~div.nextra-nav-container{top:0}}.nextra-banner-hidden .nextra-banner-container~div .nextra-sidebar-container{padding-top:4rem}.nextra-banner-hidden .nextra-nav-container{top:0!important}.nextra-search .excerpt{text-overflow:ellipsis;line-clamp:1;-webkit-line-clamp:1;-webkit-box-orient:vertical;display:-webkit-box;overflow:hidden}}@media (prefers-reduced-motion:reduce) and (max-width:767px){article:before,.nextra-sidebar-container,.nextra-sidebar-container.open,body.resizing .nextra-sidebar-container{transition-property:none}}article details>summary::-webkit-details-marker{display:none}article details>summary:before{vertical-align:-4px;background-image:url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' class='h-5 w-5' viewBox='0 0 20 20' fill='currentColor'%3E%3Cpath fill-rule='evenodd' d='M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z' clip-rule='evenodd' /%3E%3C/svg%3E\\\");width:1.2em;height:1.2em}@media (min-width:768px){.nextra-toc>.div,.nextra-sidebar-container{-webkit-mask-image:linear-gradient(transparent,#000 20px),linear-gradient(270deg,#000 10px,transparent 10px);mask-image:linear-gradient(transparent,#000 20px),linear-gradient(270deg,#000 10px,transparent 10px)}}@supports ((-webkit-backdrop-filter:blur(1px)) or (backdrop-filter:blur(1px))){.nextra-search ul{--tw-backdrop-blur:blur(16px);-webkit-backdrop-filter:var(--tw-backdrop-blur)var(--tw-backdrop-brightness)var(--tw-backdrop-contrast)var(--tw-backdrop-grayscale)var(--tw-backdrop-hue-rotate)var(--tw-backdrop-invert)var(--tw-backdrop-opacity)var(--tw-backdrop-saturate)var(--tw-backdrop-sepia);backdrop-filter:var(--tw-backdrop-blur)var(--tw-backdrop-brightness)var(--tw-backdrop-contrast)var(--tw-backdrop-grayscale)var(--tw-backdrop-hue-rotate)var(--tw-backdrop-invert)var(--tw-backdrop-opacity)var(--tw-backdrop-saturate)var(--tw-backdrop-sepia);background-color:rgba(255,255,255,.7)}.nextra-search ul:is(html[class~=dark] *){background-color:rgba(17,17,17,.8)}.nextra-nav-container-blur{--tw-backdrop-blur:blur(12px);-webkit-backdrop-filter:var(--tw-backdrop-blur)var(--tw-backdrop-brightness)var(--tw-backdrop-contrast)var(--tw-backdrop-grayscale)var(--tw-backdrop-hue-rotate)var(--tw-backdrop-invert)var(--tw-backdrop-opacity)var(--tw-backdrop-saturate)var(--tw-backdrop-sepia);backdrop-filter:var(--tw-backdrop-blur)var(--tw-backdrop-brightness)var(--tw-backdrop-contrast)var(--tw-backdrop-grayscale)var(--tw-backdrop-hue-rotate)var(--tw-backdrop-invert)var(--tw-backdrop-opacity)var(--tw-backdrop-saturate)var(--tw-backdrop-sepia);background-color:rgba(255,255,255,.85)}.nextra-nav-container-blur:is(html[class~=dark] *){background-color:rgba(17,17,17,.8)!important}}input[type=search]::-webkit-search-decoration{-webkit-appearance:none}input[type=search]::-webkit-search-cancel-button{-webkit-appearance:none}input[type=search]::-webkit-search-results-button{-webkit-appearance:none}input[type=search]::-webkit-search-results-decoration{-webkit-appearance:none}.contains-task-list{margin-left:0;list-style-type:none}.contains-task-list input[type=checkbox]{margin-right:.25rem}.nextra-banner-hidden .nextra-banner-container{display:none}:root{--docs-accent-color:#9580ff;--docs-accent-color-opacity:rgba(149,128,255,.376);--docs-accent-color-link:#9580ff;--docs-light-bg:rgba(229,229,229,.376);--docs-dark-bg:rgba(42,42,42,.565);--nextra-navbar-height:4rem}@media (min-width:640px){:root{--nextra-navbar-height:7rem}.nextra-sidebar-container>div{margin-top:10px;padding-top:0}.nextra-nav-container nav{height:var(--nextra-navbar-height)}aside{height:calc(100vh - var(--nextra-navbar-height));top:calc(var(--nextra-navbar-height) + 4px)!important}}html[class~=dark]{--nextra-primary-hue:250;--nextra-primary-hue-saturation:100%;--nextra-primary-hue-lightness:75%}html,body,kbd{-webkit-font-smoothing:\\\"antialiased\\\";font-family:Inter,Helvetica Neue,Helvetica,Arial,\\\"sans-serif\\\"}html{font-size:17px}.nextra-nav-container nav{box-sizing:border-box;padding:1rem 2.5rem}.nextra-toc{padding-right:1rem}@media (max-width:640px){.nextra-nav-container{padding:0}.nextra-nav-container nav{padding:1rem 2rem}aside{height:100%;top:0}}html[class~=dark] .dark\\\\:text-gray-400,html[class~=dark] .text-gray-500{color:#999!important}html[class~=dark] .dark\\\\:bg-dark{background-color:#0e0e0e}html[class~=light] body{color:#0e0e0e}html[class~=dark] body{color:#c5c5c5}html[class~=dark] p strong,html[class~=dark] h1,html[class~=dark] h2,html[class~=dark] h3,html[class~=dark] h4{color:#fff}p a,p li a{text-underline-offset:.01em;text-decoration:underline;text-decoration-thickness:1px;-webkit-text-decoration-color:var(--docs-accent-color-opacity);text-decoration-color:var(--docs-accent-color-opacity)}p a:hover,p li a:hover{-webkit-text-decoration-color:var(--docs-accent-color-link);text-decoration-color:var(--docs-accent-color-link)}.nextra-nav-container{border-top:4px solid var(--docs-accent-color)}.nextra-nav-container nav{justify-content:space-between}.nextra-nav-container nav>a{flex-shrink:0;width:15.3rem;margin:0!important}@media (max-width:650px){.nextra-nav-container nav>a{flex-shrink:1;width:auto}}.nextra-nav-container .cbs-menu-container{justify-content:space-between;width:100%;max-width:59rem;display:flex}.nextra-nav-container .cbs-menu-container .cbs-menu{gap:.4rem;display:flex}.nextra-nav-container .cbs-menu-container .cbs-menu a{font-size:.9rem;font-weight:500}.nextra-nav-container .nextra-nav-container-blur{border:none;box-shadow:none!important}html[class~=dark] .nextra-nav-container .nextra-nav-container-blur{background-color:#0e0e0e}.logo{margin-top:6px}.centerNav{margin-top:4px;font-weight:500}.centerNav input{font-weight:500}.nextra-nav-container+div,.nextra-nav-container nav{max-width:100%}.centerNav a:first-child{padding-left:4px}@media (max-width:640px){.logo{flex-shrink:1}.rightMenuWrap{justify-content:flex-end}}html[class~=dark] .nextra-search input,html[class~=dark] .nextra-search input:focus{background-color:#0d0d0d;border-color:#252525}html[class~=dark] .nextra-search input::placeholder{color:rgba(229,229,229,.376)}html[class~=dark] .nextra-search input::placeholder{color:rgba(229,229,229,.376)}.nextra-sidebar-container-menu{border:none}@media (min-width:768px){.nextra-sidebar-container{padding-left:1rem}}.nextra-toc-meta,.nextra-sidebar-container-menu{box-shadow:none!important}.nextra-sidebar-container .nextra-scrollbar+div{border-width:0;height:4rem}.nextra-toc ul li a,.nextra-sidebar-container ul li.active>a,.nextra-sidebar-container ul li.active>a:hover{font-weight:400}html[class~=light] .nextra-sidebar-container ul li a{color:#0e0e0e}html[class~=light] .nextra-sidebar-container ul li a:hover,html[class~=light] .nextra-sidebar-container ul li.active>a:hover{background-color:var(--docs-light-bg)}html[class~=dark] .nextra-sidebar-container ul li a:hover,html[class~=dark] .nextra-sidebar-container ul li.active>a:hover{background-color:var(--docs-dark-bg)}html[class~=dark] .folderAsHeader .nextra-sidebar-container ul li a{color:#c5c5c5;font-size:1.05rem}html[class~=dark] .folderAsHeader .nextra-sidebar-container ul li ul li a{color:#999;font-size:.875rem}html[class~=dark] .folderAsHeader .nextra-sidebar-container ul li.active>a,html[class~=dark] .nextra-toc ul li a[aria-selected=true],html[class~=light] .folderAsHeader .nextra-sidebar-container ul li.active>a,html[class~=light] .nextra-toc ul li a[aria-selected=true]{color:var(--docs-accent-color);background-color:transparent}html[class~=dark] .nextra-sidebar-container ul li.active>a:hover,html[class~=dark] .nextra-toc ul li a[aria-selected=true]:hover,html[class~=light] .nx-text-primary-500{color:var(--docs-accent-color)}html[class~=light] .nx-border-primary-500{border-color:var(--docs-accent-color)}@media (max-width:640px){html[class~=dark] .folderAsHeader .nextra-sidebar-container ul li.active>a{color:currentColor;text-align:left}.folderAsHeader .nextra-sidebar-container ul ul li a{justify-content:normal}}.folderAsHeader .nextra-sidebar-container ul ul{margin:.3rem 0 1.2rem;padding-left:0}.folderAsHeader .nextra-sidebar-container ul div{padding-left:0}.folderAsHeader .nextra-sidebar-container ul ul:before{content:none}.folderAsHeader .nextra-sidebar-container ul li a{font-size:16px}.folderAsHeader .nextra-sidebar-container a svg{opacity:0;transition:opacity .1s}.folderAsHeader .nextra-sidebar-container a:hover svg{opacity:1}svg:hover{background:0 0!important}.folderAsHeader .nextra-sidebar-container ul>li>a,.folderAsHeader .nextra-sidebar-container ul>li>a:hover{cursor:default;font-weight:600;line-height:1.3}.folderAsHeader .nextra-sidebar-container ul>li li a,.folderAsHeader .nextra-sidebar-container ul>li li a:hover{cursor:pointer;font-weight:400}.folderAsHeader .nextra-sidebar-container ul li ul li a{font-size:14px}.wip{opacity:.5;display:flex;position:relative}.wip:after{content:\\\"WIP\\\";opacity:.6;border-radius:2px;padding:2px;font-size:9px;line-height:13px;position:absolute;top:50%;right:0;transform:translateY(-35%)}main div.mt-12{display:none}.nextra-breadcrumb{pointer-events:none;display:none}.nextra-navigation-links{border:none;margin-top:6rem;padding-bottom:4rem}html[class~=dark] article p a,html[class~=dark] article li a,html[class~=dark] .dark\\\\:hover\\\\:text-primary-500:hover,html[class~=light] article p a,html[class~=light] article li a,html[class~=light] .dark\\\\:hover\\\\:text-primary-500:hover{color:var(--docs-accent-color-link)!important}p kbd{border-radius:4px;padding:6px 6px 7px;font-size:13px;font-weight:700;line-height:14px}html[class~=light] p kbd{color:#4b5563;background:rgba(75,85,99,.12);box-shadow:inset 0 -2px rgba(75,85,99,.24)}html[class~=dark] p kbd{color:#c5c5c5;background:#2a2a2a;box-shadow:inset 0 -2px rgba(255,255,255,.12)}html[class~=light] p code{background-color:var(--docs-light-bg);border:1px solid #e5e7eb}html[class~=dark] p code{background-color:var(--docs-dark-bg);color:#c5c5c5;border:1px solid #373737}.nextra-callout{box-sizing:border-box;border-radius:6px;align-items:flex-start;padding:16px;display:flex}.nextra-callout .pr-2{padding-right:1rem}html[class~=light] .nextra-callout{color:rgba(65,65,65,.9);background-color:var(--docs-light-bg);border:none!important}html[class~=dark] .nextra-callout{background:var(--docs-dark-bg)!important;color:#999!important;border:none!important}html[class~=dark] .nextra-callout h4{color:#fff}html[class~=light] .nextra-callout h4{color:#000}.ctaContainer{gap:1.3rem;margin:2rem 0;display:flex}@media (max-width:920px){.ctaContainer{flex-direction:column}}.cbs article h1{letter-spacing:-.05em;margin-top:0;font-size:3.5rem;font-weight:700;line-height:100%}@media (max-width:640px){.cbs article h1{font-size:3rem}}.cbs article h2{letter-spacing:-.025em;border:none;font-size:2rem;font-weight:700;line-height:120%}.cbs article h2 .nx-absolute,.cbs article h3 .nx-absolute{margin-top:-7rem}.cbs article h1:first-of-type{margin-top:-.16em}.cbs article h2{margin-top:2em}.cbs article h2+p:not(:first-child),.cbs article h3+p:not(:first-child){margin-top:.6rem}.cbs article h3{margin-top:1.5em}.cbs article img{border-radius:4px}.cbs article .subheading-anchor{margin-top:-110px}.nx-sandpack-fluid-layout{--sp-layout-height:auto}.placeholder\\\\:nx-text-gray-400::placeholder{--tw-text-opacity:1;color:rgba(156,163,175,var(--tw-text-opacity))}.placeholder\\\\:nx-text-gray-400::placeholder{--tw-text-opacity:1;color:rgba(156,163,175,var(--tw-text-opacity))}.before\\\\:nx-absolute:before{content:var(--tw-content);position:absolute}.before\\\\:nx-inset-y-1\\\\.5:before{content:var(--tw-content);top:.375rem;bottom:.375rem}.before\\\\:nx-mr-1:before{content:var(--tw-content);margin-right:.25rem}.before\\\\:nx-inline-block:before{content:var(--tw-content);display:inline-block}.before\\\\:nx-w-px:before{content:var(--tw-content);width:1px}.before\\\\:nx-bg-gray-200:before{content:var(--tw-content);--tw-bg-opacity:1;background-color:rgba(229,231,235,var(--tw-bg-opacity))}.before\\\\:nx-opacity-25:before{content:var(--tw-content);opacity:.25}.before\\\\:nx-transition-transform:before{content:var(--tw-content);transition-property:transform;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1)}.before\\\\:nx-content-\\\\[\\\\\\\"\\\\\\\"\\\\]:before{--tw-content:\\\"\\\";content:var(--tw-content)}.before\\\\:nx-content-\\\\[\\\\\\\"\\\\#\\\\\\\"\\\\]:before{--tw-content:\\\"#\\\";content:var(--tw-content)}.before\\\\:nx-content-\\\\[\\\\'\\\\'\\\\]:before{--tw-content:\\\"\\\";content:var(--tw-content)}.first\\\\:nx-mt-0:first-child{margin-top:0}.hover\\\\:nx-border-gray-200:hover{--tw-border-opacity:1;border-color:rgba(229,231,235,var(--tw-border-opacity))}.hover\\\\:nx-bg-gray-100:hover{--tw-bg-opacity:1;background-color:rgba(243,244,246,var(--tw-bg-opacity))}.hover\\\\:nx-bg-gray-800\\\\/5:hover{background-color:rgba(31,41,55,.05)}.hover\\\\:nx-text-black:hover{--tw-text-opacity:1;color:rgba(0,0,0,var(--tw-text-opacity))}.hover\\\\:nx-text-gray-800:hover{--tw-text-opacity:1;color:rgba(31,41,55,var(--tw-text-opacity))}.hover\\\\:nx-text-gray-900:hover{--tw-text-opacity:1;color:rgba(17,24,39,var(--tw-text-opacity))}.hover\\\\:nx-text-primary-500:hover{--tw-text-opacity:1;color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-text-opacity))}.hover\\\\:nx-opacity-100:hover{opacity:1}.hover\\\\:nx-opacity-70:hover{opacity:.7}.hover\\\\:nx-opacity-75:hover{opacity:.75}.focus\\\\:nx-bg-white:focus{--tw-bg-opacity:1;background-color:rgba(255,255,255,var(--tw-bg-opacity))}.active\\\\:nx-bg-gray-400\\\\/20:active{background-color:rgba(156,163,175,.2)}@media (prefers-reduced-motion:reduce){.motion-reduce\\\\:nx-transition-none{transition-property:none}}@media (prefers-contrast:more){.contrast-more\\\\:nx-border{border-width:1px}.contrast-more\\\\:nx-border-t{border-top-width:1px}.contrast-more\\\\:nx-border-current{border-color:currentColor}.contrast-more\\\\:nx-border-gray-600{--tw-border-opacity:1;border-color:rgba(75,85,99,var(--tw-border-opacity))}.contrast-more\\\\:nx-border-gray-900{--tw-border-opacity:1;border-color:rgba(17,24,39,var(--tw-border-opacity))}.contrast-more\\\\:nx-border-neutral-400{--tw-border-opacity:1;border-color:rgba(163,163,163,var(--tw-border-opacity))}.contrast-more\\\\:nx-border-primary-500{--tw-border-opacity:1;border-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-border-opacity))}.contrast-more\\\\:nx-border-transparent{border-color:transparent}.contrast-more\\\\:nx-font-bold{font-weight:700}.contrast-more\\\\:\\\\!nx-text-primary-500{--tw-text-opacity:1!important;color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-text-opacity))!important}.contrast-more\\\\:nx-text-current{color:currentColor}.contrast-more\\\\:nx-text-gray-700{--tw-text-opacity:1;color:rgba(55,65,81,var(--tw-text-opacity))}.contrast-more\\\\:nx-text-gray-800{--tw-text-opacity:1;color:rgba(31,41,55,var(--tw-text-opacity))}.contrast-more\\\\:nx-text-gray-900{--tw-text-opacity:1;color:rgba(17,24,39,var(--tw-text-opacity))}.contrast-more\\\\:nx-underline{text-decoration-line:underline}.contrast-more\\\\:nx-shadow-\\\\[0_0_0_1px_\\\\#000\\\\]{--tw-shadow:0 0 0 1px #000;--tw-shadow-colored:0 0 0 1px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.contrast-more\\\\:nx-shadow-none{--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.contrast-more\\\\:hover\\\\:nx-border-gray-900:hover{--tw-border-opacity:1;border-color:rgba(17,24,39,var(--tw-border-opacity))}}.dark\\\\:nx-border-blue-200\\\\/30:is(html[class~=dark] *){border-color:rgba(191,219,254,.3)}.dark\\\\:nx-border-gray-100\\\\/20:is(html[class~=dark] *){border-color:rgba(243,244,246,.2)}.dark\\\\:nx-border-gray-700:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(55,65,81,var(--tw-border-opacity))}.dark\\\\:nx-border-gray-900:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(17,24,39,var(--tw-border-opacity))}.dark\\\\:nx-border-neutral-800:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(38,38,38,var(--tw-border-opacity))}.dark\\\\:nx-border-orange-400\\\\/30:is(html[class~=dark] *){border-color:rgba(251,146,60,.3)}.dark\\\\:nx-border-primary-100\\\\/10:is(html[class~=dark] *){border-color:hsl(var(--nextra-primary-hue)100% 75%/.1)}.dark\\\\:nx-border-red-200\\\\/30:is(html[class~=dark] *){border-color:rgba(254,202,202,.3)}.dark\\\\:nx-border-white\\\\/10:is(html[class~=dark] *){border-color:rgba(255,255,255,.1)}.dark\\\\:nx-border-white\\\\/20:is(html[class~=dark] *){border-color:rgba(255,255,255,.2)}.dark\\\\:nx-bg-black\\\\/60:is(html[class~=dark] *){background-color:rgba(0,0,0,.6)}.dark\\\\:nx-bg-blue-900\\\\/30:is(html[class~=dark] *){background-color:rgba(30,58,138,.3)}.dark\\\\:nx-bg-dark:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(17,17,17,var(--tw-bg-opacity))}.dark\\\\:nx-bg-dark\\\\/50:is(html[class~=dark] *){background-color:rgba(17,17,17,.5)}.dark\\\\:nx-bg-gray-50\\\\/10:is(html[class~=dark] *){background-color:rgba(249,250,251,.1)}.dark\\\\:nx-bg-neutral-800:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(38,38,38,var(--tw-bg-opacity))}.dark\\\\:nx-bg-neutral-900:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(23,23,23,var(--tw-bg-opacity))}.dark\\\\:nx-bg-orange-400\\\\/20:is(html[class~=dark] *){background-color:rgba(251,146,60,.2)}.dark\\\\:nx-bg-primary-100\\\\/10:is(html[class~=dark] *){background-color:hsl(var(--nextra-primary-hue)100% 75%/.1)}.dark\\\\:nx-bg-primary-500\\\\/10:is(html[class~=dark] *){background-color:hsl(var(--nextra-primary-hue)100% 75%/.1)}.dark\\\\:nx-bg-red-900\\\\/30:is(html[class~=dark] *){background-color:rgba(127,29,29,.3)}.dark\\\\:nx-bg-white\\\\/10:is(html[class~=dark] *){background-color:rgba(255,255,255,.1)}.dark\\\\:nx-bg-yellow-700\\\\/30:is(html[class~=dark] *){background-color:rgba(161,98,7,.3)}.dark\\\\:nx-bg-\\\\[linear-gradient\\\\(1deg\\\\,\\\\#383838\\\\,\\\\#212121\\\\)\\\\]:is(html[class~=dark] *){background-image:linear-gradient(1deg,#383838,#212121)}.dark\\\\:nx-text-blue-200:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(191,219,254,var(--tw-text-opacity))}.dark\\\\:nx-text-gray-100:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(243,244,246,var(--tw-text-opacity))}.dark\\\\:nx-text-gray-200:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(229,231,235,var(--tw-text-opacity))}.dark\\\\:nx-text-gray-300:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(209,213,219,var(--tw-text-opacity))}.dark\\\\:nx-text-gray-400:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(156,163,175,var(--tw-text-opacity))}.dark\\\\:nx-text-gray-50:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(249,250,251,var(--tw-text-opacity))}.dark\\\\:nx-text-neutral-500:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(115,115,115,var(--tw-text-opacity))}.dark\\\\:nx-text-neutral-600:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(82,82,82,var(--tw-text-opacity))}.dark\\\\:nx-text-orange-300:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(253,186,116,var(--tw-text-opacity))}.dark\\\\:nx-text-red-200:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(254,202,202,var(--tw-text-opacity))}.dark\\\\:nx-text-white:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity))}.dark\\\\:nx-text-yellow-200:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(254,240,138,var(--tw-text-opacity))}.dark\\\\:nx-shadow-\\\\[0_-12px_16px_\\\\#111\\\\]:is(html[class~=dark] *){--tw-shadow:0 -12px 16px #111;--tw-shadow-colored:0 -12px 16px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.dark\\\\:nx-shadow-\\\\[0_-1px_0_rgba\\\\(255\\\\,255\\\\,255\\\\,\\\\.1\\\\)_inset\\\\]:is(html[class~=dark] *){--tw-shadow:0 -1px 0 rgba(255,255,255,.1) inset;--tw-shadow-colored:inset 0 -1px 0 var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.dark\\\\:nx-shadow-\\\\[0_2px_14px_6px_\\\\#111\\\\]:is(html[class~=dark] *){--tw-shadow:0 2px 14px 6px #111;--tw-shadow-colored:0 2px 14px 6px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.dark\\\\:placeholder\\\\:nx-text-gray-500:is(html[class~=dark] *)::-moz-placeholder{--tw-text-opacity:1;color:rgba(107,114,128,var(--tw-text-opacity))}.dark\\\\:placeholder\\\\:nx-text-gray-500:is(html[class~=dark] *)::-ms-input-placeholder{--tw-text-opacity:1;color:rgba(107,114,128,var(--tw-text-opacity))}.dark\\\\:placeholder\\\\:nx-text-gray-500:is(html[class~=dark] *)::placeholder{--tw-text-opacity:1;color:rgba(107,114,128,var(--tw-text-opacity))}.dark\\\\:before\\\\:nx-bg-neutral-800:is(html[class~=dark] *):before{content:var(--tw-content);--tw-bg-opacity:1;background-color:rgba(38,38,38,var(--tw-bg-opacity))}.dark\\\\:before\\\\:nx-invert:is(html[class~=dark] *):before{content:var(--tw-content);--tw-invert:invert(100%);filter:var(--tw-blur)var(--tw-brightness)var(--tw-contrast)var(--tw-grayscale)var(--tw-hue-rotate)var(--tw-invert)var(--tw-saturate)var(--tw-sepia)var(--tw-drop-shadow)}.dark\\\\:hover\\\\:nx-border-neutral-800:hover:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(38,38,38,var(--tw-border-opacity))}.dark\\\\:hover\\\\:nx-bg-gray-100\\\\/5:hover:is(html[class~=dark] *){background-color:rgba(243,244,246,.05)}.dark\\\\:hover\\\\:nx-bg-neutral-800:hover:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(38,38,38,var(--tw-bg-opacity))}.dark\\\\:hover\\\\:nx-bg-primary-100\\\\/5:hover:is(html[class~=dark] *){background-color:hsl(var(--nextra-primary-hue)100% 75%/.05)}.dark\\\\:hover\\\\:nx-text-gray-100:hover:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(243,244,246,var(--tw-text-opacity))}.dark\\\\:hover\\\\:nx-text-gray-200:hover:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(229,231,235,var(--tw-text-opacity))}.dark\\\\:hover\\\\:nx-text-gray-300:hover:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(209,213,219,var(--tw-text-opacity))}.dark\\\\:hover\\\\:nx-text-gray-50:hover:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(249,250,251,var(--tw-text-opacity))}.dark\\\\:hover\\\\:nx-text-white:hover:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(255,255,255,var(--tw-text-opacity))}.dark\\\\:focus\\\\:nx-bg-dark:focus:is(html[class~=dark] *){--tw-bg-opacity:1;background-color:rgba(17,17,17,var(--tw-bg-opacity))}@media (prefers-contrast:more){.contrast-more\\\\:dark\\\\:nx-border-current:is(html[class~=dark] *){border-color:currentColor}.contrast-more\\\\:dark\\\\:nx-border-gray-50:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(249,250,251,var(--tw-border-opacity))}.contrast-more\\\\:dark\\\\:nx-border-neutral-400:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(163,163,163,var(--tw-border-opacity))}.contrast-more\\\\:dark\\\\:nx-border-primary-500:is(html[class~=dark] *){--tw-border-opacity:1;border-color:hsl(var(--nextra-primary-hue)100% 75%/var(--tw-border-opacity))}.dark\\\\:contrast-more\\\\:nx-border-neutral-400:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(163,163,163,var(--tw-border-opacity))}.contrast-more\\\\:dark\\\\:nx-text-current:is(html[class~=dark] *){color:currentColor}.contrast-more\\\\:dark\\\\:nx-text-gray-100:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(243,244,246,var(--tw-text-opacity))}.contrast-more\\\\:dark\\\\:nx-text-gray-300:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(209,213,219,var(--tw-text-opacity))}.contrast-more\\\\:dark\\\\:nx-text-gray-50:is(html[class~=dark] *){--tw-text-opacity:1;color:rgba(249,250,251,var(--tw-text-opacity))}.contrast-more\\\\:dark\\\\:nx-shadow-\\\\[0_0_0_1px_\\\\#fff\\\\]:is(html[class~=dark] *){--tw-shadow:0 0 0 1px #fff;--tw-shadow-colored:0 0 0 1px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.contrast-more\\\\:dark\\\\:nx-shadow-none:is(html[class~=dark] *){--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.dark\\\\:contrast-more\\\\:nx-shadow-none:is(html[class~=dark] *){--tw-shadow:0 0 transparent;--tw-shadow-colored:0 0 transparent;box-shadow:var(--tw-ring-offset-shadow,0 0 transparent),var(--tw-ring-shadow,0 0 transparent),var(--tw-shadow)}.contrast-more\\\\:dark\\\\:hover\\\\:nx-border-gray-50:hover:is(html[class~=dark] *){--tw-border-opacity:1;border-color:rgba(249,250,251,var(--tw-border-opacity))}}@media (min-width:640px){.sm\\\\:nx-flex{display:flex}}@media (min-width:768px){.md\\\\:nx-sticky{position:sticky}.md\\\\:nx-top-16{top:4rem}.md\\\\:-nx-mx-8{margin-left:-2rem;margin-right:-2rem}.md\\\\:nx-inline-block{display:inline-block}.md\\\\:nx-inline{display:inline}.md\\\\:nx-flex{display:flex}.md\\\\:nx-inline-flex{display:inline-flex}.md\\\\:nx-hidden{display:none}.md\\\\:nx-h-\\\\[calc\\\\(100vh-var\\\\(--nextra-navbar-height\\\\)-3\\\\.75rem\\\\)\\\\]{height:calc(100vh - var(--nextra-navbar-height) - 3.75rem)}.md\\\\:nx-max-h-\\\\[min\\\\(calc\\\\(100vh-5rem-env\\\\(safe-area-inset-bottom\\\\)\\\\)\\\\,400px\\\\)\\\\]{max-height:min(calc(100vh - 5rem - env(safe-area-inset-bottom)),400px)}.md\\\\:nx-w-64{width:16rem}.md\\\\:nx-shrink-0{flex-shrink:0}.md\\\\:nx-transform-none{transform:none}.md\\\\:nx-justify-start{justify-content:flex-start}.md\\\\:nx-self-start{align-self:flex-start}.md\\\\:nx-overflow-auto{overflow:auto}.md\\\\:nx-px-8{padding-left:2rem;padding-right:2rem}.md\\\\:nx-pt-12{padding-top:3rem}.md\\\\:nx-text-lg{font-size:1.125rem}.md\\\\:nx-text-sm{font-size:.875rem}}@media (min-width:1280px){.xl\\\\:nx-block{display:block}}@media (min-width:1536px){.\\\\32 xl\\\\:-nx-mx-24{margin-left:-6rem;margin-right:-6rem}}.ltr\\\\:nx-right-0:where([dir=ltr],[dir=ltr] *){right:0}.ltr\\\\:nx-right-1\\\\.5:where([dir=ltr],[dir=ltr] *){right:.375rem}.ltr\\\\:nx-right-3:where([dir=ltr],[dir=ltr] *){right:.75rem}.ltr\\\\:-nx-mr-4:where([dir=ltr],[dir=ltr] *){margin-right:-1rem}.ltr\\\\:nx-ml-1:where([dir=ltr],[dir=ltr] *){margin-left:.25rem}.ltr\\\\:nx-ml-12:where([dir=ltr],[dir=ltr] *){margin-left:3rem}.ltr\\\\:nx-ml-16:where([dir=ltr],[dir=ltr] *){margin-left:4rem}.ltr\\\\:nx-ml-3:where([dir=ltr],[dir=ltr] *){margin-left:.75rem}.ltr\\\\:nx-ml-4:where([dir=ltr],[dir=ltr] *){margin-left:1rem}.ltr\\\\:nx-ml-6:where([dir=ltr],[dir=ltr] *){margin-left:1.5rem}.ltr\\\\:nx-ml-8:where([dir=ltr],[dir=ltr] *){margin-left:2rem}.ltr\\\\:nx-ml-auto:where([dir=ltr],[dir=ltr] *){margin-left:auto}.ltr\\\\:nx-mr-auto:where([dir=ltr],[dir=ltr] *){margin-right:auto}.ltr\\\\:nx-rotate-180:where([dir=ltr],[dir=ltr] *){--tw-rotate:180deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.ltr\\\\:nx-rotate-90:where([dir=ltr],[dir=ltr] *){--tw-rotate:90deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.ltr\\\\:nx-border-l-2:where([dir=ltr],[dir=ltr] *){border-left-width:2px}.ltr\\\\:nx-pl-3:where([dir=ltr],[dir=ltr] *){padding-left:.75rem}.ltr\\\\:nx-pl-4:where([dir=ltr],[dir=ltr] *){padding-left:1rem}.ltr\\\\:nx-pl-6:where([dir=ltr],[dir=ltr] *){padding-left:1.5rem}.ltr\\\\:nx-pr-0:where([dir=ltr],[dir=ltr] *){padding-right:0}.ltr\\\\:nx-pr-2:where([dir=ltr],[dir=ltr] *){padding-right:.5rem}.ltr\\\\:nx-pr-4:where([dir=ltr],[dir=ltr] *){padding-right:1rem}.ltr\\\\:nx-pr-9:where([dir=ltr],[dir=ltr] *){padding-right:2.25rem}.ltr\\\\:nx-text-right:where([dir=ltr],[dir=ltr] *){text-align:right}.ltr\\\\:before\\\\:nx-left-0:where([dir=ltr],[dir=ltr] *):before{content:var(--tw-content);left:0}@media (min-width:768px){.ltr\\\\:md\\\\:nx-left-auto:where([dir=ltr],[dir=ltr] *){left:auto}}@media (min-width:1280px){.ltr\\\\:xl\\\\:nx-ml-\\\\[calc\\\\(50\\\\%-50vw\\\\+16rem\\\\)\\\\]:where([dir=ltr],[dir=ltr] *){margin-left:calc(50% - 50vw + 16rem)}.ltr\\\\:xl\\\\:nx-mr-\\\\[calc\\\\(50\\\\%-50vw\\\\)\\\\]:where([dir=ltr],[dir=ltr] *){margin-right:calc(50% - 50vw)}}.rtl\\\\:nx-left-0:where([dir=rtl],[dir=rtl] *){left:0}.rtl\\\\:nx-left-1\\\\.5:where([dir=rtl],[dir=rtl] *){left:.375rem}.rtl\\\\:nx-left-3:where([dir=rtl],[dir=rtl] *){left:.75rem}.rtl\\\\:-nx-ml-4:where([dir=rtl],[dir=rtl] *){margin-left:-1rem}.rtl\\\\:nx-ml-auto:where([dir=rtl],[dir=rtl] *){margin-left:auto}.rtl\\\\:nx-mr-1:where([dir=rtl],[dir=rtl] *){margin-right:.25rem}.rtl\\\\:nx-mr-12:where([dir=rtl],[dir=rtl] *){margin-right:3rem}.rtl\\\\:nx-mr-16:where([dir=rtl],[dir=rtl] *){margin-right:4rem}.rtl\\\\:nx-mr-3:where([dir=rtl],[dir=rtl] *){margin-right:.75rem}.rtl\\\\:nx-mr-4:where([dir=rtl],[dir=rtl] *){margin-right:1rem}.rtl\\\\:nx-mr-6:where([dir=rtl],[dir=rtl] *){margin-right:1.5rem}.rtl\\\\:nx-mr-8:where([dir=rtl],[dir=rtl] *){margin-right:2rem}.rtl\\\\:nx-mr-auto:where([dir=rtl],[dir=rtl] *){margin-right:auto}.rtl\\\\:-nx-rotate-180:where([dir=rtl],[dir=rtl] *){--tw-rotate:-180deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.rtl\\\\:nx-rotate-180:where([dir=rtl],[dir=rtl] *){--tw-rotate:180deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.rtl\\\\:nx-rotate-\\\\[-270deg\\\\]:where([dir=rtl],[dir=rtl] *){--tw-rotate:-270deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}.rtl\\\\:nx-border-r-2:where([dir=rtl],[dir=rtl] *){border-right-width:2px}.rtl\\\\:nx-pl-0:where([dir=rtl],[dir=rtl] *){padding-left:0}.rtl\\\\:nx-pl-2:where([dir=rtl],[dir=rtl] *){padding-left:.5rem}.rtl\\\\:nx-pl-4:where([dir=rtl],[dir=rtl] *){padding-left:1rem}.rtl\\\\:nx-pl-9:where([dir=rtl],[dir=rtl] *){padding-left:2.25rem}.rtl\\\\:nx-pr-3:where([dir=rtl],[dir=rtl] *){padding-right:.75rem}.rtl\\\\:nx-pr-4:where([dir=rtl],[dir=rtl] *){padding-right:1rem}.rtl\\\\:nx-pr-6:where([dir=rtl],[dir=rtl] *){padding-right:1.5rem}.rtl\\\\:nx-text-left:where([dir=rtl],[dir=rtl] *){text-align:left}.rtl\\\\:before\\\\:nx-right-0:where([dir=rtl],[dir=rtl] *):before{content:var(--tw-content);right:0}.rtl\\\\:before\\\\:nx-rotate-180:where([dir=rtl],[dir=rtl] *):before{content:var(--tw-content);--tw-rotate:180deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}@media (min-width:768px){.rtl\\\\:md\\\\:nx-right-auto:where([dir=rtl],[dir=rtl] *){right:auto}}@media (min-width:1280px){.rtl\\\\:xl\\\\:nx-ml-\\\\[calc\\\\(50\\\\%-50vw\\\\)\\\\]:where([dir=rtl],[dir=rtl] *){margin-left:calc(50% - 50vw)}.rtl\\\\:xl\\\\:nx-mr-\\\\[calc\\\\(50\\\\%-50vw\\\\+16rem\\\\)\\\\]:where([dir=rtl],[dir=rtl] *){margin-right:calc(50% - 50vw + 16rem)}}[data-expanded]>.\\\\[\\\\[data-expanded\\\\]\\\\>\\\\&\\\\]\\\\:before\\\\:nx-rotate-90:before{content:var(--tw-content);--tw-rotate:90deg;transform:translate(var(--tw-translate-x),var(--tw-translate-y))rotate(var(--tw-rotate))skewX(var(--tw-skew-x))skewY(var(--tw-skew-y))scaleX(var(--tw-scale-x))scaleY(var(--tw-scale-y))}body.nextra-banner-hidden .\\\\[body\\\\.nextra-banner-hidden_\\\\&\\\\]\\\\:nx-hidden{display:none}\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ __webpack_exports__[\"default\"] = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[1]!../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[2]!../../packages/codesandbox-theme-docs/dist/style.css\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[1]!../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[2]!./src/styles.css":
/*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[1]!../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[2]!./src/styles.css ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_pnpm_next_14_2_15_react_dom_18_3_1_react_18_3_1_react_18_3_1_node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \"../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\");\n/* harmony import */ var _node_modules_pnpm_next_14_2_15_react_dom_18_3_1_react_18_3_1_react_18_3_1_node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_pnpm_next_14_2_15_react_dom_18_3_1_react_18_3_1_react_18_3_1_node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_pnpm_next_14_2_15_react_dom_18_3_1_react_18_3_1_react_18_3_1_node_modules_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"html[class~=\\\"dark\\\"] {\\n  --docs-accent-color: #8ffb89;\\n  --docs-accent-color-opacity: #8ffb8960;\\n  --docs-accent-color-link: #8ffb89;\\n\\n  --nextra-primary-hue: 117;\\n  --nextra-primary-hue-saturation: 93%;\\n  --nextra-primary-hue-lightness: 76%;\\n}\\n\\nhtml[class~=\\\"light\\\"] {\\n  --docs-accent-color: #028922;\\n  --docs-accent-color-opacity: #02892260;\\n  --docs-accent-color-link: #028922;\\n\\n  --nextra-primary-hue: 134;\\n  --nextra-primary-hue-saturation: 97%;\\n  --nextra-primary-hue-lightness: 27%;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://src/styles.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,4BAA4B;EAC5B,sCAAsC;EACtC,iCAAiC;;EAEjC,yBAAyB;EACzB,oCAAoC;EACpC,mCAAmC;AACrC;;AAEA;EACE,4BAA4B;EAC5B,sCAAsC;EACtC,iCAAiC;;EAEjC,yBAAyB;EACzB,oCAAoC;EACpC,mCAAmC;AACrC\",\"sourcesContent\":[\"html[class~=\\\"dark\\\"] {\\n  --docs-accent-color: #8ffb89;\\n  --docs-accent-color-opacity: #8ffb8960;\\n  --docs-accent-color-link: #8ffb89;\\n\\n  --nextra-primary-hue: 117;\\n  --nextra-primary-hue-saturation: 93%;\\n  --nextra-primary-hue-lightness: 76%;\\n}\\n\\nhtml[class~=\\\"light\\\"] {\\n  --docs-accent-color: #028922;\\n  --docs-accent-color-opacity: #02892260;\\n  --docs-accent-color-link: #028922;\\n\\n  --nextra-primary-hue: 134;\\n  --nextra-primary-hue-saturation: 97%;\\n  --nextra-primary-hue-lightness: 27%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ __webpack_exports__[\"default\"] = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTQuMi4xNV9yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV9fcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzddLm9uZU9mWzE0XS51c2VbMV0hLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTQuMi4xNV9yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV9fcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1s3XS5vbmVPZlsxNF0udXNlWzJdIS4vc3JjL3N0eWxlcy5jc3MiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDME07QUFDMU0sOEJBQThCLDRMQUEyQjtBQUN6RDtBQUNBLGlFQUFpRSxpQ0FBaUMsMkNBQTJDLHNDQUFzQyxnQ0FBZ0MseUNBQXlDLHdDQUF3QyxHQUFHLDRCQUE0QixpQ0FBaUMsMkNBQTJDLHNDQUFzQyxnQ0FBZ0MseUNBQXlDLHdDQUF3QyxHQUFHLFNBQVMsK0VBQStFLFlBQVksYUFBYSxjQUFjLGFBQWEsYUFBYSxhQUFhLE9BQU8sS0FBSyxZQUFZLGFBQWEsY0FBYyxhQUFhLGFBQWEsYUFBYSxpREFBaUQsaUNBQWlDLDJDQUEyQyxzQ0FBc0MsZ0NBQWdDLHlDQUF5Qyx3Q0FBd0MsR0FBRyw0QkFBNEIsaUNBQWlDLDJDQUEyQyxzQ0FBc0MsZ0NBQWdDLHlDQUF5Qyx3Q0FBd0MsR0FBRyxxQkFBcUI7QUFDdjFDO0FBQ0EsK0RBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3N0eWxlcy5jc3M/ZDdlOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4yLjE1X3JlYWN0LWRvbUAxOC4zLjFfcmVhY3RAMTguMy4xX19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImh0bWxbY2xhc3N+PVxcXCJkYXJrXFxcIl0ge1xcbiAgLS1kb2NzLWFjY2VudC1jb2xvcjogIzhmZmI4OTtcXG4gIC0tZG9jcy1hY2NlbnQtY29sb3Itb3BhY2l0eTogIzhmZmI4OTYwO1xcbiAgLS1kb2NzLWFjY2VudC1jb2xvci1saW5rOiAjOGZmYjg5O1xcblxcbiAgLS1uZXh0cmEtcHJpbWFyeS1odWU6IDExNztcXG4gIC0tbmV4dHJhLXByaW1hcnktaHVlLXNhdHVyYXRpb246IDkzJTtcXG4gIC0tbmV4dHJhLXByaW1hcnktaHVlLWxpZ2h0bmVzczogNzYlO1xcbn1cXG5cXG5odG1sW2NsYXNzfj1cXFwibGlnaHRcXFwiXSB7XFxuICAtLWRvY3MtYWNjZW50LWNvbG9yOiAjMDI4OTIyO1xcbiAgLS1kb2NzLWFjY2VudC1jb2xvci1vcGFjaXR5OiAjMDI4OTIyNjA7XFxuICAtLWRvY3MtYWNjZW50LWNvbG9yLWxpbms6ICMwMjg5MjI7XFxuXFxuICAtLW5leHRyYS1wcmltYXJ5LWh1ZTogMTM0O1xcbiAgLS1uZXh0cmEtcHJpbWFyeS1odWUtc2F0dXJhdGlvbjogOTclO1xcbiAgLS1uZXh0cmEtcHJpbWFyeS1odWUtbGlnaHRuZXNzOiAyNyU7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9zcmMvc3R5bGVzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLDRCQUE0QjtFQUM1QixzQ0FBc0M7RUFDdEMsaUNBQWlDOztFQUVqQyx5QkFBeUI7RUFDekIsb0NBQW9DO0VBQ3BDLG1DQUFtQztBQUNyQzs7QUFFQTtFQUNFLDRCQUE0QjtFQUM1QixzQ0FBc0M7RUFDdEMsaUNBQWlDOztFQUVqQyx5QkFBeUI7RUFDekIsb0NBQW9DO0VBQ3BDLG1DQUFtQztBQUNyQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCJodG1sW2NsYXNzfj1cXFwiZGFya1xcXCJdIHtcXG4gIC0tZG9jcy1hY2NlbnQtY29sb3I6ICM4ZmZiODk7XFxuICAtLWRvY3MtYWNjZW50LWNvbG9yLW9wYWNpdHk6ICM4ZmZiODk2MDtcXG4gIC0tZG9jcy1hY2NlbnQtY29sb3ItbGluazogIzhmZmI4OTtcXG5cXG4gIC0tbmV4dHJhLXByaW1hcnktaHVlOiAxMTc7XFxuICAtLW5leHRyYS1wcmltYXJ5LWh1ZS1zYXR1cmF0aW9uOiA5MyU7XFxuICAtLW5leHRyYS1wcmltYXJ5LWh1ZS1saWdodG5lc3M6IDc2JTtcXG59XFxuXFxuaHRtbFtjbGFzc349XFxcImxpZ2h0XFxcIl0ge1xcbiAgLS1kb2NzLWFjY2VudC1jb2xvcjogIzAyODkyMjtcXG4gIC0tZG9jcy1hY2NlbnQtY29sb3Itb3BhY2l0eTogIzAyODkyMjYwO1xcbiAgLS1kb2NzLWFjY2VudC1jb2xvci1saW5rOiAjMDI4OTIyO1xcblxcbiAgLS1uZXh0cmEtcHJpbWFyeS1odWU6IDEzNDtcXG4gIC0tbmV4dHJhLXByaW1hcnktaHVlLXNhdHVyYXRpb246IDk3JTtcXG4gIC0tbmV4dHJhLXByaW1hcnktaHVlLWxpZ2h0bmVzczogMjclO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[1]!../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[2]!./src/styles.css\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js":
/*!********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js ***!
  \********************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/ // css base code, injected by the css-loader\n// eslint-disable-next-line func-names\n\nmodule.exports = function(useSourceMap) {\n    var list = [] // return the list of modules as css string\n    ;\n    list.toString = function toString() {\n        return this.map(function(item) {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            var content = cssWithMappingToString(item, useSourceMap);\n            if (item[2]) {\n                return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n            }\n            return content;\n        }).join(\"\");\n    } // import a list of modules into the list\n    ;\n    // eslint-disable-next-line func-names\n    // @ts-expect-error TODO: fix type\n    list.i = function(modules, mediaQuery, dedupe) {\n        if (typeof modules === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            modules = [\n                [\n                    null,\n                    modules,\n                    \"\"\n                ]\n            ];\n        }\n        var alreadyImportedModules = {};\n        if (dedupe) {\n            for(var i = 0; i < this.length; i++){\n                // eslint-disable-next-line prefer-destructuring\n                var id = this[i][0];\n                if (id != null) {\n                    alreadyImportedModules[id] = true;\n                }\n            }\n        }\n        for(var _i = 0; _i < modules.length; _i++){\n            var item = [].concat(modules[_i]);\n            if (dedupe && alreadyImportedModules[item[0]]) {\n                continue;\n            }\n            if (mediaQuery) {\n                if (!item[2]) {\n                    item[2] = mediaQuery;\n                } else {\n                    item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n                }\n            }\n            list.push(item);\n        }\n    };\n    return list;\n};\nfunction cssWithMappingToString(item, useSourceMap) {\n    var content = item[1] || \"\" // eslint-disable-next-line prefer-destructuring\n    ;\n    var cssMapping = item[3];\n    if (!cssMapping) {\n        return content;\n    }\n    if (useSourceMap && typeof btoa === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        var sourceMapping = toComment(cssMapping);\n        var sourceURLs = cssMapping.sources.map(function(source) {\n            return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || \"\").concat(source, \" */\");\n        });\n        return [\n            content\n        ].concat(sourceURLs).concat([\n            sourceMapping\n        ]).join(\"\\n\");\n    }\n    return [\n        content\n    ].join(\"\\n\");\n} // Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n    // eslint-disable-next-line no-undef\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    return \"/*# \".concat(data, \" */\");\n}\n\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTQuMi4xNV9yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV9fcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL3J1bnRpbWUvYXBpLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QscUJBQXFCO0FBQ3pFO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGlCQUFpQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGNBQWM7QUFDckU7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTQuMi4xNV9yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV9fcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL3J1bnRpbWUvYXBpLmpzPzlmODciXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi8gLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG4gICAgdmFyIGxpc3QgPSBbXSAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gICAgO1xuICAgIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuICAgICAgICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICB9KS5qb2luKFwiXCIpO1xuICAgIH0gLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgICA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE86IGZpeCB0eXBlXG4gICAgbGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICBtb2R1bGVzID0gW1xuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlcyxcbiAgICAgICAgICAgICAgICAgICAgXCJcIlxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICAgICAgaWYgKGRlZHVwZSkge1xuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICAgICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG4gICAgICAgICAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKyl7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG4gICAgICAgICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBsaXN0O1xufTtcbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gICAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8IFwiXCIgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgO1xuICAgIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfVxuICAgIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgICAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgY29udGVudFxuICAgICAgICBdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW1xuICAgICAgICAgICAgc291cmNlTWFwcGluZ1xuICAgICAgICBdKS5qb2luKFwiXFxuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgICBjb250ZW50XG4gICAgXS5qb2luKFwiXFxuXCIpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app! ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/_app\",\n      function () {\n        return __webpack_require__(/*! private-next-pages/_app */ \"./src/pages/_app.tsx\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/_app\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTQuMi4xNV9yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV9fcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtY2xpZW50LXBhZ2VzLWxvYWRlci5qcz9hYnNvbHV0ZVBhZ2VQYXRoPXByaXZhdGUtbmV4dC1wYWdlcyUyRl9hcHAmcGFnZT0lMkZfYXBwISIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLHFEQUF5QjtBQUNoRDtBQUNBO0FBQ0EsT0FBTyxJQUFVO0FBQ2pCLE1BQU0sVUFBVTtBQUNoQjtBQUNBLE9BQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/MTkzOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAod2luZG93Ll9fTkVYVF9QID0gd2luZG93Ll9fTkVYVF9QIHx8IFtdKS5wdXNoKFtcbiAgICAgIFwiL19hcHBcIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCJwcml2YXRlLW5leHQtcGFnZXMvX2FwcFwiKTtcbiAgICAgIH1cbiAgICBdKTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cuX19ORVhUX1AucHVzaChbXCIvX2FwcFwiXSlcbiAgICAgIH0pO1xuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!\n"));

/***/ }),

/***/ "../../packages/codesandbox-theme-docs/dist/style.css":
/*!************************************************************!*\
  !*** ../../packages/codesandbox-theme-docs/dist/style.css ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var api = __webpack_require__(/*! !../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ \"../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !!../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[1]!../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[2]!./style.css */ \"../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[1]!../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[2]!../../packages/codesandbox-theme-docs/dist/style.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function(element) {\n                    // By default, style-loader injects CSS into the bottom\n                    // of <head>. This causes ordering problems between dev\n                    // and prod. To fix this, we render a <noscript> tag as\n                    // an anchor for the styles to be placed before. These\n                    // styles will be applied _before_ <style jsx global>.\n                    // These elements should always exist. If they do not,\n                    // this code should fail.\n                    var anchorElement = document.querySelector(\"#__next_css__DO_NOT_USE__\");\n                    var parentNode = anchorElement.parentNode// Normally <head>\n                    ;\n                    // Each style tag should be placed right before our\n                    // anchor. By inserting before and not after, we do not\n                    // need to track the last inserted element.\n                    parentNode.insertBefore(element, anchorElement);\n                };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (true) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n    if (!a && b || a && !b) {\n        return false;\n    }\n    let p;\n    for(p in a){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (a[p] !== b[p]) {\n            return false;\n        }\n    }\n    for(p in b){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (!a[p]) {\n            return false;\n        }\n    }\n    return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      /*! !!../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[1]!../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[2]!./style.css */ \"../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[1]!../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[2]!../../packages/codesandbox-theme-docs/dist/style.css\",\n      function () {\n        content = __webpack_require__(/*! !!../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[1]!../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[2]!./style.css */ \"../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[1]!../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[12].use[2]!../../packages/codesandbox-theme-docs/dist/style.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vcGFja2FnZXMvY29kZXNhbmRib3gtdGhlbWUtZG9jcy9kaXN0L3N0eWxlLmNzcyIsIm1hcHBpbmdzIjoiQUFBQSxVQUFVLG1CQUFPLENBQUMsc1hBQTBMO0FBQzVNLDBCQUEwQixtQkFBTyxDQUFDLDYwQkFBbVo7O0FBRXJiOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUFHQSxJQUFJLElBQVU7QUFDZCx5QkFBeUIsVUFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSSxpQkFBaUI7QUFDckIsTUFBTSw2MEJBQW1aO0FBQ3paO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsNjBCQUFtWjs7QUFFN2E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLFVBQVU7O0FBRTFCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRSxVQUFVO0FBQ1o7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL3BhY2thZ2VzL2NvZGVzYW5kYm94LXRoZW1lLWRvY3MvZGlzdC9zdHlsZS5jc3M/MjIwMSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4yLjE1X3JlYWN0LWRvbUAxOC4zLjFfcmVhY3RAMTguMy4xX19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1zdHlsZS1sb2FkZXIvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuMTVfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1s3XS5vbmVPZlsxMl0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuMTVfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbN10ub25lT2ZbMTJdLnVzZVsyXSEuL3N0eWxlLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQnkgZGVmYXVsdCwgc3R5bGUtbG9hZGVyIGluamVjdHMgQ1NTIGludG8gdGhlIGJvdHRvbVxuICAgICAgICAgICAgICAgICAgICAvLyBvZiA8aGVhZD4uIFRoaXMgY2F1c2VzIG9yZGVyaW5nIHByb2JsZW1zIGJldHdlZW4gZGV2XG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBwcm9kLiBUbyBmaXggdGhpcywgd2UgcmVuZGVyIGEgPG5vc2NyaXB0PiB0YWcgYXNcbiAgICAgICAgICAgICAgICAgICAgLy8gYW4gYW5jaG9yIGZvciB0aGUgc3R5bGVzIHRvIGJlIHBsYWNlZCBiZWZvcmUuIFRoZXNlXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgX2JlZm9yZV8gPHN0eWxlIGpzeCBnbG9iYWw+LlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVzZSBlbGVtZW50cyBzaG91bGQgYWx3YXlzIGV4aXN0LiBJZiB0aGV5IGRvIG5vdCxcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBjb2RlIHNob3VsZCBmYWlsLlxuICAgICAgICAgICAgICAgICAgICB2YXIgYW5jaG9yRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjX19uZXh0X2Nzc19fRE9fTk9UX1VTRV9fXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGFuY2hvckVsZW1lbnQucGFyZW50Tm9kZS8vIE5vcm1hbGx5IDxoZWFkPlxuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVhY2ggc3R5bGUgdGFnIHNob3VsZCBiZSBwbGFjZWQgcmlnaHQgYmVmb3JlIG91clxuICAgICAgICAgICAgICAgICAgICAvLyBhbmNob3IuIEJ5IGluc2VydGluZyBiZWZvcmUgYW5kIG5vdCBhZnRlciwgd2UgZG8gbm90XG4gICAgICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gdHJhY2sgdGhlIGxhc3QgaW5zZXJ0ZWQgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWxlbWVudCwgYW5jaG9yRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfTtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgaWYgKCFjb250ZW50LmxvY2FscyB8fCBtb2R1bGUuaG90LmludmFsaWRhdGUpIHtcbiAgICB2YXIgaXNFcXVhbExvY2FscyA9IGZ1bmN0aW9uIGlzRXF1YWxMb2NhbHMoYSwgYiwgaXNOYW1lZEV4cG9ydCkge1xuICAgIGlmICghYSAmJiBiIHx8IGEgJiYgIWIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgcDtcbiAgICBmb3IocCBpbiBhKXtcbiAgICAgICAgaWYgKGlzTmFtZWRFeHBvcnQgJiYgcCA9PT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhW3BdICE9PSBiW3BdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yKHAgaW4gYil7XG4gICAgICAgIGlmIChpc05hbWVkRXhwb3J0ICYmIHAgPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFbcF0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4gICAgdmFyIG9sZExvY2FscyA9IGNvbnRlbnQubG9jYWxzO1xuXG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXG4gICAgICBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTQuMi4xNV9yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV9fcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzddLm9uZU9mWzEyXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTQuMi4xNV9yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV9fcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1s3XS5vbmVPZlsxMl0udXNlWzJdIS4vc3R5bGUuY3NzXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4yLjE1X3JlYWN0LWRvbUAxOC4zLjFfcmVhY3RAMTguMy4xX19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbN10ub25lT2ZbMTJdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4yLjE1X3JlYWN0LWRvbUAxOC4zLjFfcmVhY3RAMTguMy4xX19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzddLm9uZU9mWzEyXS51c2VbMl0hLi9zdHlsZS5jc3NcIik7XG5cbiAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghaXNFcXVhbExvY2FscyhvbGRMb2NhbHMsIGNvbnRlbnQubG9jYWxzKSkge1xuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb2xkTG9jYWxzID0gY29udGVudC5sb2NhbHM7XG5cbiAgICAgICAgICAgICAgdXBkYXRlKGNvbnRlbnQpO1xuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../packages/codesandbox-theme-docs/dist/style.css\n"));

/***/ }),

/***/ "./src/styles.css":
/*!************************!*\
  !*** ./src/styles.css ***!
  \************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var api = __webpack_require__(/*! !../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ \"../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !!../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[1]!../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[2]!./styles.css */ \"../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[1]!../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[2]!./src/styles.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function(element) {\n                    // By default, style-loader injects CSS into the bottom\n                    // of <head>. This causes ordering problems between dev\n                    // and prod. To fix this, we render a <noscript> tag as\n                    // an anchor for the styles to be placed before. These\n                    // styles will be applied _before_ <style jsx global>.\n                    // These elements should always exist. If they do not,\n                    // this code should fail.\n                    var anchorElement = document.querySelector(\"#__next_css__DO_NOT_USE__\");\n                    var parentNode = anchorElement.parentNode// Normally <head>\n                    ;\n                    // Each style tag should be placed right before our\n                    // anchor. By inserting before and not after, we do not\n                    // need to track the last inserted element.\n                    parentNode.insertBefore(element, anchorElement);\n                };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (true) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n    if (!a && b || a && !b) {\n        return false;\n    }\n    let p;\n    for(p in a){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (a[p] !== b[p]) {\n            return false;\n        }\n    }\n    for(p in b){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (!a[p]) {\n            return false;\n        }\n    }\n    return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      /*! !!../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[1]!../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[2]!./styles.css */ \"../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[1]!../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[2]!./src/styles.css\",\n      function () {\n        content = __webpack_require__(/*! !!../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[1]!../../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[2]!./styles.css */ \"../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[1]!../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[7].oneOf[14].use[2]!./src/styles.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3R5bGVzLmNzcyIsIm1hcHBpbmdzIjoiQUFBQSxVQUFVLG1CQUFPLENBQUMsc1hBQTBMO0FBQzVNLDBCQUEwQixtQkFBTyxDQUFDLDB5QkFBb1o7O0FBRXRiOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUFHQSxJQUFJLElBQVU7QUFDZCx5QkFBeUIsVUFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSSxpQkFBaUI7QUFDckIsTUFBTSwweUJBQW9aO0FBQzFaO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsMHlCQUFvWjs7QUFFOWE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLFVBQVU7O0FBRTFCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRSxVQUFVO0FBQ1o7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3N0eWxlcy5jc3M/NTRhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4yLjE1X3JlYWN0LWRvbUAxOC4zLjFfcmVhY3RAMTguMy4xX19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1zdHlsZS1sb2FkZXIvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuMTVfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1s3XS5vbmVPZlsxNF0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuMTVfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbN10ub25lT2ZbMTRdLnVzZVsyXSEuL3N0eWxlcy5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQsIHN0eWxlLWxvYWRlciBpbmplY3RzIENTUyBpbnRvIHRoZSBib3R0b21cbiAgICAgICAgICAgICAgICAgICAgLy8gb2YgPGhlYWQ+LiBUaGlzIGNhdXNlcyBvcmRlcmluZyBwcm9ibGVtcyBiZXR3ZWVuIGRldlxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgcHJvZC4gVG8gZml4IHRoaXMsIHdlIHJlbmRlciBhIDxub3NjcmlwdD4gdGFnIGFzXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuIGFuY2hvciBmb3IgdGhlIHN0eWxlcyB0byBiZSBwbGFjZWQgYmVmb3JlLiBUaGVzZVxuICAgICAgICAgICAgICAgICAgICAvLyBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIF9iZWZvcmVfIDxzdHlsZSBqc3ggZ2xvYmFsPi5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2UgZWxlbWVudHMgc2hvdWxkIGFsd2F5cyBleGlzdC4gSWYgdGhleSBkbyBub3QsXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgY29kZSBzaG91bGQgZmFpbC5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuY2hvckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI19fbmV4dF9jc3NfX0RPX05PVF9VU0VfX1wiKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBhbmNob3JFbGVtZW50LnBhcmVudE5vZGUvLyBOb3JtYWxseSA8aGVhZD5cbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICAvLyBFYWNoIHN0eWxlIHRhZyBzaG91bGQgYmUgcGxhY2VkIHJpZ2h0IGJlZm9yZSBvdXJcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5jaG9yLiBCeSBpbnNlcnRpbmcgYmVmb3JlIGFuZCBub3QgYWZ0ZXIsIHdlIGRvIG5vdFxuICAgICAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIHRyYWNrIHRoZSBsYXN0IGluc2VydGVkIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIGFuY2hvckVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH07XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cbmlmIChtb2R1bGUuaG90KSB7XG4gIGlmICghY29udGVudC5sb2NhbHMgfHwgbW9kdWxlLmhvdC5pbnZhbGlkYXRlKSB7XG4gICAgdmFyIGlzRXF1YWxMb2NhbHMgPSBmdW5jdGlvbiBpc0VxdWFsTG9jYWxzKGEsIGIsIGlzTmFtZWRFeHBvcnQpIHtcbiAgICBpZiAoIWEgJiYgYiB8fCBhICYmICFiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHA7XG4gICAgZm9yKHAgaW4gYSl7XG4gICAgICAgIGlmIChpc05hbWVkRXhwb3J0ICYmIHAgPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYVtwXSAhPT0gYltwXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvcihwIGluIGIpe1xuICAgICAgICBpZiAoaXNOYW1lZEV4cG9ydCAmJiBwID09PSBcImRlZmF1bHRcIikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhW3BdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuICAgIHZhciBvbGRMb2NhbHMgPSBjb250ZW50LmxvY2FscztcblxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFxuICAgICAgXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuMTVfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1s3XS5vbmVPZlsxNF0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuMTVfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbN10ub25lT2ZbMTRdLnVzZVsyXSEuL3N0eWxlcy5jc3NcIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuMTVfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1s3XS5vbmVPZlsxNF0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuMTVfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbN10ub25lT2ZbMTRdLnVzZVsyXSEuL3N0eWxlcy5jc3NcIik7XG5cbiAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghaXNFcXVhbExvY2FscyhvbGRMb2NhbHMsIGNvbnRlbnQubG9jYWxzKSkge1xuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb2xkTG9jYWxzID0gY29udGVudC5sb2NhbHM7XG5cbiAgICAgICAgICAgICAgdXBkYXRlKGNvbnRlbnQpO1xuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/styles.css\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js":
/*!********************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js ***!
  \********************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nconst isOldIE = function isOldIE() {\n    let memo;\n    return function memorize() {\n        if (typeof memo === \"undefined\") {\n            // Test for IE <= 9 as proposed by Browserhacks\n            // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n            // Tests for existence of standard globals is to allow style-loader\n            // to operate correctly into non-standard environments\n            // @see https://github.com/webpack-contrib/style-loader/issues/177\n            memo = Boolean(window && document && document.all && !window.atob);\n        }\n        return memo;\n    };\n}();\nconst getTargetElement = function() {\n    const memo = {};\n    return function memorize(target) {\n        if (typeof memo[target] === \"undefined\") {\n            let styleTarget = document.querySelector(target);\n            // Special case to return head of iframe instead of iframe itself\n            if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n                try {\n                    // This will throw an exception if access to iframe is blocked\n                    // due to cross-origin restrictions\n                    styleTarget = styleTarget.contentDocument.head;\n                } catch (e) {\n                    // istanbul ignore next\n                    styleTarget = null;\n                }\n            }\n            memo[target] = styleTarget;\n        }\n        return memo[target];\n    };\n}();\nconst stylesInDom = [];\nfunction getIndexByIdentifier(identifier) {\n    let result = -1;\n    for(let i = 0; i < stylesInDom.length; i++){\n        if (stylesInDom[i].identifier === identifier) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\nfunction modulesToDom(list, options) {\n    const idCountMap = {};\n    const identifiers = [];\n    for(let i = 0; i < list.length; i++){\n        const item = list[i];\n        const id = options.base ? item[0] + options.base : item[0];\n        const count = idCountMap[id] || 0;\n        const identifier = id + \" \" + count.toString();\n        idCountMap[id] = count + 1;\n        const index = getIndexByIdentifier(identifier);\n        const obj = {\n            css: item[1],\n            media: item[2],\n            sourceMap: item[3]\n        };\n        if (index !== -1) {\n            stylesInDom[index].references++;\n            stylesInDom[index].updater(obj);\n        } else {\n            stylesInDom.push({\n                identifier: identifier,\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                updater: addStyle(obj, options),\n                references: 1\n            });\n        }\n        identifiers.push(identifier);\n    }\n    return identifiers;\n}\nfunction insertStyleElement(options) {\n    const style = document.createElement(\"style\");\n    const attributes = options.attributes || {};\n    if (typeof attributes.nonce === \"undefined\") {\n        const nonce = // eslint-disable-next-line no-undef\n         true ? __webpack_require__.nc : 0;\n        if (nonce) {\n            attributes.nonce = nonce;\n        }\n    }\n    Object.keys(attributes).forEach(function(key) {\n        style.setAttribute(key, attributes[key]);\n    });\n    if (typeof options.insert === \"function\") {\n        options.insert(style);\n    } else {\n        const target = getTargetElement(options.insert || \"head\");\n        if (!target) {\n            throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n        }\n        target.appendChild(style);\n    }\n    return style;\n}\nfunction removeStyleElement(style) {\n    // istanbul ignore if\n    if (style.parentNode === null) {\n        return false;\n    }\n    style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */ const replaceText = function replaceText() {\n    const textStore = [];\n    return function replace(index, replacement) {\n        textStore[index] = replacement;\n        return textStore.filter(Boolean).join(\"\\n\");\n    };\n}();\nfunction applyToSingletonTag(style, index, remove, obj) {\n    const css = remove ? \"\" : obj.media ? \"@media \" + obj.media + \" {\" + obj.css + \"}\" : obj.css;\n    // For old IE\n    /* istanbul ignore if  */ if (style.styleSheet) {\n        style.styleSheet.cssText = replaceText(index, css);\n    } else {\n        const cssNode = document.createTextNode(css);\n        const childNodes = style.childNodes;\n        if (childNodes[index]) {\n            style.removeChild(childNodes[index]);\n        }\n        if (childNodes.length) {\n            style.insertBefore(cssNode, childNodes[index]);\n        } else {\n            style.appendChild(cssNode);\n        }\n    }\n}\nfunction applyToTag(style, _options, obj) {\n    let css = obj.css;\n    const media = obj.media;\n    const sourceMap = obj.sourceMap;\n    if (media) {\n        style.setAttribute(\"media\", media);\n    } else {\n        style.removeAttribute(\"media\");\n    }\n    if (sourceMap && typeof btoa !== \"undefined\") {\n        css += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n    }\n    // For old IE\n    /* istanbul ignore if  */ if (style.styleSheet) {\n        style.styleSheet.cssText = css;\n    } else {\n        while(style.firstChild){\n            style.removeChild(style.firstChild);\n        }\n        style.appendChild(document.createTextNode(css));\n    }\n}\nlet singleton = null;\nlet singletonCounter = 0;\nfunction addStyle(obj, options) {\n    let style;\n    let update;\n    let remove;\n    if (options.singleton) {\n        const styleIndex = singletonCounter++;\n        style = singleton || (singleton = insertStyleElement(options));\n        update = applyToSingletonTag.bind(null, style, styleIndex, false);\n        remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n    } else {\n        style = insertStyleElement(options);\n        update = applyToTag.bind(null, style, options);\n        remove = function() {\n            removeStyleElement(style);\n        };\n    }\n    update(obj);\n    return function updateStyle(newObj) {\n        if (newObj) {\n            if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n                return;\n            }\n            update(obj = newObj);\n        } else {\n            remove();\n        }\n    };\n}\nmodule.exports = function(list, options) {\n    options = options || {};\n    // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n    // tags it will allow on a page\n    if (!options.singleton && typeof options.singleton !== \"boolean\") {\n        options.singleton = isOldIE();\n    }\n    list = list || [];\n    let lastIdentifiers = modulesToDom(list, options);\n    return function update(newList) {\n        newList = newList || [];\n        if (Object.prototype.toString.call(newList) !== \"[object Array]\") {\n            return;\n        }\n        for(let i = 0; i < lastIdentifiers.length; i++){\n            const identifier = lastIdentifiers[i];\n            const index = getIndexByIdentifier(identifier);\n            stylesInDom[index].references--;\n        }\n        const newLastIdentifiers = modulesToDom(newList, options);\n        for(let i = 0; i < lastIdentifiers.length; i++){\n            const identifier = lastIdentifiers[i];\n            const index = getIndexByIdentifier(identifier);\n            if (stylesInDom[index].references === 0) {\n                stylesInDom[index].updater();\n                stylesInDom.splice(index, 1);\n            }\n        }\n        lastIdentifiers = newLastIdentifiers;\n    };\n};\n\n//# sourceMappingURL=injectStylesIntoStyleTag.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\n"));

/***/ }),

/***/ "./src/pages/_app.tsx":
/*!****************************!*\
  !*** ./src/pages/_app.tsx ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Nextra; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"../../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var amplitude_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! amplitude-js */ \"../../node_modules/.pnpm/amplitude-js@8.21.9/node_modules/amplitude-js/amplitude.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"../../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var codesandbox_theme_docs_style_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! codesandbox-theme-docs/style.css */ \"../../packages/codesandbox-theme-docs/dist/style.css\");\n/* harmony import */ var codesandbox_theme_docs_style_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(codesandbox_theme_docs_style_css__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../styles.css */ \"./src/styles.css\");\n/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_styles_css__WEBPACK_IMPORTED_MODULE_4__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/polyfills/process.js\");\n/* eslint-disable @typescript-eslint/no-explicit-any */ \nvar _s = $RefreshSig$();\n\n\n\n\nconst API_KEY = process.env.NEXT_PUBLIC_AMPLITUDE_API_KEY;\nif (API_KEY && true) {\n    amplitude_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getInstance().init(API_KEY);\n}\nfunction Nextra(param) {\n    let { Component, pageProps } = param;\n    _s();\n    const getLayout = Component.getLayout || ((page)=>page);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        amplitude_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getInstance().logEvent(\"pageview\", {\n            path: window.location.href,\n            source: \"sandpack-docs\"\n        });\n    }, []);\n    return getLayout(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n        ...pageProps\n    }, void 0, false, {\n        fileName: \"/Users/moonsky/Workspaces/moon/moonsky-admin/docs-press/docs/sandpack/src/pages/_app.tsx\",\n        lineNumber: 23,\n        columnNumber: 20\n    }, this));\n}\n_s(Nextra, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Nextra;\nvar _c;\n$RefreshReg$(_c, \"Nextra\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGFnZXMvX2FwcC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxREFBcUQ7O0FBQ2hCO0FBQ0g7QUFDUTtBQUNuQjtBQUV2QixNQUFNRSxVQUFVQyxPQUFPQSxDQUFDQyxHQUFHLENBQUNDLDZCQUE2QjtBQUV6RCxJQUFJSCxXQUFXQyxJQUFlLEVBQUU7SUFDOUJILGdFQUFxQixHQUFHUSxJQUFJLENBQUNOO0FBQy9CO0FBRWUsU0FBU08sT0FBTyxLQUF3QjtRQUF4QixFQUFFQyxTQUFTLEVBQUVDLFNBQVMsRUFBRSxHQUF4Qjs7SUFDN0IsTUFBTUMsWUFBWUYsVUFBVUUsU0FBUyxJQUFLLEVBQUNDLE9BQWNBLElBQUc7SUFFNURaLGdEQUFTQSxDQUFDO1FBQ1JELGdFQUFxQixHQUFHYyxRQUFRLENBQUMsWUFBWTtZQUMzQ0MsTUFBTUMsT0FBT0MsUUFBUSxDQUFDQyxJQUFJO1lBQzFCQyxRQUFRO1FBQ1Y7SUFDRixHQUFHLEVBQUU7SUFFTCxPQUFPUCx3QkFBVSw4REFBQ0Y7UUFBVyxHQUFHQyxTQUFTOzs7Ozs7QUFDM0M7R0FYd0JGO0tBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9wYWdlcy9fYXBwLnRzeD9mOWQ2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmltcG9ydCBhbXBsaXR1ZGUgZnJvbSBcImFtcGxpdHVkZS1qc1wiO1xuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgXCJjb2Rlc2FuZGJveC10aGVtZS1kb2NzL3N0eWxlLmNzc1wiO1xuaW1wb3J0IFwiLi4vc3R5bGVzLmNzc1wiO1xuXG5jb25zdCBBUElfS0VZID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQU1QTElUVURFX0FQSV9LRVk7XG5cbmlmIChBUElfS0VZICYmIHByb2Nlc3MuYnJvd3Nlcikge1xuICBhbXBsaXR1ZGUuZ2V0SW5zdGFuY2UoKS5pbml0KEFQSV9LRVkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOZXh0cmEoeyBDb21wb25lbnQsIHBhZ2VQcm9wcyB9KTogYW55IHtcbiAgY29uc3QgZ2V0TGF5b3V0ID0gQ29tcG9uZW50LmdldExheW91dCB8fCAoKHBhZ2UpOiBhbnkgPT4gcGFnZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBhbXBsaXR1ZGUuZ2V0SW5zdGFuY2UoKS5sb2dFdmVudChcInBhZ2V2aWV3XCIsIHtcbiAgICAgIHBhdGg6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgc291cmNlOiBcInNhbmRwYWNrLWRvY3NcIixcbiAgICB9KTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiBnZXRMYXlvdXQoPENvbXBvbmVudCB7Li4ucGFnZVByb3BzfSAvPik7XG59XG4iXSwibmFtZXMiOlsiYW1wbGl0dWRlIiwidXNlRWZmZWN0IiwiQVBJX0tFWSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19BTVBMSVRVREVfQVBJX0tFWSIsImJyb3dzZXIiLCJnZXRJbnN0YW5jZSIsImluaXQiLCJOZXh0cmEiLCJDb21wb25lbnQiLCJwYWdlUHJvcHMiLCJnZXRMYXlvdXQiLCJwYWdlIiwibG9nRXZlbnQiLCJwYXRoIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwic291cmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/pages/_app.tsx\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/process/browser.js":
/*!********************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/process/browser.js ***!
  \********************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTQuMi4xNV9yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV9fcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzcy9icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxZQUFZLE9BQU8sZ0JBQWdCLG1CQUFtQixNQUFNLE1BQU0sNEJBQTRCLG1EQUFtRCwrQkFBK0IscURBQXFELFlBQVksSUFBSSxtQ0FBbUMsYUFBYSxLQUFLLG9CQUFvQixTQUFTLG1CQUFtQixJQUFJLHFDQUFxQyxlQUFlLEtBQUssdUJBQXVCLFNBQVMsdUJBQXVCLElBQUksdUJBQXVCLG1CQUFtQix1QkFBdUIsMkNBQTJDLGFBQWEsdUJBQXVCLElBQUksY0FBYyxTQUFTLElBQUksd0JBQXdCLFNBQVMsMEJBQTBCLDRCQUE0QixxQkFBcUIsdUJBQXVCLGdEQUFnRCxlQUFlLHVCQUF1QixJQUFJLFlBQVksU0FBUyxJQUFJLHNCQUFzQixTQUFTLHdCQUF3QixTQUFTLFlBQVksTUFBTSxTQUFTLDJCQUEyQixXQUFXLE9BQU8sUUFBUSxhQUFhLGNBQWMsS0FBSyxLQUFLLGFBQWEsY0FBYyxzQkFBc0IsTUFBTSxPQUFPLGtDQUFrQyxPQUFPLGVBQWUsU0FBUyxJQUFJLEtBQUssYUFBYSxNQUFNLFlBQVksS0FBSyxXQUFXLE9BQU8sUUFBUSxtQkFBbUIsdUJBQXVCLG9DQUFvQyx1QkFBdUIsWUFBWSxtQkFBbUIsS0FBSyxxQkFBcUIsc0JBQXNCLHFCQUFxQix5QkFBeUIsbUJBQW1CLFdBQVcsYUFBYSw4QkFBOEIsaUNBQWlDLGtCQUFrQixlQUFlLFNBQVMsVUFBVSxhQUFhLGNBQWMsaUJBQWlCLFVBQVUsbUJBQW1CLFlBQVksV0FBVyxzQkFBc0IsMEJBQTBCLFlBQVksdUJBQXVCLDJCQUEyQix3QkFBd0IsVUFBVSxzQkFBc0IscURBQXFELGlCQUFpQixXQUFXLG9CQUFvQixtREFBbUQsbUJBQW1CLFlBQVksU0FBUyxnQ0FBZ0MsV0FBVyxrQkFBa0IsaUJBQWlCLFlBQVksWUFBWSxXQUFXLElBQUksc0NBQXNDLFFBQVEsUUFBUSxpQkFBaUIsaUJBQWlCLG1FQUFtRSxTQUFTLEtBQUssK0JBQStCLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTQuMi4xNV9yZWFjdC1kb21AMTguMy4xX3JlYWN0QDE4LjMuMV9fcmVhY3RAMTguMy4xL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcHJvY2Vzcy9icm93c2VyLmpzP2I1NDQiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7dmFyIGU9ezIyOTpmdW5jdGlvbihlKXt2YXIgdD1lLmV4cG9ydHM9e307dmFyIHI7dmFyIG47ZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpe3Rocm93IG5ldyBFcnJvcihcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCgpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX0oZnVuY3Rpb24oKXt0cnl7aWYodHlwZW9mIHNldFRpbWVvdXQ9PT1cImZ1bmN0aW9uXCIpe3I9c2V0VGltZW91dH1lbHNle3I9ZGVmYXVsdFNldFRpbW91dH19Y2F0Y2goZSl7cj1kZWZhdWx0U2V0VGltb3V0fXRyeXtpZih0eXBlb2YgY2xlYXJUaW1lb3V0PT09XCJmdW5jdGlvblwiKXtuPWNsZWFyVGltZW91dH1lbHNle249ZGVmYXVsdENsZWFyVGltZW91dH19Y2F0Y2goZSl7bj1kZWZhdWx0Q2xlYXJUaW1lb3V0fX0pKCk7ZnVuY3Rpb24gcnVuVGltZW91dChlKXtpZihyPT09c2V0VGltZW91dCl7cmV0dXJuIHNldFRpbWVvdXQoZSwwKX1pZigocj09PWRlZmF1bHRTZXRUaW1vdXR8fCFyKSYmc2V0VGltZW91dCl7cj1zZXRUaW1lb3V0O3JldHVybiBzZXRUaW1lb3V0KGUsMCl9dHJ5e3JldHVybiByKGUsMCl9Y2F0Y2godCl7dHJ5e3JldHVybiByLmNhbGwobnVsbCxlLDApfWNhdGNoKHQpe3JldHVybiByLmNhbGwodGhpcyxlLDApfX19ZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KGUpe2lmKG49PT1jbGVhclRpbWVvdXQpe3JldHVybiBjbGVhclRpbWVvdXQoZSl9aWYoKG49PT1kZWZhdWx0Q2xlYXJUaW1lb3V0fHwhbikmJmNsZWFyVGltZW91dCl7bj1jbGVhclRpbWVvdXQ7cmV0dXJuIGNsZWFyVGltZW91dChlKX10cnl7cmV0dXJuIG4oZSl9Y2F0Y2godCl7dHJ5e3JldHVybiBuLmNhbGwobnVsbCxlKX1jYXRjaCh0KXtyZXR1cm4gbi5jYWxsKHRoaXMsZSl9fX12YXIgaT1bXTt2YXIgbz1mYWxzZTt2YXIgdTt2YXIgYT0tMTtmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKXtpZighb3x8IXUpe3JldHVybn1vPWZhbHNlO2lmKHUubGVuZ3RoKXtpPXUuY29uY2F0KGkpfWVsc2V7YT0tMX1pZihpLmxlbmd0aCl7ZHJhaW5RdWV1ZSgpfX1mdW5jdGlvbiBkcmFpblF1ZXVlKCl7aWYobyl7cmV0dXJufXZhciBlPXJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtvPXRydWU7dmFyIHQ9aS5sZW5ndGg7d2hpbGUodCl7dT1pO2k9W107d2hpbGUoKythPHQpe2lmKHUpe3VbYV0ucnVuKCl9fWE9LTE7dD1pLmxlbmd0aH11PW51bGw7bz1mYWxzZTtydW5DbGVhclRpbWVvdXQoZSl9dC5uZXh0VGljaz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpe2Zvcih2YXIgcj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspe3Rbci0xXT1hcmd1bWVudHNbcl19fWkucHVzaChuZXcgSXRlbShlLHQpKTtpZihpLmxlbmd0aD09PTEmJiFvKXtydW5UaW1lb3V0KGRyYWluUXVldWUpfX07ZnVuY3Rpb24gSXRlbShlLHQpe3RoaXMuZnVuPWU7dGhpcy5hcnJheT10fUl0ZW0ucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9O3QudGl0bGU9XCJicm93c2VyXCI7dC5icm93c2VyPXRydWU7dC5lbnY9e307dC5hcmd2PVtdO3QudmVyc2lvbj1cIlwiO3QudmVyc2lvbnM9e307ZnVuY3Rpb24gbm9vcCgpe310Lm9uPW5vb3A7dC5hZGRMaXN0ZW5lcj1ub29wO3Qub25jZT1ub29wO3Qub2ZmPW5vb3A7dC5yZW1vdmVMaXN0ZW5lcj1ub29wO3QucmVtb3ZlQWxsTGlzdGVuZXJzPW5vb3A7dC5lbWl0PW5vb3A7dC5wcmVwZW5kTGlzdGVuZXI9bm9vcDt0LnByZXBlbmRPbmNlTGlzdGVuZXI9bm9vcDt0Lmxpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm5bXX07dC5iaW5kaW5nPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpfTt0LmN3ZD1mdW5jdGlvbigpe3JldHVyblwiL1wifTt0LmNoZGlyPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX07dC51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX19O3ZhciB0PXt9O2Z1bmN0aW9uIF9fbmNjd3Bja19yZXF1aXJlX18ocil7dmFyIG49dFtyXTtpZihuIT09dW5kZWZpbmVkKXtyZXR1cm4gbi5leHBvcnRzfXZhciBpPXRbcl09e2V4cG9ydHM6e319O3ZhciBvPXRydWU7dHJ5e2Vbcl0oaSxpLmV4cG9ydHMsX19uY2N3cGNrX3JlcXVpcmVfXyk7bz1mYWxzZX1maW5hbGx5e2lmKG8pZGVsZXRlIHRbcl19cmV0dXJuIGkuZXhwb3J0c31pZih0eXBlb2YgX19uY2N3cGNrX3JlcXVpcmVfXyE9PVwidW5kZWZpbmVkXCIpX19uY2N3cGNrX3JlcXVpcmVfXy5hYj1fX2Rpcm5hbWUrXCIvXCI7dmFyIHI9X19uY2N3cGNrX3JlcXVpcmVfXygyMjkpO21vZHVsZS5leHBvcnRzPXJ9KSgpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/process/browser.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/react@18.3.1/node_modules/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/react@18.3.1/node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! react */ \"../../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_MODULE_REFERENCE;\n\n{\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n}\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nvar didWarnAboutKeySpread = {};\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    {\n      if (hasOwnProperty.call(props, 'key')) {\n        var componentName = getComponentNameFromType(type);\n        var keys = Object.keys(props).filter(function (k) {\n          return k !== 'key';\n        });\n        var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n        if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n          var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n          error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n          didWarnAboutKeySpread[componentName + beforeExample] = true;\n        }\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV$1 =  jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV$1;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/react@18.3.1/node_modules/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js":
/*!***********************************************************************************!*\
  !*** ../../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js ***!
  \***********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"../../node_modules/.pnpm/react@18.3.1/node_modules/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSwyTEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz8yMTM1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/decode-uri-component@0.4.1/node_modules/decode-uri-component/index.js":
/*!******************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/decode-uri-component@0.4.1/node_modules/decode-uri-component/index.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ decodeUriComponent; }\n/* harmony export */ });\nconst token = '%[a-f0-9]{2}';\nconst singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');\nconst multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn [decodeURIComponent(components.join(''))];\n\t} catch {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tconst left = components.slice(0, split);\n\tconst right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch {\n\t\tlet tokens = input.match(singleMatcher) || [];\n\n\t\tfor (let i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher) || [];\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tconst replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD',\n\t};\n\n\tlet match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch {\n\t\t\tconst result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tconst entries = Object.keys(replaceMap);\n\n\tfor (const key of entries) {\n\t\t// Replace all decoded components\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nfunction decodeUriComponent(encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2RlY29kZS11cmktY29tcG9uZW50QDAuNC4xL25vZGVfbW9kdWxlcy9kZWNvZGUtdXJpLWNvbXBvbmVudC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEseUJBQXlCLEVBQUU7QUFDM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsa0JBQWtCLG1CQUFtQjtBQUNyQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9kZWNvZGUtdXJpLWNvbXBvbmVudEAwLjQuMS9ub2RlX21vZHVsZXMvZGVjb2RlLXVyaS1jb21wb25lbnQvaW5kZXguanM/ODkxZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0b2tlbiA9ICclW2EtZjAtOV17Mn0nO1xuY29uc3Qgc2luZ2xlTWF0Y2hlciA9IG5ldyBSZWdFeHAoJygnICsgdG9rZW4gKyAnKXwoW14lXSs/KScsICdnaScpO1xuY29uc3QgbXVsdGlNYXRjaGVyID0gbmV3IFJlZ0V4cCgnKCcgKyB0b2tlbiArICcpKycsICdnaScpO1xuXG5mdW5jdGlvbiBkZWNvZGVDb21wb25lbnRzKGNvbXBvbmVudHMsIHNwbGl0KSB7XG5cdHRyeSB7XG5cdFx0Ly8gVHJ5IHRvIGRlY29kZSB0aGUgZW50aXJlIHN0cmluZyBmaXJzdFxuXHRcdHJldHVybiBbZGVjb2RlVVJJQ29tcG9uZW50KGNvbXBvbmVudHMuam9pbignJykpXTtcblx0fSBjYXRjaCB7XG5cdFx0Ly8gRG8gbm90aGluZ1xuXHR9XG5cblx0aWYgKGNvbXBvbmVudHMubGVuZ3RoID09PSAxKSB7XG5cdFx0cmV0dXJuIGNvbXBvbmVudHM7XG5cdH1cblxuXHRzcGxpdCA9IHNwbGl0IHx8IDE7XG5cblx0Ly8gU3BsaXQgdGhlIGFycmF5IGluIDIgcGFydHNcblx0Y29uc3QgbGVmdCA9IGNvbXBvbmVudHMuc2xpY2UoMCwgc3BsaXQpO1xuXHRjb25zdCByaWdodCA9IGNvbXBvbmVudHMuc2xpY2Uoc3BsaXQpO1xuXG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoW10sIGRlY29kZUNvbXBvbmVudHMobGVmdCksIGRlY29kZUNvbXBvbmVudHMocmlnaHQpKTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG5cdH0gY2F0Y2gge1xuXHRcdGxldCB0b2tlbnMgPSBpbnB1dC5tYXRjaChzaW5nbGVNYXRjaGVyKSB8fCBbXTtcblxuXHRcdGZvciAobGV0IGkgPSAxOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpbnB1dCA9IGRlY29kZUNvbXBvbmVudHModG9rZW5zLCBpKS5qb2luKCcnKTtcblxuXHRcdFx0dG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcikgfHwgW107XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChpbnB1dCkge1xuXHQvLyBLZWVwIHRyYWNrIG9mIGFsbCB0aGUgcmVwbGFjZW1lbnRzIGFuZCBwcmVmaWxsIHRoZSBtYXAgd2l0aCB0aGUgYEJPTWBcblx0Y29uc3QgcmVwbGFjZU1hcCA9IHtcblx0XHQnJUZFJUZGJzogJ1xcdUZGRkRcXHVGRkZEJyxcblx0XHQnJUZGJUZFJzogJ1xcdUZGRkRcXHVGRkZEJyxcblx0fTtcblxuXHRsZXQgbWF0Y2ggPSBtdWx0aU1hdGNoZXIuZXhlYyhpbnB1dCk7XG5cdHdoaWxlIChtYXRjaCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBEZWNvZGUgYXMgYmlnIGNodW5rcyBhcyBwb3NzaWJsZVxuXHRcdFx0cmVwbGFjZU1hcFttYXRjaFswXV0gPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMF0pO1xuXHRcdH0gY2F0Y2gge1xuXHRcdFx0Y29uc3QgcmVzdWx0ID0gZGVjb2RlKG1hdGNoWzBdKTtcblxuXHRcdFx0aWYgKHJlc3VsdCAhPT0gbWF0Y2hbMF0pIHtcblx0XHRcdFx0cmVwbGFjZU1hcFttYXRjaFswXV0gPSByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bWF0Y2ggPSBtdWx0aU1hdGNoZXIuZXhlYyhpbnB1dCk7XG5cdH1cblxuXHQvLyBBZGQgYCVDMmAgYXQgdGhlIGVuZCBvZiB0aGUgbWFwIHRvIG1ha2Ugc3VyZSBpdCBkb2VzIG5vdCByZXBsYWNlIHRoZSBjb21iaW5hdG9yIGJlZm9yZSBldmVyeXRoaW5nIGVsc2Vcblx0cmVwbGFjZU1hcFsnJUMyJ10gPSAnXFx1RkZGRCc7XG5cblx0Y29uc3QgZW50cmllcyA9IE9iamVjdC5rZXlzKHJlcGxhY2VNYXApO1xuXG5cdGZvciAoY29uc3Qga2V5IG9mIGVudHJpZXMpIHtcblx0XHQvLyBSZXBsYWNlIGFsbCBkZWNvZGVkIGNvbXBvbmVudHNcblx0XHRpbnB1dCA9IGlucHV0LnJlcGxhY2UobmV3IFJlZ0V4cChrZXksICdnJyksIHJlcGxhY2VNYXBba2V5XSk7XG5cdH1cblxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlY29kZVVyaUNvbXBvbmVudChlbmNvZGVkVVJJKSB7XG5cdGlmICh0eXBlb2YgZW5jb2RlZFVSSSAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBgZW5jb2RlZFVSSWAgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCwgZ290IGAnICsgdHlwZW9mIGVuY29kZWRVUkkgKyAnYCcpO1xuXHR9XG5cblx0dHJ5IHtcblx0XHQvLyBUcnkgdGhlIGJ1aWx0IGluIGRlY29kZXIgZmlyc3Rcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZWRVUkkpO1xuXHR9IGNhdGNoIHtcblx0XHQvLyBGYWxsYmFjayB0byBhIG1vcmUgYWR2YW5jZWQgZGVjb2RlclxuXHRcdHJldHVybiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/decode-uri-component@0.4.1/node_modules/decode-uri-component/index.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/filter-obj@5.1.0/node_modules/filter-obj/index.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/.pnpm/filter-obj@5.1.0/node_modules/filter-obj/index.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   excludeKeys: function() { return /* binding */ excludeKeys; },\n/* harmony export */   includeKeys: function() { return /* binding */ includeKeys; }\n/* harmony export */ });\nfunction includeKeys(object, predicate) {\n\tconst result = {};\n\n\tif (Array.isArray(predicate)) {\n\t\tfor (const key of predicate) {\n\t\t\tconst descriptor = Object.getOwnPropertyDescriptor(object, key);\n\t\t\tif (descriptor?.enumerable) {\n\t\t\t\tObject.defineProperty(result, key, descriptor);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// `Reflect.ownKeys()` is required to retrieve symbol properties\n\t\tfor (const key of Reflect.ownKeys(object)) {\n\t\t\tconst descriptor = Object.getOwnPropertyDescriptor(object, key);\n\t\t\tif (descriptor.enumerable) {\n\t\t\t\tconst value = object[key];\n\t\t\t\tif (predicate(key, value, object)) {\n\t\t\t\t\tObject.defineProperty(result, key, descriptor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction excludeKeys(object, predicate) {\n\tif (Array.isArray(predicate)) {\n\t\tconst set = new Set(predicate);\n\t\treturn includeKeys(object, key => !set.has(key));\n\t}\n\n\treturn includeKeys(object, (key, value, object) => !predicate(key, value, object));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZpbHRlci1vYmpANS4xLjAvbm9kZV9tb2R1bGVzL2ZpbHRlci1vYmovaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9maWx0ZXItb2JqQDUuMS4wL25vZGVfbW9kdWxlcy9maWx0ZXItb2JqL2luZGV4LmpzPzVkNmYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGluY2x1ZGVLZXlzKG9iamVjdCwgcHJlZGljYXRlKSB7XG5cdGNvbnN0IHJlc3VsdCA9IHt9O1xuXG5cdGlmIChBcnJheS5pc0FycmF5KHByZWRpY2F0ZSkpIHtcblx0XHRmb3IgKGNvbnN0IGtleSBvZiBwcmVkaWNhdGUpIHtcblx0XHRcdGNvbnN0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwga2V5KTtcblx0XHRcdGlmIChkZXNjcmlwdG9yPy5lbnVtZXJhYmxlKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzY3JpcHRvcik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIGBSZWZsZWN0Lm93bktleXMoKWAgaXMgcmVxdWlyZWQgdG8gcmV0cmlldmUgc3ltYm9sIHByb3BlcnRpZXNcblx0XHRmb3IgKGNvbnN0IGtleSBvZiBSZWZsZWN0Lm93bktleXMob2JqZWN0KSkge1xuXHRcdFx0Y29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBrZXkpO1xuXHRcdFx0aWYgKGRlc2NyaXB0b3IuZW51bWVyYWJsZSkge1xuXHRcdFx0XHRjb25zdCB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXHRcdFx0XHRpZiAocHJlZGljYXRlKGtleSwgdmFsdWUsIG9iamVjdCkpIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2NyaXB0b3IpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4Y2x1ZGVLZXlzKG9iamVjdCwgcHJlZGljYXRlKSB7XG5cdGlmIChBcnJheS5pc0FycmF5KHByZWRpY2F0ZSkpIHtcblx0XHRjb25zdCBzZXQgPSBuZXcgU2V0KHByZWRpY2F0ZSk7XG5cdFx0cmV0dXJuIGluY2x1ZGVLZXlzKG9iamVjdCwga2V5ID0+ICFzZXQuaGFzKGtleSkpO1xuXHR9XG5cblx0cmV0dXJuIGluY2x1ZGVLZXlzKG9iamVjdCwgKGtleSwgdmFsdWUsIG9iamVjdCkgPT4gIXByZWRpY2F0ZShrZXksIHZhbHVlLCBvYmplY3QpKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/filter-obj@5.1.0/node_modules/filter-obj/index.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/query-string@8.1.0/node_modules/query-string/base.js":
/*!*************************************************************************************!*\
  !*** ../../node_modules/.pnpm/query-string@8.1.0/node_modules/query-string/base.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exclude: function() { return /* binding */ exclude; },\n/* harmony export */   extract: function() { return /* binding */ extract; },\n/* harmony export */   parse: function() { return /* binding */ parse; },\n/* harmony export */   parseUrl: function() { return /* binding */ parseUrl; },\n/* harmony export */   pick: function() { return /* binding */ pick; },\n/* harmony export */   stringify: function() { return /* binding */ stringify; },\n/* harmony export */   stringifyUrl: function() { return /* binding */ stringifyUrl; }\n/* harmony export */ });\n/* harmony import */ var decode_uri_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! decode-uri-component */ \"../../node_modules/.pnpm/decode-uri-component@0.4.1/node_modules/decode-uri-component/index.js\");\n/* harmony import */ var split_on_first__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! split-on-first */ \"../../node_modules/.pnpm/split-on-first@3.0.0/node_modules/split-on-first/index.js\");\n/* harmony import */ var filter_obj__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! filter-obj */ \"../../node_modules/.pnpm/filter-obj@5.1.0/node_modules/filter-obj/index.js\");\n\n\n\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\n// eslint-disable-next-line unicorn/prefer-code-point\nconst strictUriEncode = string => encodeURIComponent(string).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result, [encode(key, options), '[', index, ']'].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\t[encode(key, options), '[]'].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[]=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'colon-list-separator': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\t[encode(key, options), ':list='].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), ':list=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSep = options.arrayFormat === 'bracket-separator'\n\t\t\t\t? '[]='\n\t\t\t\t: '=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\tencode(key, options),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], value];\n\t\t\t};\n\t\t}\n\n\t\tcase 'colon-list-separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], value];\n\t\t\t};\n\t\t}\n\n\t\tcase 'comma':\n\t\tcase 'separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : (value === null ? value : decode(value, options));\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket-separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null\n\t\t\t\t\t? []\n\t\t\t\t\t: value.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], ...arrayValue];\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...[accumulator[key]].flat(), value];\n\t\t\t};\n\t\t}\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn (0,decode_uri_component__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parse(query, options) {\n\toptions = {\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false,\n\t\t...options,\n\t};\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst returnValue = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn returnValue;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn returnValue;\n\t}\n\n\tfor (const parameter of query.split('&')) {\n\t\tif (parameter === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst parameter_ = options.decode ? parameter.replace(/\\+/g, ' ') : parameter;\n\n\t\tlet [key, value] = (0,split_on_first__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(parameter_, '=');\n\n\t\tif (key === undefined) {\n\t\t\tkey = parameter_;\n\t\t}\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : (['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options));\n\t\tformatter(decode(key, options), value, returnValue);\n\t}\n\n\tfor (const [key, value] of Object.entries(returnValue)) {\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const [key2, value2] of Object.entries(value)) {\n\t\t\t\tvalue[key2] = parseValue(value2, options);\n\t\t\t}\n\t\t} else {\n\t\t\treturnValue[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn returnValue;\n\t}\n\n\t// TODO: Remove the use of `reduce`.\n\t// eslint-disable-next-line unicorn/no-array-reduce\n\treturn (options.sort === true ? Object.keys(returnValue).sort() : Object.keys(returnValue).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = returnValue[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nfunction stringify(object, options) {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = {encode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',', ...options};\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key]))\n\t\t|| (options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const [key, value] of Object.entries(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = value;\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n}\n\nfunction parseUrl(url, options) {\n\toptions = {\n\t\tdecode: true,\n\t\t...options,\n\t};\n\n\tlet [url_, hash] = (0,split_on_first__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(url, '#');\n\n\tif (url_ === undefined) {\n\t\turl_ = url;\n\t}\n\n\treturn {\n\t\turl: url_?.split('?')?.[0] ?? '',\n\t\tquery: parse(extract(url), options),\n\t\t...(options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}),\n\t};\n}\n\nfunction stringifyUrl(object, options) {\n\toptions = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true,\n\t\t...options,\n\t};\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = extract(object.url);\n\n\tconst query = {\n\t\t...parse(queryFromUrl, {sort: false}),\n\t\t...object.query,\n\t};\n\n\tlet queryString = stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\tconst urlObjectForFragmentEncode = new URL(url);\n\t\turlObjectForFragmentEncode.hash = object.fragmentIdentifier;\n\t\thash = options[encodeFragmentIdentifier] ? urlObjectForFragmentEncode.hash : `#${object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n}\n\nfunction pick(input, filter, options) {\n\toptions = {\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false,\n\t\t...options,\n\t};\n\n\tconst {url, query, fragmentIdentifier} = parseUrl(input, options);\n\n\treturn stringifyUrl({\n\t\turl,\n\t\tquery: (0,filter_obj__WEBPACK_IMPORTED_MODULE_2__.includeKeys)(query, filter),\n\t\tfragmentIdentifier,\n\t}, options);\n}\n\nfunction exclude(input, filter, options) {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn pick(input, exclusionFilter, options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/query-string@8.1.0/node_modules/query-string/base.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/query-string@8.1.0/node_modules/query-string/index.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/query-string@8.1.0/node_modules/query-string/index.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"../../node_modules/.pnpm/query-string@8.1.0/node_modules/query-string/base.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_base_js__WEBPACK_IMPORTED_MODULE_0__);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3F1ZXJ5LXN0cmluZ0A4LjEuMC9ub2RlX21vZHVsZXMvcXVlcnktc3RyaW5nL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7O0FBQXlDOztBQUV6QywrREFBZSxxQ0FBVyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcXVlcnktc3RyaW5nQDguMS4wL25vZGVfbW9kdWxlcy9xdWVyeS1zdHJpbmcvaW5kZXguanM/MTQ2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBxdWVyeVN0cmluZyBmcm9tICcuL2Jhc2UuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBxdWVyeVN0cmluZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/query-string@8.1.0/node_modules/query-string/index.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/split-on-first@3.0.0/node_modules/split-on-first/index.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/split-on-first@3.0.0/node_modules/split-on-first/index.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ splitOnFirst; }\n/* harmony export */ });\nfunction splitOnFirst(string, separator) {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (string === '' || separator === '') {\n\t\treturn [];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NwbGl0LW9uLWZpcnN0QDMuMC4wL25vZGVfbW9kdWxlcy9zcGxpdC1vbi1maXJzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc3BsaXQtb24tZmlyc3RAMy4wLjAvbm9kZV9tb2R1bGVzL3NwbGl0LW9uLWZpcnN0L2luZGV4LmpzPzcxMWQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3BsaXRPbkZpcnN0KHN0cmluZywgc2VwYXJhdG9yKSB7XG5cdGlmICghKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBzZXBhcmF0b3IgPT09ICdzdHJpbmcnKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBhcmd1bWVudHMgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCcpO1xuXHR9XG5cblx0aWYgKHN0cmluZyA9PT0gJycgfHwgc2VwYXJhdG9yID09PSAnJykge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXG5cdGNvbnN0IHNlcGFyYXRvckluZGV4ID0gc3RyaW5nLmluZGV4T2Yoc2VwYXJhdG9yKTtcblxuXHRpZiAoc2VwYXJhdG9ySW5kZXggPT09IC0xKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0cmV0dXJuIFtcblx0XHRzdHJpbmcuc2xpY2UoMCwgc2VwYXJhdG9ySW5kZXgpLFxuXHRcdHN0cmluZy5zbGljZShzZXBhcmF0b3JJbmRleCArIHNlcGFyYXRvci5sZW5ndGgpXG5cdF07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/split-on-first@3.0.0/node_modules/split-on-first/index.js\n"));

/***/ }),

/***/ "../../node_modules/.pnpm/tslib@2.7.0/node_modules/tslib/tslib.es6.mjs":
/*!*****************************************************************************!*\
  !*** ../../node_modules/.pnpm/tslib@2.7.0/node_modules/tslib/tslib.es6.mjs ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __addDisposableResource: function() { return /* binding */ __addDisposableResource; },\n/* harmony export */   __assign: function() { return /* binding */ __assign; },\n/* harmony export */   __asyncDelegator: function() { return /* binding */ __asyncDelegator; },\n/* harmony export */   __asyncGenerator: function() { return /* binding */ __asyncGenerator; },\n/* harmony export */   __asyncValues: function() { return /* binding */ __asyncValues; },\n/* harmony export */   __await: function() { return /* binding */ __await; },\n/* harmony export */   __awaiter: function() { return /* binding */ __awaiter; },\n/* harmony export */   __classPrivateFieldGet: function() { return /* binding */ __classPrivateFieldGet; },\n/* harmony export */   __classPrivateFieldIn: function() { return /* binding */ __classPrivateFieldIn; },\n/* harmony export */   __classPrivateFieldSet: function() { return /* binding */ __classPrivateFieldSet; },\n/* harmony export */   __createBinding: function() { return /* binding */ __createBinding; },\n/* harmony export */   __decorate: function() { return /* binding */ __decorate; },\n/* harmony export */   __disposeResources: function() { return /* binding */ __disposeResources; },\n/* harmony export */   __esDecorate: function() { return /* binding */ __esDecorate; },\n/* harmony export */   __exportStar: function() { return /* binding */ __exportStar; },\n/* harmony export */   __extends: function() { return /* binding */ __extends; },\n/* harmony export */   __generator: function() { return /* binding */ __generator; },\n/* harmony export */   __importDefault: function() { return /* binding */ __importDefault; },\n/* harmony export */   __importStar: function() { return /* binding */ __importStar; },\n/* harmony export */   __makeTemplateObject: function() { return /* binding */ __makeTemplateObject; },\n/* harmony export */   __metadata: function() { return /* binding */ __metadata; },\n/* harmony export */   __param: function() { return /* binding */ __param; },\n/* harmony export */   __propKey: function() { return /* binding */ __propKey; },\n/* harmony export */   __read: function() { return /* binding */ __read; },\n/* harmony export */   __rest: function() { return /* binding */ __rest; },\n/* harmony export */   __runInitializers: function() { return /* binding */ __runInitializers; },\n/* harmony export */   __setFunctionName: function() { return /* binding */ __setFunctionName; },\n/* harmony export */   __spread: function() { return /* binding */ __spread; },\n/* harmony export */   __spreadArray: function() { return /* binding */ __spreadArray; },\n/* harmony export */   __spreadArrays: function() { return /* binding */ __spreadArrays; },\n/* harmony export */   __values: function() { return /* binding */ __values; }\n/* harmony export */ });\n/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nfunction __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nfunction __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nfunction __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nfunction __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nfunction __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nfunction __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nfunction __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nfunction __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nfunction __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nfunction __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nfunction __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nfunction __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nfunction __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nfunction __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nfunction __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nfunction __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/tslib@2.7.0/node_modules/tslib/tslib.es6.mjs\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main"], function() { return __webpack_exec__("../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=private-next-pages%2F_app&page=%2F_app!"), __webpack_exec__("../../node_modules/.pnpm/next@14.2.15_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/client/router.js"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);