{"/":{"title":"Introduction","data":{"":"Sandpack is a component toolkit for creating live-running code editing experiences, powered by the online bundler used on CodeSandbox.It provides an open ecosystem of components and utilities that allow you to compile and run modern frameworks in the browser. You can either use one of our predefined components for embedding the CodeSandbox experience into your projects, or you can build your own version of sandpack, on top of our standard components and utilities.As you walk through this guide, you will get deeper into our ecosystem.","getting-started#Getting Started":""}},"/getting-started":{"title":"Install","data":{"":"Install the Sandpack dependency on your project.\n\n\nnpm i @codesandbox/sandpack-react\n\n\n\nyarn add @codesandbox/sandpack-react\n\n\n\npnpm add @codesandbox/sandpack-react\n\n\nAll the components and the bundler are packed inside the Sandpack component, which is a named export of the package. Besides that, the package contains multiple components, utilities and typings.","quickstart#Quickstart":"This should give you a nice code editor with a preview that runs in the browser.","cdn#CDN":"To use Sandpack with CDN, simply include the Sandpack tag in your HTML file and specify the CDN imports inluding Sandpack and its dependencies.\n\n\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\" />\n\n<script type=\"importmap\">\n{\n\"imports\": {\n\"react\": \"https://esm.sh/react@18.2.0\",\n\"react-dom\": \"https://esm.sh/react-dom@18.2.0\",\n\"react-dom/\": \"https://esm.sh/react-dom@18.2.0/\",\n\"@codesandbox/sandpack-react\": \"https://esm.sh/@codesandbox/sandpack-react@2.8.0\"\n}\n}\n</script>\n\n<script type=\"module\">\nimport React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { Sandpack } from \"@codesandbox/sandpack-react\";\n\nconst root = createRoot(document.getElementById(\"root\"));\nconst sandpackComponent = React.createElement(\nSandpack,\n{ template: \"react\" },\nnull\n);\nroot.render(sandpackComponent);\n</script>\n</head>\n\n<body>\n<div id=\"root\"></div>\n</body>\n</html>","next-steps#Next steps":""}},"/quickstart":{"title":"Quickstart","data":{"":"With Sandpack, you can easily create interactive components and test your code in real-time, without leaving your browser. Whether you are a beginner or an experienced developer, you will find Sandpack a valuable and fun tool to use.","1-install#1. Install":"Install the Sandpack dependency on your project.\n\n\nnpm i @codesandbox/sandpack-react\n\n\n\nyarn add @codesandbox/sandpack-react\n\n\n\npnpm i @codesandbox/sandpack-react"}},"/getting-started/usage":{"title":"Usage","data":{"":"The Sandpack component you used in the previous section is called a preset. It wraps all the individual components and provides sensible defaults. Presets make it easy to adopt Sandpack, while offering extensive configurability. The first thing we will look at is how to configure the content that runs inside Sandpack.","templates#Templates":"By default your <Sandpack /> instance starts with a predefined template. Each template contains all the files and dependencies needed to start a project. For instance, the vue template will contain the starter files generated by the vue-cli, and the react template those generated by create-react-app.\n\nThe template property accepts a defined preset list. If the property is not passed, vanilla will be set by default.","files#Files":"Once you've chosen your starter template, you will most likely want to pass custom code into your Sandpack instance. The simplest way to do this, is to add and override files via the files prop.\n\nThe files prop accepts an object, where each key is the relative path of that file in the sandbox folder structure. Files passed in through the files prop override those in the template structure. Since each template uses the same type to define the files, you can overwrite the contents of any of the template files.Keep in mind that the tabs only show the name of the file and not the full path. For instance, if you want to overwrite /index.js in the vanilla template, you need to specify /src/index.js as the corresponding key in the files object. You can check the full paths for each of the templates in the template definitions.\nAvailable Files\nNotice that when passing the files prop, only the content you pass there is available in the file tabs. The other files in the template are still bundled together, but you don't see them anymore.","file-format#File format":"The files prop accepts two formats of object, string or another object, where you can pass other configurations for the file.\n\nIf no active flag is set, the first file will be active by default:\nThe active flag has precendence over the hidden flag. So a file with both\nhidden and active set as true will be visible.","dependencies#Dependencies":"Any template will include the needed dependencies, but you can specify any additional dependencies.","npm-dependencies#NPM Dependencies":"Inside customSetup prop you can pass a dependencies object. The key should be the name of the package, while the value is the version, in exactly the same format as it would be inside package.json.","static-external-resources#Static External Resources":"You can also pass an array of externalResources into the options prop to specify static links to external CSS or JS resources elsewhere on the web. These resources get injected into the head of your HTML and are then globally available. Here's an example using the Tailwind CSS CDN:","advanced-usage#Advanced Usage":"","read-only-mode#Read-only mode":"You can set one, multiple files, or the entire Sandpack as read-only, which will make all files non-editable.Per file:\n<Sandpack\nfiles={{\n\"/App.js\": reactCode,\n\"/button.js\": {\ncode: buttonCode,\nreadOnly: true,\n},\n}}\ntemplate=\"react\"\n/>\nGlobally:\n<Sandpack\noptions={{\nreadOnly: true,\n}}\n/>\nPlus, you can hide the Read-only label which appears on top of the code editor:\n<Sandpack\noptions={{\nreadOnly: true,\nshowReadOnly: false,\n}}\n/>","visiblefiles-and-activefile#visibleFiles and activeFile":"You can override the entire hidden/active system with two settings (visibleFiles and activeFile) inside the\noptions prop.Notice that both options require you to match the exact file paths inside the sandbox, so use with caution as this can quite easily create errors in the long term.\n\n\nWhen visibleFiles or activeFile are set, the hidden and active flags\non the files prop are ignored.","custom-entry-file#Custom Entry File":"Additionally, you can also specify a different entry file for the sandbox. The entry file is the starting point of the bundle process.\n<Sandpack\ntemplate=\"react\"\nfiles={{\n\"/App.js\": `...`,\n}}\ncustomSetup={{\nentry: \"/index.js\",\n}}\n/>\n\nIf you change the path of the entry file, make sure you control all the files\nthat go into the bundle process, as prexisting settings in the template\nmight not work anymore.","fully-custom-setup#Fully Custom Setup":"Sometimes you might not want to start from any of the preset templates. If so, you can pass a full customSetup object that contains everything needed for your custom Sandpack configuration."}},"/getting-started/layout":{"title":"Layout","data":{"":"In this next section, you can read about all the different options for customizing the UI of the Sandpack components that render inside the <Sandpack /> preset.","styling#Styling":"Theming controls the color palette and typography, but you can also append your own custom style to existing Sandpack components.For this, sandpack uses a small package called classer. To customize existing components, you need to map your own classes to the internal sandpack classes. So, while inspecting your Sandpack instance, notice that our components have classes prefixed with sp-.\n<Sandpack\ntheme={theme}\ntemplate=\"react\"\noptions={{\nclasses: {\n\"sp-wrapper\": \"custom-wrapper\",\n\"sp-layout\": \"custom-layout\",\n\"sp-tab-button\": \"custom-tab\",\n},\n}}\n/>\n\nThis pattern is compatible with most modern styling systems, including Tailwind, styled-components and emotion.","bare-components-remove-runtime-styling-or-use-unstyled-components#Bare components, remove runtime styling or use unstyled components":"@codesanbdox/sandpack-react relies on @stitches/core to style its component, which is almost zero-runtime CSS-in-JS framework. However, if you want to get rid of any runtime script or create your own style on top of Sandpack components, we provide a way to return unstyled components, which will eliminate all Sandpack CSS style.To do it, you need to consume the same components from the unstyled subfolder, which doesn't contain the Stitches dependency. For example:\nimport { Sandpack } from \"@codesandbox/sandpack-react/unstyled\";\n\nconst App = () => {\nreturn <Sandpack />\n};","themes#Themes":"The overall style can be set through the theme prop. Sandpack offers a set of predefined options, but individual values can be passed to customize the style of your Sandpack instance. Access the links below to see all themes and learn how to customize them.","options#Options":"Some of the internal components of Sandpack can be configured via the options prop.","layout-mode#Layout mode":"The Sandpack preset component offers three layout modes:\npreview: (default option) which renders an iframe as a preview component;\ntests: which renders a suit-test component;\nconsole: which renders a terminal/console component instead of the preview.","navigator#Navigator":"By default <Sandpack /> will show a refresh button in the lower part of the preview. Using showNavigator you can toggle on a full browser navigator component with: back, forward and refresh buttons as well as an input for the URL.","tabs#Tabs":"File tabs are shown if more than one file is open. But you can force tabs to always be shown/hidden with the showTabs prop. On top of that, the closableTabs prop allows you to add a small close button for each tab, which removes it from the list.","editor-settings#Editor Settings":"There are a few different props for the code editor. showLineNumbers and showInlineErrors will toggle on/off some of the elements of the editor component. By default, line numbers are shown, but errors are not highlighted inline.One useful configuration is the height of the component. We recommend fixed heights, to avoid any layout shift while the bundler is running or as you type in the editor or switch the tab. By default, the height is set to 300px, but you can adjust that with the editorHeight prop.Finally, you can specify the distribution between the width of the editor and that of the preview. The <SandpackLayout /> component arranges the two in a flex layout, distributing the space between the editor and the preview according to this prop. A value of 60 for the editorWidthPercentage will mean the Preview gets 40% of the space.","autorun--auto-reload#Autorun & auto reload":"autorunDetermines whether or not the bundling process should start automatically for a component in Sandpack. By default, when the component gets closer to the viewport or when the page loads and the component is already in the viewport, the bundling process will start automatically. However, if this prop is set to false, the bundling process will only start when triggered manually by the user.autoReloadDetermines whether or not the component should automatically reload when changes are made to the code. When this prop is set to true, any changes made to the code will trigger an automatic reload of the component, allowing the user to see the changes immediately. However, if this prop is set to false, the component will need to be manually reloaded by the user to see the changes.","init-mode#Init mode":"The initMode prop provides a way to control how some components are going to be initialized on the page. For example, <SandpackCodeEditor /> and the <SandpackPreview /> components are quite expensive and might overload memory usage, giving a certain control of when to initialize them.\nimmediate: loads right after the Sandpack instance is created;\nlazy: loads when the Sandpack instance is close to the viewport and keeps it running (this's the default value);\nuser-visible: loads when the Sandpack instance is close to the viewport, but different from lazy, it destroys all instances when it's out of the viewport and mounts again when it's close to the viewport;\n\n\n<Sandpack\noptions={{\ninitMode: \"user-visible\",\ninitModeObserverOptions: { rootMargin: `1000px 0px` } // `IntersectionObserverInit` options\n}}\ntemplate=\"react\"\n/>","recompile-mode#Recompile Mode":"The recompileMode option also allows you configure what happens when the user starts typing in the code editor. The immediate mode will fire the change to the bundler as soon as it is received, while the delayed mode will debounce the bundler operation until the user starts typing. Optionally, you can set the delay for the debounce, which by default is 500ms.By default, the mode is set to delayed to ensures the bundler doesn't run on each keystroke. You can customize this\nexperience by modifying the recompileDelay value or by setting the\nrecompileMode to immediate.\n<Sandpack\noptions={{\nrecompileMode: \"delayed\",\nrecompileDelay: 300,\n}}\ntemplate=\"react\"\n/>","resizable-panels#Resizable panels":"The <Sandpack /> preset component has resizable columns and rows by default, allowing users to extend and shrink the component sizes. This makes it easier to play with the preview component and shows more code-editor content. However, this is an optional configuration, and you can easily disable it:\n<Sandpack options={{ resizablePanels: false }} />\nOther components (SandpackProvider for example) do not have this functionality and it must be implemented by the user.","right-to-left-layout#Right to left layout":""}},"/getting-started/themes":{"title":"Themes","data":{"":"The overall style can be set through the theme prop. Sandpack offers a set of predefined options, but individual values can be passed to customize the style of your Sandpack instance. Besides the included themes, you can also consume a set of themes from @codesandbox/sandpack-themes, an open-source package that contains many other themes compatible with Sandpack.","custom-theme#Custom Theme":"You can also pass a partial theme object that overrides properties in the\ndefault theme, which is light."}},"/getting-started/private-packages":{"title":"Private packages","data":{"":"With Sandpack, you can securely consume private npm registries (GitHub packages, npm private registry, custom registries, etc.) within just a few steps. A CodeSandbox internal proxy provides the interface to communicate with a custom private npm registry and retrieve npm packages from any npm registry.You can access the settings here.\nThis setting is only available on enterprise plans.","configuration#Configuration":"","get-started#Get started":"Settings: Configure your npm settings on the CodeSandbox Dashboard.\nTrusted domains: Set a list of trusted domains on the Dashboard.\n\n\nThis will ensure that no one but you can use and render these sandboxes\n\n\n\nSandpack: Provide a team ID and your custom setup for your Sandpack sandboxes.\n\n\nYou can find your team ID on the dashboard URL at codesandbox.io/dashboard\n\n\n\n\n\n<Sandpack\ntemplate=\"react\"\n\n// This is an identifier for your sandboxes and private npm registry\nteamId=\"YOUR_TEAM_ID\"\n\n// Set the dependencies; for example, this is a private package from GitHub packages\ncustomSetup={{\ndependencies: { \"@codesandbox/test-package\": \"latest\" },\n}}\n\n// Consume dependencies as usual\nfiles={{\n\"App.js\": `import { Button } from \"@codesandbox/test-package\";\n\nexport default function App() {\nreturn <Button>Hello World</Button>\n}`,\n}}\n/>\n\n\nSign-in: When Sandpack loads, you will be asked to sign in; after doing that, it's done.","exporting-sandboxes#Exporting sandboxes":"Once Sandpack is configured, you can use the \"Open in CodeSandbox\" button to export sandboxes to CodeSandbox effortlessly. However in order to seamless export the sandbox, you need to provide a CodeSandbox API key that will be used to create a sandbox inside your workspace.\nGenerate a API token in your dashboard: codesandbox.io/t/permissions.\nUse the generate token to setup your Sandpack instance:\n\n\n<Sandpack\ncustomSetup={{\nexportOptions: {\napiToken: \"<API-TOKEN>\",\nprivacy: \"private\", // \"public\" | \"private\"\n}\n}}\n/>\n\nThis sandbox will be created inside the given workspace and can be shared with team members.","security#Security":"It is important to us to ensure that the information and tokens of the npm registry are kept private. As such, we have added some extra measures to prevent any type of leakage.","persisting-the-auth-token#Persisting the auth token":"The auth token is stored in our database in an encrypted form, using a key that's rolled and not available to the database itself. Even in the unlikely event that our database gets compromised, your auth token would be encrypted and inaccessible.","single-sandbox-key#Single-Sandbox key":"We never send the auth token to the browser. Instead, we give every editor of the sandbox a key that only gives them access to that specific sandbox.If they want to retrieve a package from the private npm registry, they will have to ask our API. The API will fetch the auth token, request the npm registry on behalf of the user and return the response to the user.","trusted-domain-only#Trusted domain only":"Sandpack uses the HTTP Content-Security-Policy (CSP) frame-ancestors directive to validate parents' window that may embed the given sandpack iFrame.With this extra security layer, only websites you trust (and provide to us) can render and fetch private packages from your registry. This can avoid phishing websites and the potential leakage of private data."}},"/advanced-usage":{"title":"Overview","data":{"":"If you open a preset file from the sandpack repository, you'll see it is made up\nof smaller sandpack components and has limited logic for passing props to\nthose smaller components.If you need a custom version of sandpack, you can opt in to use these smaller\ncomponents, which are also exported from the main package.Before talking about the actual components, let's dive into how sandpack manages its internal state.","sandpack-provider#Sandpack Provider":"The core of sandpack is managed by the SandpackProvider, central point of our\narchitecture. The provider abstracts the functionality of sandpack and places\nthe public state values and functions on a context object. The React\ncomponents that are exported by the main package (eg: SandpackCodeEditor,\nSandpackPreview) use that context object to communicate with sandpack.\n\nRunning this snippet will render a preview with a vanilla template, because the sandpack logic is running behind\nthe scenes and the template, if omitted, is vanilla.","clients#Clients":"Under one Sandpack provider, you can have multiple sandpack-clients. For example, the most common case for multiple clients is when more than one SandpackPreview has been rendered.To access all the clients or to pass messages to the iframes under the same provider, use the useSandpack hook, which gives a way to interact with these clients:\nconst ListenerIframeMessage = () => {\nconst { sandpack } = useSandpack();\n\nconst sender = () => {\nObject.values(sandpack.clients).forEach((client) => {\nclient.iframe.contentWindow.postMessage(\"Hello world\", \"*\");\n});\n};\n\nreturn <button onClick={sender}>Send message</button>;\n};"}},"/advanced-usage/components":{"title":"Components","data":{"":"Several Sandpack prefixed components are available in the sandpack-react package. They can be used to build custom presets, as long as they render within the providers we talked about during the previous section.Let's try to rebuild the Sandpack preset, using the sandpack components available in the sandpack-react package.","layout#Layout":"The first component inside the Provider is SandpackLayout. This component ensures the theming is applied and gives your sandpack instance the two column layout with the first child on the left and the second one on the right.\nSandpackLayout gives you the left-right split between two components and\nalso breaks the columns when the component is under 700px wide, so you have\nsome responsiveness built-in. It also renders the theme provider for\nconvenience.\n\n\nFurther now we have pretty much the same component as the preset, minus the prop\npassing, which you can decide based on your specific needs.You can easily swap the two components inside the SandpackLayout to get a different instance of Sandpack.\n\nSandpackProvider accepts a theme prop, so you can pass in your custom theme object or a predefined theme.","preview#Preview":"The Preview component is running the sandpack bundler, so without rendering a Preview component you will not have any bundling and evaluation of the code in sandpack. However, the Preview is smart enough to start even if it is mounted later in the page. This is how the autorun=false mode is working.\n<SandpackProvider template=\"react\">\n<SandpackLayout>\n<SandpackPreview />\n</SandpackLayout>\n</SandpackProvider>\nThere's nothing stopping you from rendering multiple previews in the same Provider. They will all be connected to the same state source, but they can for example point to different pages of the same application.\n\n\n\nOptions\n\nProp\tDescription\tType\tDefault\tshowNavigator\t\tboolean\tfalse\tshowOpenInCodeSandbox\t\tboolean\ttrue\tshowRefreshButton\t\tboolean\ttrue\tshowSandpackErrorOverlay\tWhether to show the <ErrorOverlay> component on top of the preview, if a runtime error happens.\tboolean\ttrue\tshowOpenNewtab\t\tboolean\ttrue\tactionsChildren\t\tJSX.Element\tnull\tstartRoute\tOverwrite the default starting route\tstring\tundefined","additional-buttons#Additional buttons":"The <SandpackPreview /> component also allows you to add additional buttons to the preview area.","additional-content#Additional content":"For advanced use cases, children of <SandpackPreview> are rendered at the end of the preview container.","getting-the-client-instance-from-sandpackpreview#Getting the client instance from SandpackPreview":"You can imperatively retrieve the Sandpack client from a SandpackPreview ref, and also consume or interact with the current state of the preview. Check out the type definitions for more details.\nimport { SandpackPreviewRef, useSandpack, SandpackPreview } from \"@codesandbox/sandpack-react\"\n\nconst SandpackPreviewClient: React.FC = () => {\nconst { sandpack } = useSandpack();\nconst previewRef = React.useRef<SandpackPreviewRef>();\n\nReact.useEffect(() => {\nconst client = previewRef.current?.getClient();\nconst clientId = previewRef.current?.clientId;\n\nif (client && clientId) {\nconsole.log(client);\nconsole.log(sandpack.clients[clientId]);\n}\n/**\n* NOTE: In order to make sure that the client will be available\n* use the whole `sandpack` object as a dependency.\n*/\n}, [sandpack]);\n\nreturn <SandpackPreview ref={previewRef} />;\n};\n\nWorth mentioning that the SandpackClient will not be instantly available.\nSandpack has its own rules to decide when it'is the \"right\" moment to\ninitialize an instance from a preview component. (Sandpack will take into\naccount properties such as autorun, initMode, and the current client stack\npriority) This means that it's expected that getClient function returns\nundefined which is a valid state.","code-editor#Code editor":"The SandpackCodeEditor component renders a wrapper over codemirror, a lightweight code editor we use inside sandpack. If you played with the Sandpack preset, you should be familiar already with the props that you can pass to the code editor component:\n\n\n\nOptions\n\nProp\tDescription\tType\tDefault\tshowTabs\t\tboolean\tfalse\tshowLineNumbers\t\tboolean\tfalse\tshowInlineErrors\t\tboolean\tfalse\tshowRunButton\t\tboolean\tfalse\twrapContent\t\tboolean\tfalse\tclosableTabs\t\tboolean\tfalse\tinitMode\tThis provides a way to control how some components are going to be initialized on the page. The CodeEditor and the Preview components are quite expensive and might overload the memory usage, so this gives a certain control of when to initialize them.\t\"immediate\" | \"lazy\" | \"user-visible\"\t\"lazy\"\textensions\tCodeMirror extensions for the editor state, which can provide extra features and functionalities to the editor component.\tExtension[]\tundefined\textensionsKeymap\tProperty to register CodeMirror extension keymap.\tKeyBinding[]\t`undefined\tid\tBy default, Sandpack generates a random value to use as an id. Use this to override this value if you need predictable values.\tstring\tundefined\treadOnly\tThis disables editing of the editor content by the user.\tboolean\tfalse\tshowReadOnly\tControls the visibility of Read-only label, which will only appears when readOnly is true\tboolean\ttrue\tadditionalLanguages\tProvides a way to add custom language modes by supplying a language type, applicable file extensions, and a LanguageSupport instance for that syntax mode\tCustomLanguage[]\tundefined","extensions#Extensions":"Sandpack uses CodeMirror under the hood to provide a nice editor. You can extend the editor with any CodeMirror extensions, such as @codemirror/autocomplete.","additional-languages#Additional languages":"Sandpack provides built-in support for a variety of common languages:\nJavaScript, JSX\nTypeScript, TSX\nCSS, SCSS, Less\nHTML\nVue\n\nWhen an appropriate language can't be detected JavaScript is used.If you want to support additional languages you can extend the editor by supplying a CodeMirror language and associating it with one or more file extensions.\nimport { python } from \"@codemirror/lang-python\";\n\n<SandpackProvider>\n<SandpackCodeEditor\nadditionalLanguages={[\n{\nname: \"python\",\nextensions: [\"py\"],\nlanguage: python(),\n},\n]}\n/>\n</SandpackProvider>\n\n<Sandpack\noptions={{\ncodeEditor: {\nadditionalLanguages: [\n{\nname: \"python\",\nextensions: [\"py\"],\nlanguage: python(),\n},\n]\n},\n}}\ntemplate=\"react\"\n/>\nWhen using a stream language mode you'll need to convert it into a LanguageSupport instance.\nimport { LanguageSupport, StreamLanguage } from \"@codemirror/language\";\nimport { shell } from \"@codemirror/legacy-modes/mode/shell\";\n\n<SandpackProvider>\n<SandpackCodeEditor\nadditionalLanguages={[\n{\nname: \"shell\",\nextensions: [\"sh\", \"bat\", \"ps1\"],\nlanguage: new LanguageSupport(StreamLanguage.define(shell)),\n},\n]}\n/>\n</SandpackProvider>;","advanced-usage#Advanced usage":"If you want to interact directly with CodeMirror, use the component ref to access the getCodemirror function, which will return the CodeMirror instance. Check out how to use it:\nimport { EditorSelection } from \"@codemirror/state\";\n\nconst App = () => {\nconst codemirrorInstance = useRef();\n\nuseEffect(() => {\n// Getting CodeMirror instance\nconst cmInstance = codemirrorInstance.current.getCodemirror();\n\nif (!cmInstance) return;\n\n// Current position\nconst currentPosition = cmInstance.state.selection.ranges[0].to;\n\n// Setting a new position\nconst trans = cmInstance.state.update({\nselection: EditorSelection.cursor(currentPosition + 1),\nchanges: {\nfrom: 0,\nto: cmInstance.state.doc.length,\ninsert: code,\n},\n});\n\ncmInstance.update([trans]);\n}, []);\n\nreturn (\n<SandpackProvider template=\"react\">\n<SandpackCodeEditor ref={codemirrorInstance} />\n</SandpackProvider>\n);\n};\nThis is especially useful to get the cursor's current position, add custom decorators, set the selection in a specific position, etc.","file-explorer#File Explorer":"The SandpackFileExplorer provides a minimal but very powerful experience to navigate through files. You can open and close folders, and open new files.\n\n\n\nOptions\n\nProp\tDescription\tType\tDefault\tautoHiddenFiles\tEnable auto hidden file in file explorer\tboolean\tfalse\tinitialCollapsedFolder\tInitial state of folder (collapsed or not)\tstring[] e.g. [\"/components/src/\"]\tundefined\n\nIf you're looking for extra feature we recommend using AaronPowell96/sandpack-file-explorer package which support things such as:\nAdd and remove files or directories,\nDrag and drop to move files or directories,\nAllow users to customise the entire folder structure right within your website!\nWorks out of the box with all of Sandpack's templates.","tests#Tests":"The SandpackTests component renders a thin wrapper around Jest to run tests directly in the browser. This means you can run tests but additional configuration may not possible given the browser environment.\nAny test files ending with .test.js(x), .spec.js(x), .test.ts(x) and\n.spec.ts(x) will automatically be run with Jest and the results shown in the\nSandpackTests component.","usage#Usage":"There are two ways to run tests and check out the output:","sandpack-preset#Sandpack Preset":"Using test-ts template preset, which contains an example test.","sandpacktests-component#SandpackTests component":"Standalone and configurable component to run tests, which you can combine with test-ts template or supply custom files. For more details about its usage and implementation, check out the API reference.\n\n\n\nOptions\n| Prop | Description | Type | Default |\n| verbose | Display individual test results with the test suite hierarchy. | boolean | false|\n| watchMode | Watch files for changes and rerun all tests. Note if changing a test file then the current file will run on it's own | boolean | true |\n| onComplete | A callback that is invoked with the completed specs. | Function | undefined |","extending-expect#Extending expect":"Although not all configuration is supported, extending\nexpect with custom /\nthird party matchers is still possible.\nAdd the matchers either as a dependency or as a file and then import the matchers into your tests and invoke expect.extend with your matchers.","hiding-tests#Hiding Tests":"You can hide the test files using the visibleFiles prop. Additionally, if you want to suppress test content and only show the test results, you can use the hideTestsAndSuppressLogs option.\nThis option will hide the test files, suppress the console logs, and disable the verbose button.","console#Console":"SandpackConsole is a Sandpack devtool that allows printing the console logs from a Sandpack client. It is designed to be a light version of a browser console, which means that it's limited to a set of common use cases you may encounter when coding.Sandpack runs the console directly into the iframe. As a result, all console messages pass through the Sandpack protocol, where you can attach a listener to these messages in your own component or use the proper Sandpack React hook to consume them.","usage-1#Usage":"There are three ways to print the logs:\n<Sandpack options={{ showConsole: true }} />: shows a panel right after the SandpackPreview;\n<SandpackConsole />: standalone component to render the logs;\nuseSandpackConsole: React hook to consume the console logs from a Sandpack client;\n\n\n\n\n\nSandpackConsole Options\n\nProp\tDescription\tType\tDefault\tclientId\t\tstring\tundefined\tshowHeader\t\tboolean\ttrue\tshowSyntaxError\t\tboolean\tfalse\tshowResetConsoleButton\t\tboolean\ttrue\tshowRestartButton\t\tboolean\ttrue\tmaxMessageCount\t\tnumber\t800\tonLogsChange\t\t(logs: SandpackConsoleData) => void\t\tresetOnPreviewRestart\tReset the console list on every preview restart\tboolean\tfalse\tref\tMake possible to imperatively interact with the console component\tSandpackConsoleRef\tSandpackConsoleRef\tstandalone\tIt runs its sandpack-client, meaning it doesn't depend on a SandpackPreview component.\tboolean\tfalse\tactionsChildren\t\tJSX.Element\tnull","limitation#Limitation":"Considering that SandpackConsole is meant to be a light version of a browser console, there are a few limitations in its implementation in order to keep it modular and light:\nIt needs to have a Sandpack client running (iframe) to execute the logs.\nIt only supports four types of consoles: info, warning, error, and clear.\nIt doesn't render nested objects due to recursive issues.\n\nHowever, if you need to support more advanced cases, useSandpackConsole hook is compatible with console-feed, which provides a closer browser-console experience without any of the limitations mentioned above.","code-viewer#Code Viewer":"For situations when you strictly want to show some code and run it in the browser, you can use the SandpackCodeViewer component. It looks similar to the code editor, but it renders a read-only version of codemirror, so users will not be able to edit the code.\n\n\n\nOptions\n\nProp\tDescription\tType\tDefault\tshowTabs\t\tboolean\tfalse\tshowLineNumbers\t\tboolean\tfalse\tdecorators\tProvides a way to draw or style a piece of the content.\tDecorators\tundefined\tcode\t\tstring\tundefined\twrapContent\t\tboolean\tfalse\tinitMode\tThis provides a way to control how some components are going to be initialized on the page. The CodeEditor and the Preview components are quite expensive and might overload the memory usage, so this gives a certain control of when to initialize them.\t\"immediate\" | \"lazy\" | \"user-visible\"\t\"lazy\"","codemirror-decorations#CodeMirror decorations":"This API provides a way to draw or style a piece of code in the editor content. You can implement it in the following ways:\nEntire line: add className or elements attributes to an entire line;\nRange: add className or elements attributes to a piece of content, given a line, startColumn and endColumn;","openincodesandboxbutton#OpenInCodeSandboxButton":"You can build a custom button that creates a new sandbox from the sandpack files. It will include any edits made in the Sandpack editor, so it is a great way to persist your changes. The created sandbox will open on CodeSandbox in a new tab.Let's use the UnstyledOpenInCodeSandboxButton as an example:\n\nThe UnstyledOpenInCodeSandboxButton is a basic component that does not carry any styles. If you want a ready-to-use component, use the OpenInCodeSandboxButton instead, which has the same functionality but includes the CodeSandbox logo.","other-components#Other components":"You can also bring other components in the mix: SandpackTranspiledCode, FileTabs, SandpackFileExplorer, Navigator and so on.For example, you can create an editor instance that gives you the transpiled\ncode of your active component instead of the preview page:\n\nYou will notice that the theming applies to all components in the same way, as\nthe theme object is also distributed by the theme context.Some of the components have configuration props that toggle subparts on/off or that configure behavior/look. All\nof them comunicate with sandpack through the shared context.\nCongrats!\n\nYou can now easily create a custom Sandpack component by reusing some of the\nbuilding components of the library. The next step is to build your own\nsandpack components with the help of our custom hooks."}}}